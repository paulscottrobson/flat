              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-03-16 18:07:15
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th March 2019
              	;		Purpose :	Flat Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 388A    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: DD01    			db 		$DD,$01
              	
800C: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
8010: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8012: CDC686  			call 	PAGEInitialise
              	
8015: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8017: CD0785  			call 	GFXMode
              	
801A: 3A468A  			ld 		a,(BootPage)						; switch to boot page.
801D: CDC686  			call 	PAGEInitialise
8020: DD2A448A			ld 		ix,(BootAddress)					; start address
8024: 210000  			ld 		hl,0								; zero AB registers
8027: 110000  			ld 		de,0
802A: 22488A  			ld 		(Parameter),hl 						; clear parameter
802D: DDE9    			jp 		(ix) 								; and execute.
              	
802F:         	StopDefault:	
802F: C32F80  			jp 		StopDefault
              	
8032: C9      			ret
              			
              			include "__includes.asm"					; the included sources picked up by processcore.py
              		include "components/console/drivers/screen48k.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8033:         	GFXInitialise48k:
8033: F5      			push 	af 									; save registers
8034: C5      			push 	bc
              	
8035: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8038: 3E00    			ld 		a,0 								; disable Layer 2
803A: ED79    			out 	(c),a
803C: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8040: 210040  			ld 		hl,$4000 							; clear pixel memory
8043: 3600    	__cs1:	ld 		(hl),0
8045: 23      			inc 	hl
8046: 7C      			ld 		a,h
8047: FE58    			cp 		$58
8049: 20F8    			jr 		nz,__cs1
804B: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
804D: 23      			inc 	hl
804E: 7C      			ld 		a,h
804F: FE5B    			cp 		$5B
8051: 20F8    			jr 		nz,__cs2	
8053: AF      			xor 	a 									; border off
8054: D3FE    			out 	($FE),a
8056: C1      			pop 	bc
8057: F1      			pop 	af
8058: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
805B: 115F80  			ld 		de,GFXPrintCharacter48k
805E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
805F:         	GFXPrintCharacter48k:
805F: F5      			push 	af 									; save registers
8060: C5      			push 	bc
8061: D5      			push 	de
8062: E5      			push 	hl
              	
8063: 43      			ld 		b,e 								; character in B
8064: 7C      			ld 		a,h 								; check range.
8065: FE03    			cp 		3
8067: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8069: E5      			push 	hl 									; save position.
806A: 7C      			ld 		a,h
806B: C658    			add 	$58
806D: 67      			ld 		h,a
              	
806E: 7A      			ld 		a,d 								; get current colour
806F: E607    			and 	7  									; mask 0..2
8071: F640    			or 		$40  								; make bright
8073: 77      			ld 		(hl),a 								; store it.	
8074: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8075: D5      			push 	de
8076: EB      			ex 		de,hl
8077: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8078: 7A      			ld 		a,d
8079: E603    			and 	3
807B: 87      			add 	a,a
807C: 87      			add 	a,a
807D: 87      			add 	a,a
807E: F640    			or 		$40
8080: 67      			ld 		h,a
8081: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8082: E5      			push 	hl
8083: 78      			ld 		a,b 								; get character
8084: E67F    			and 	$7F 								; bits 0-6 only.
8086: D620    			sub 	32
8088: 6F      			ld 		l,a 								; put in HL
8089: 2600    			ld 		h,0
808B: 29      			add 	hl,hl 								; x 8
808C: 29      			add 	hl,hl
808D: 29      			add 	hl,hl
808E: ED5B5C8A			ld 		de,(SIFontBase) 					; add the font base.
8092: 19      			add 	hl,de
8093: EB      			ex 		de,hl 								; put in DE (font address)
8094: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8095: 78      			ld 		a,b
8096: 0608    			ld 		b,8 								; copy 8 characters
8098: 0E00    			ld 		c,0 								; XOR value 0
809A: CB7F    			bit 	7,a 								; is the character reversed
809C: 2801    			jr 		z,__ZXWCCopy
809E: 0D      			dec 	c 									; C is the XOR mask now $FF
809F:         	__ZXWCCopy:
809F: 1A      			ld 		a,(de)								; get font data
80A0: A9      			xor 	c 									; xor with reverse
80A1: 77      			ld 		(hl),a 								; write back
80A2: 24      			inc 	h 									; bump pointers
80A3: 13      			inc 	de
80A4: 10F9    			djnz 	__ZXWCCopy 							; do B times.
80A6:         	__ZXWCExit:
80A6: E1      			pop 	hl 									; restore and exit
80A7: D1      			pop 	de
80A8: C1      			pop 	bc
80A9: F1      			pop 	af
80AA: C9      			ret
              		include "components/console/drivers/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
80AB:         	GFXInitialiseLayer2:
80AB: F5      			push 	af
80AC: C5      			push 	bc
80AD: D5      			push 	de
80AE: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
80B2: 1E02    			ld 		e,2 								; 3 banks to erase
80B4:         	L2PClear:
80B4: 7B      			ld 		a,e 								; put bank number in bits 6/7
80B5: CB0F    			rrc 	a
80B7: CB0F    			rrc 	a
80B9: F603    			or 		2+1 								; shadow on, visible, enable write paging
80BB: 013B12  			ld 		bc,$123B 							; out to layer 2 port
80BE: ED79    			out 	(c),a
80C0: 210040  			ld 		hl,$4000 							; erase the bank to $00 
80C3:         	L2PClearBank: 										; assume default palette :)
80C3: 2B      			dec 	hl
80C4: 3600    			ld 		(hl),$00
80C6: 7C      			ld 		a,h
80C7: B5      			or 		l
80C8: 20F9    			jr		nz,L2PClearBank
80CA: 1D      			dec 	e
80CB: F2B480  			jp 		p,L2PClear
              	
80CE: AF      			xor 	a
80CF: D3FE    			out 	($FE),a
              	
80D1: D1      			pop 	de
80D2: C1      			pop 	bc
80D3: F1      			pop 	af
80D4: 212018  			ld 		hl,$1820 							; still 32 x 24 	
80D7: 11DB80  			ld 		de,GFXPrintCharacterLayer2
80DA: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
80DB:         	GFXPrintCharacterLayer2:
80DB: F5      			push 	af
80DC: C5      			push 	bc
80DD: D5      			push 	de
80DE: E5      			push 	hl
80DF: DDE5    			push 	ix
              	
80E1: 43      			ld 		b,e 								; save A temporarily
80E2: 78      			ld 		a,b
80E3: E67F    			and 	$7F
80E5: FE20    			cp 		32
80E7: 3872    			jr 		c,__L2Exit 							; check char in range
80E9: 7C      			ld 		a,h
80EA: FE03    			cp 		3
80EC: 306D    			jr 		nc,__L2Exit 						; check position in range
80EE: 78      			ld 		a,b
              	
80EF: F5      			push 	af 	
80F0: AF      			xor 	a 									; convert colour in C to palette index
80F1: CB42    			bit 	0,d 								; (assumes standard palette)
80F3: 2802    			jr 		z,__L2Not1
80F5: F603    			or 		$03
80F7:         	__L2Not1:
80F7: CB52    			bit 	2,d
80F9: 2802    			jr 		z,__L2Not2
80FB: F61C    			or 		$1C
80FD:         	__L2Not2:
80FD: CB4A    			bit 	1,d
80FF: 2802    			jr 		z,__L2Not3
8101: F6C0    			or 		$C0
8103:         	__L2Not3:
8103: 4F      			ld 		c,a 								; C is foreground
8104: 0600    			ld 		b,0									; B is xor flipper, initially zero
8106: F1      			pop 	af 									; restore char
              	
8107: E5      			push 	hl
8108: CB7F    			bit 	7,a 								; adjust background bit on bit 7
810A: 2802    			jr 		z,__L2NotCursor
810C: 06FF    			ld 		b,$FF 								; light grey is cursor
810E:         	__L2NotCursor:
810E: E67F    			and 	$7F 								; offset from space
8110: D620    			sub 	$20
8112: 6F      			ld 		l,a 								; put into HL
8113: 2600    			ld 		h,0
8115: 29      			add 	hl,hl 								; x 8
8116: 29      			add 	hl,hl
8117: 29      			add 	hl,hl
              	
8118: E5      			push 	hl 									; transfer to IX
8119: DDE1    			pop 	ix
811B: E1      			pop 	hl
              	
811C: C5      			push 	bc 									; add the font base to it.
811D: ED4B5C8A			ld 		bc,(SIFontBase)
8121: DD09    			add 	ix,bc
8123: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8124: C5      			push 	bc
8125: 7C      			ld  	a,h 								; this is the page number.
8126: CB0F    			rrc 	a
8128: CB0F    			rrc 	a
812A: E6C0    			and 	$C0 								; in bits 6 & 7
812C: F603    			or 		$03 								; shadow on, visible, enable write pagin.
812E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8131: ED79    			out 	(c),a
8133: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8134: EB      			ex 		de,hl
8135: 6B      			ld 		l,e
8136: 2600    			ld 		h,0
8138: 29      			add 	hl,hl 								
8139: 29      			add 	hl,hl
813A: 29      			add 	hl,hl
813B: CB24    			sla 	h
813D: CB24    			sla 	h
813F: CB24    			sla 	h
              	
8141: 1E08    			ld 		e,8 								; do 8 rows
8143:         	__L2Outer:
8143: E5      			push 	hl 									; save start
8144: 1608    			ld 		d,8 								; do 8 columns
8146: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8149: A8      			xor 	b 									; maybe flip it ?
814A: DD23    			inc 	ix
814C:         	__L2Loop:
814C: 3600    			ld 		(hl),0 								; background
814E: 87      			add 	a,a 								; shift pattern left
814F: 3001    			jr 		nc,__L2NotSet
8151: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8152:         	__L2NotSet:
8152: 23      			inc 	hl
8153: 15      			dec 	d 									; do a row
8154: 20F6    			jr 		nz,	__L2Loop
8156: E1      			pop 	hl 									; restore, go 256 bytes down.
8157: 24      			inc 	h
8158: 1D      			dec 	e 									; do 8 rows
8159: 20E8    			jr 		nz,__L2Outer	
815B:         	__L2Exit:
815B: DDE1    			pop 	ix
815D: E1      			pop 	hl
815E: D1      			pop 	de
815F: C1      			pop 	bc
8160: F1      			pop 	af
8161: C9      			ret
              		include "components/console/drivers/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8162:         	GFXInitialiseLowRes:
8162: F5      			push 	af
8163: C5      			push 	bc
8164: D5      			push 	de
              	
8165: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8169: AF      			xor 	a 									; layer 2 off.
816A: 013B12  			ld 		bc,$123B 							; out to layer 2 port
816D: ED79    			out 	(c),a
              	
816F: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8172: 110060  			ld 		de,$6000
8175:         	LowClearScreen: 									; assume default palette :)
8175: AF      			xor 	a
8176: 77      			ld 		(hl),a
8177: 12      			ld 		(de),a
8178: 23      			inc 	hl
8179: 13      			inc 	de
817A: 7C      			ld 		a,h
817B: FE58    			cp 		$58
817D: 20F6    			jr		nz,LowClearScreen
817F: AF      			xor 	a
8180: D3FE    			out 	($FE),a
8182: D1      			pop 	de
8183: C1      			pop 	bc
8184: F1      			pop 	af
8185: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8188: 118C81  			ld 		de,GFXPrintCharacterLowRes
818B: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
818C:         	GFXPrintCharacterLowRes:
818C: F5      			push 	af
818D: C5      			push 	bc
818E: D5      			push 	de
818F: E5      			push 	hl
8190: DDE5    			push 	ix
              	
8192: 43      			ld 		b,e 								; save character in B
8193: 7B      			ld 		a,e
8194: E67F    			and 	$7F
8196: FE20    			cp 		32
8198: 3866    			jr 		c,__LPExit
              	
819A: 29      			add 	hl,hl
819B: 29      			add 	hl,hl
819C: 7C      			ld	 	a,h 								; check in range 192*4 = 768
819D: FE03    			cp 		3
819F: 305F    			jr 		nc,__LPExit
              	
81A1: 7A      			ld 		a,d 								; only lower 3 bits of colour
81A2: E607    			and 	7
81A4: 4F      			ld 		c,a 								; C is foreground
              	
81A5: E5      			push 	hl
81A6: 78      			ld 		a,b 								; get char back
81A7: 0600    			ld 		b,0 								; B = no flip colour.
81A9: CB7F    			bit 	7,a
81AB: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
81AD: 05      			dec 	b
81AE:         	__LowNotReverse:
81AE: E67F    			and 	$7F 								; offset from space
81B0: D620    			sub 	$20
81B2: 6F      			ld 		l,a 								; put into HL
81B3: 2600    			ld 		h,0
81B5: 29      			add 	hl,hl 								; x 8
81B6: 29      			add 	hl,hl
81B7: 29      			add 	hl,hl
              	
81B8: E5      			push 	hl 									; transfer to IX
81B9: DDE1    			pop 	ix
              	
81BB: C5      			push 	bc 									; add the font base to it.
81BC: ED4B5C8A			ld 		bc,(SIFontBase)
81C0: DD09    			add 	ix,bc
81C2: C1      			pop 	bc
81C3: E1      			pop 	hl
81C4: EB      			ex 		de,hl
81C5: 7B      			ld 		a,e 								; put DE => HL
81C6: E6C0    			and 	192 								; these are part of Y
81C8: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
81C9: 62      			ld 		h,d		
81CA: 29      			add 	hl,hl
81CB: 29      			add 	hl,hl
81CC: 29      			add 	hl,hl
81CD: 29      			add 	hl,hl
81CE: CBF4    			set 	6,h 								; put into $4000 range
              	
81D0: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
81D2: A3      			and 	e 									; and with E, gives X position
81D3: 87      			add 	a,a 								; now multiplied by 8.
81D4: 5F      			ld 		e,a 								; DE is x offset.
81D5: 1600    			ld 		d,0  
              	
81D7: 19      			add 	hl,de
81D8: 7C      			ld 		a,h
81D9: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
81DB: 3804    			jr 		c,__LowNotLower2
81DD: 110008  			ld 		de,$0800
81E0: 19      			add 	hl,de
81E1:         	__LowNotLower2:
81E1: 1E08    			ld 		e,8 								; do 8 rows
81E3:         	__LowOuter:
81E3: E5      			push 	hl 									; save start
81E4: 1608    			ld 		d,8 								; do 8 columns
81E6: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
81E9: A8      			xor 	b
81EA: DD23    			inc 	ix
81EC:         	__LowLoop:
81EC: 3600    			ld 		(hl),0 								; background
81EE: 87      			add 	a,a 								; shift pattern left
81EF: 3001    			jr 		nc,__LowNotSet
81F1: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
81F2:         	__LowNotSet:
81F2: 2C      			inc 	l
81F3: 15      			dec 	d 									; do a row
81F4: 20F6    			jr 		nz,	__LowLoop
81F6: E1      			pop 	hl 									; restore, go 256 bytes down.
81F7: D5      			push 	de
81F8: 118000  			ld 		de,128
81FB: 19      			add 	hl,de
81FC: D1      			pop 	de
81FD: 1D      			dec 	e 									; do 8 rows
81FE: 20E3    			jr 		nz,__LowOuter	
8200:         	__LPExit:
8200: DDE1    			pop 	ix
8202: E1      			pop 	hl
8203: D1      			pop 	de
8204: C1      			pop 	bc
8205: F1      			pop 	af
8206: C9      			ret
              	
              		include "components/console/font.asm"
8207:         	AlternateFont:
8207: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
820B: 00000000	
820F: 0C1E1E0C	
8213: 0C000C00	
8217: 36360000	
821B: 00000000	
821F: 36367F36	
8223: 7F363600	
8227: 183E603C	
822B: 067C1800	
822F: 0063660C	
8233: 18336300	
8237: 1C361C3B	
823B: 6E663B00	
823F: 30306000	
8243: 00000000	
8247: 0C183030	
824B: 30180C00	
824F: 30180C0C	
8253: 0C183000	
8257: 00331E7F	
825B: 1E330000	
825F: 0018187E	
8263: 18180000	
8267: 00000000	
826B: 00181830	
826F: 0000007E	
8273: 00000000	
8277: 00000000	
827B: 00181800	
827F: 03060C18	
8283: 30604000	
8287: 3E63676F	
828B: 7B733E00	
828F: 18381818	
8293: 18187E00	
8297: 3C66061C	
829B: 30667E00	
829F: 3C66061C	
82A3: 06663C00	
82A7: 0E1E3666	
82AB: 7F060F00	
82AF: 7E607C06	
82B3: 06663C00	
82B7: 1C30607C	
82BB: 66663C00	
82BF: 7E66060C	
82C3: 18181800	
82C7: 3C66663C	
82CB: 66663C00	
82CF: 3C66663E	
82D3: 060C3800	
82D7: 00181800	
82DB: 00181800	
82DF: 00181800	
82E3: 00181830	
82E7: 0C183060	
82EB: 30180C00	
82EF: 00007E00	
82F3: 007E0000	
82F7: 30180C06	
82FB: 0C183000	
82FF: 3C66060C	
8303: 18001800	
8307: 3E636F6F	
830B: 6F603C00	
830F: 183C6666	
8313: 7E666600	
8317: 7E33333E	
831B: 33337E00	
831F: 1E336060	
8323: 60331E00	
8327: 7C363333	
832B: 33367C00	
832F: 7F31343C	
8333: 34317F00	
8337: 7F31343C	
833B: 34307800	
833F: 1E336060	
8343: 67331F00	
8347: 6666667E	
834B: 66666600	
834F: 3C181818	
8353: 18183C00	
8357: 0F060606	
835B: 66663C00	
835F: 7333363C	
8363: 36337300	
8367: 78303030	
836B: 31337F00	
836F: 63777F7F	
8373: 6B636300	
8377: 63737B6F	
837B: 67636300	
837F: 1C366363	
8383: 63361C00	
8387: 7E33333E	
838B: 30307800	
838F: 3C666666	
8393: 6E3C0E00	
8397: 7E33333E	
839B: 36337300	
839F: 3C667038	
83A3: 0E663C00	
83A7: 7E5A1818	
83AB: 18183C00	
83AF: 66666666	
83B3: 66667E00	
83B7: 66666666	
83BB: 663C1800	
83BF: 6363636B	
83C3: 7F776300	
83C7: 6363361C	
83CB: 1C366300	
83CF: 6666663C	
83D3: 18183C00	
83D7: 7F63460C	
83DB: 19337F00	
83DF: 3C303030	
83E3: 30303C00	
83E7: 6030180C	
83EB: 06030100	
83EF: 3C0C0C0C	
83F3: 0C0C3C00	
83F7: 081C3663	
83FB: 00000000	
83FF: 00000000	
8403: 0000007F	
8407: 18180C00	
840B: 00000000	
840F: 00003C06	
8413: 3E663B00	
8417: 7030303E	
841B: 33336E00	
841F: 00003C66	
8423: 60663C00	
8427: 0E06063E	
842B: 66663B00	
842F: 00003C66	
8433: 7E603C00	
8437: 1C363078	
843B: 30307800	
843F: 00003B66	
8443: 663E067C	
8447: 7030363B	
844B: 33337300	
844F: 18003818	
8453: 18183C00	
8457: 06000606	
845B: 0666663C	
845F: 70303336	
8463: 3C367300	
8467: 38181818	
846B: 18183C00	
846F: 0000667F	
8473: 7F6B6300	
8477: 00007C66	
847B: 66666600	
847F: 00003C66	
8483: 66663C00	
8487: 00006E33	
848B: 333E3078	
848F: 00003B66	
8493: 663E060F	
8497: 00006E3B	
849B: 33307800	
849F: 00003E60	
84A3: 3C067C00	
84A7: 08183E18	
84AB: 181A0C00	
84AF: 00006666	
84B3: 66663B00	
84B7: 00006666	
84BB: 663C1800	
84BF: 0000636B	
84C3: 7F7F3600	
84C7: 00006336	
84CB: 1C366300	
84CF: 00006666	
84D3: 663E067C	
84D7: 00007E4C	
84DB: 18327E00	
84DF: 0E181870	
84E3: 18180E00	
84E7: 0C0C0C00	
84EB: 0C0C0C00	
84EF: 7018180E	
84F3: 18187000	
84F7: 3B6E0000	
84FB: 00000000	
84FF: 00...   	
              	
              		include "components/console/graphics.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
8507:         	GFXMode:
8507: C5      			push 	bc
8508: D5      			push 	de
8509: E5      			push 	hl
850A: 7D      			ld 		a,l 								; save new mode.
850B: 32588A  			ld 		(SIScreenMode),a
850E: 2D      			dec 	l 									; L = 1 mode layer2
850F: 2808    			jr 		z,__GFXLayer2
8511: 2D      			dec 	l
8512: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8514: CD3380  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
8517: 1808    			jr 		__GFXConfigure
              	
8519:         	__GFXLayer2:
8519: CDAB80  			call 	GFXInitialiseLayer2
851C: 1803    			jr 		__GFXConfigure
              	
851E:         	__GFXLowRes:
851E: CD6281  			call 	GFXInitialiseLowRes
              	
8521:         	__GFXConfigure:
8521: 7D      			ld 		a,l 								; save screen size
8522: 324C8A  			ld 		(SIScreenWidth),a
8525: 7C      			ld 		a,h
8526: 32508A  			ld 		(SIScreenHeight),a
8529: EB      			ex 		de,hl 								; save driver
852A: 225E8A  			ld 		(SIScreenDriver),hl
              	
852D: 6A      			ld 		l,d 								; put sizes in HL DE
852E: 2600    			ld 		h,0
8530: 1600    			ld 		d,0
8532: CDAC86  			call 	MULTMultiply16 						; multiply to get size and store.
8535: 22548A  			ld 		(SIScreenSize),hl
              	
8538: E1      			pop 	hl
8539: D1      			pop 	de
853A: C1      			pop 	bc
853B: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
853C:         	GFXWriteCharacter:
853C: F5      			push 	af
853D: C5      			push 	bc
853E: D5      			push 	de
853F: E5      			push 	hl
8540: 014A85  			ld 		bc,__GFXWCExit
8543: C5      			push 	bc
8544: ED4B5E8A			ld 		bc,(SIScreenDriver)
8548: C5      			push 	bc
8549: C9      			ret
854A:         	__GFXWCExit:
854A: E1      			pop 	hl
854B: D1      			pop 	de
854C: C1      			pop 	bc
854D: F1      			pop 	af
854E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
854F:         	GFXWriteHexWord:
854F: 3E05    			ld 		a,5
8551:         	GFXWriteHexWordA:
8551: C5      			push 	bc
8552: D5      			push 	de
8553: E5      			push 	hl
8554: 4F      			ld 		c,a
8555: 7A      			ld 		a,d
8556: D5      			push 	de
8557: CD6385  			call 	__GFXWHByte
855A: D1      			pop 	de
855B: 7B      			ld 		a,e
855C: CD6385  			call	__GFXWHByte
855F: E1      			pop 	hl
8560: D1      			pop 	de
8561: C1      			pop 	bc
8562: C9      			ret
              	
8563:         	__GFXWHByte:
8563: F5      			push 	af
8564: CB0F    			rrc 	a
8566: CB0F    			rrc		a
8568: CB0F    			rrc 	a
856A: CB0F    			rrc 	a
856C: CD7085  			call 	__GFXWHNibble
856F: F1      			pop 	af
8570:         	__GFXWHNibble:
8570: 51      			ld 		d,c
8571: E60F    			and 	15
8573: FE0A    			cp 		10
8575: 3802    			jr 		c,__GFXWHDigit
8577: C607    			add		a,7
8579:         	__GFXWHDigit:
8579: C630    			add 	a,48
857B: 5F      			ld 		e,a
857C: CD3C85  			call 	GFXWriteCharacter
857F: 23      			inc 	hl
8580: C9      			ret
              		include "components/console/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8581:         	IOScanKeyboard:
8581: C5      			push 	bc
8582: D5      			push 	de
8583: E5      			push 	hl
              	
8584: 21D685  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8587: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8589: 06FE    			ld 		b,$FE
858B: ED78    			in 		a,(c)
858D: CB47    			bit 	0,a
858F: 2005    			jr 		nz,__kr1
8591: 21FE85  			ld 		hl,__kr_shift_table
8594: 180B    			jr 		__kr2
8596:         	__kr1:
8596: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8598: ED78    			in 		a,(c)
859A: CB4F    			bit 	1,a
859C: 2003    			jr 		nz,__kr2
859E: 212686  			ld 		hl,__kr_symbol_shift_table
85A1:         	__kr2:
              	
85A1: 1EFE    			ld 		e,$FE 								; scan pattern.
85A3: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
85A4: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
85A6: FEFE    			cp 		$FE
85A8: 2808    			jr 		z,___kr4
85AA: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
85AC: FE7F    			cp 		$7F
85AE: 2802    			jr 		z,___kr4
85B0: 161F    			ld 		d,$01F 								; check all bits.
85B2:         	___kr4:
85B2: 43      			ld 		b,e 								; scan the keyboard
85B3: 0EFE    			ld 		c,$FE
85B5: ED78    			in 		a,(c)
85B7: 2F      			cpl 										; make that active high.
85B8: A2      			and 	d  									; and with check value.
85B9: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
85BB: 23      			inc 	hl 									; next set of keyboard characters
85BC: 23      			inc 	hl
85BD: 23      			inc 	hl
85BE: 23      			inc 	hl
85BF: 23      			inc 	hl
              	
85C0: 7B      			ld 		a,e 								; get pattern
85C1: 87      			add 	a,a 								; shift left
85C2: F601    			or 		1 									; set bit 1.
85C4: 5F      			ld 		e,a
              	
85C5: FEFF    			cp 		$FF 								; finished when all 1's.
85C7: 20DA    			jr 		nz,__kr3 
85C9: AF      			xor 	a
85CA: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
85CC:         	__kr_keypressed:
85CC: 23      			inc 	hl  								; shift right until carry set
85CD: 1F      			rra
85CE: 30FC    			jr 		nc,__kr_keypressed
85D0: 2B      			dec 	hl 									; undo the last inc hl
85D1: 7E      			ld 		a,(hl) 								; get the character number.
85D2:         	__kr_exit:
85D2: E1      			pop 	hl
85D3: D1      			pop 	de
85D4: C1      			pop 	bc
85D5: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
85D6:         	__kr_no_shift_table:
85D6: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
85DA: 76617364	
85DE: 6667    	
85E0: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
85E4: 74313233	
85E8: 3435    	
85EA: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
85EE: 36706F69	
85F2: 7579    	
85F4: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
85F8: 6820006D	
85FC: 6E62    	
              	
85FE:         	__kr_shift_table:
85FE: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8602: 2F7E7C5C	
8606: 7B7D    	
8608: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
860C: 3E214023	
8610: 2425    	
8612: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8616: 26223B00	
861A: 5D5B    	
861C: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8620: 5E20002E	
8624: 2C2A    	
              	
8626:         	__kr_symbol_shift_table:
8626: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
862A: 2F7E7C5C	
862E: 7B7D    	
8630: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8634: 3E101112	
8638: 1314    	
863A: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
863E: 15223B00	
8642: 5D5B    	
8644: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8648: 5E20002E	
864C: 2C2A    	
              		include "components/core/divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
864E:         	DIVDivideMod16:
              	
864E: C5      		push 	bc
864F: 42      		ld 		b,d 				; DE 
8650: 4B      		ld 		c,e
8651: EB      		ex 		de,hl
8652: 210000  		ld 		hl,0
8655: 78      		ld 		a,b
8656: 0608    		ld 		b,8
8658:         	Div16_Loop1:
8658: 17      		rla
8659: ED6A    		adc 	hl,hl
865B: ED52    		sbc 	hl,de
865D: 3001    		jr 		nc,Div16_NoAdd1
865F: 19      		add 	hl,de
8660:         	Div16_NoAdd1:
8660: 10F6    		djnz 	Div16_Loop1
8662: 17      		rla
8663: 2F      		cpl
8664: 47      		ld 		b,a
8665: 79      		ld 		a,c
8666: 48      		ld 		c,b
8667: 0608    		ld 		b,8
8669:         	Div16_Loop2:
8669: 17      		rla
866A: ED6A    		adc 	hl,hl
866C: ED52    		sbc 	hl,de
866E: 3001    		jr 		nc,Div16_NoAdd2
8670: 19      		add 	hl,de
8671:         	Div16_NoAdd2:
8671: 10F6    		djnz 	Div16_Loop2
8673: 17      		rla
8674: 2F      		cpl
8675: 51      		ld 		d,c
8676: 5F      		ld 		e,a
8677: C1      		pop 	bc
8678: C9      		ret
              			
              			
              		include "components/core/farmemory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th March 2019
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8679:         	FARCompileByte:
8679: F5      			push 	af 									; save byte and HL
867A: E5      			push 	hl
867B: F5      			push 	af 									; save byte
867C: 3A3A8A  			ld		a,(HerePage) 						; switch to page
867F: CDD886  			call 	PAGESwitch
8682: 2A388A  			ld 		hl,(Here) 							; write to memory location
8685: F1      			pop 	af
8686: 77      			ld 		(hl),a
8687: 23      			inc 	hl 									; bump memory location
8688: 22388A  			ld 		(Here),hl 							; write back
868B: CDF186  			call 	PAGERestore
868E: E1      			pop 	hl 									; restore and exit
868F: F1      			pop 	af
8690: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8691:         	FARCompileWord:
8691: F5      			push 	af 									; save byte and HL
8692: D5      			push 	de
8693: E5      			push 	hl
8694: EB      			ex 		de,hl 								; word into DE
8695: 3A3A8A  			ld		a,(HerePage) 						; switch to page
8698: CDD886  			call 	PAGESwitch
869B: 2A388A  			ld 		hl,(Here) 							; write to memory location
869E: 73      			ld 		(hl),e
869F: 23      			inc 	hl 	
86A0: 72      			ld 		(hl),d
86A1: 23      			inc 	hl
86A2: 22388A  			ld 		(Here),hl 							; write back
86A5: CDF186  			call 	PAGERestore
86A8: E1      			pop 	hl
86A9: D1      			pop 	de 									; restore and exit
86AA: F1      			pop 	af
86AB: C9      			ret
              		include "components/core/multiply.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
86AC:         	MULTMultiply16:
86AC: C5      			push 	bc
86AD: D5      			push 	de
86AE: 44      			ld 		b,h 							; get multipliers in DE/BC
86AF: 4D      			ld 		c,l
86B0: 210000  			ld 		hl,0 							; zero total
86B3:         	__Core__Mult_Loop:
86B3: CB41    			bit 	0,c 							; lsb of shifter is non-zero
86B5: 2801    			jr 		z,__Core__Mult_Shift
86B7: 19      			add 	hl,de 							; add adder to total
86B8:         	__Core__Mult_Shift:
86B8: CB38    			srl 	b 								; shift BC right.
86BA: CB19    			rr 		c
86BC: EB      			ex 		de,hl 							; shift DE left
86BD: 29      			add 	hl,hl
86BE: EB      			ex 		de,hl
86BF: 78      			ld 		a,b 							; loop back if BC is nonzero
86C0: B1      			or 		c
86C1: 20F0    			jr 		nz,__Core__Mult_Loop
86C3: D1      			pop 	de
86C4: C1      			pop 	bc
86C5: C9      			ret
              	
              		include "components/core/paging.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th March 2019
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
86C6:         	PAGEInitialise:
86C6: E5      			push 	hl
86C7: ED9256  			db 		$ED,$92,$56							; switch to page A
86CA: 3C      			inc 	a
86CB: ED9257  			db 		$ED,$92,$57
86CE: 3D      			dec 	a
86CF: 08      			ex 		af,af' 								; put page in A'
86D0: 21628A  			ld 		hl,__PAGEStackBase 					; reset the page stack
86D3: 22608A  			ld 		(__PAGEStackPointer),hl
86D6: E1      			pop 	hl
86D7: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
86D8:         	PAGESwitch:
86D8: F5      			push 	af
86D9: E5      			push 	hl
              	
86DA: F5      			push 	af 									; save A on stack
86DB: 2A608A  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
86DE: 08      			ex 		af,af'
86DF: 77      			ld 		(hl),a
86E0: 23      			inc 	hl
86E1: 22608A  			ld 		(__PAGEStackPointer),hl
              	
86E4: F1      			pop 	af 									; restore new A
86E5: ED9256  			db 		$ED,$92,$56							; switch to page A
86E8: 3C      			inc 	a
86E9: ED9257  			db 		$ED,$92,$57
86EC: 3D      			dec 	a
86ED: 08      			ex 		af,af' 								; put page in A'
              	
86EE: E1      			pop 	hl
86EF: F1      			pop 	af
86F0: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
86F1:         	PAGERestore:
86F1: F5      			push 	af
86F2: E5      			push 	hl
86F3: 2A608A  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
86F6: 2B      			dec 	hl
86F7: 7E      			ld 		a,(hl)
86F8: 22608A  			ld 		(__PAGEStackPointer),hl
86FB: ED9256  			db 		$ED,$92,$56							; switch to page A
86FE: 3C      			inc 	a
86FF: ED9257  			db 		$ED,$92,$57
8702: 3D      			dec 	a
8703: 08      			ex 		af,af' 								; update A'
8704: E1      			pop 	hl
8705: F1      			pop 	af
8706: C9      			ret
              					
              		include "temp/binary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Binary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* < word *********
              	
8707:         	define_3c:
8707: CD218A  		call COMPCompileSelf
870A: 7C      		ld   a,h           ; check if signs different.
870B: AA      		xor  d
870C: 87      		add  a,a          ; CS if different
870D: 3004    		jr   nc,__less_samesign
870F: 7A      		ld   a,d          ; different. set CS to sign of B
8710: 87      		add  a,a          ; if set (negative) B must be < A as A is +ve
8711: 1805    		jr   __less_returnc
8713:         	__less_samesign:
8713: D5      		push  de           ; save DE
8714: EB      		ex   de,hl          ; -1 if B < A
8715: ED52    		sbc  hl,de          ; calculate B - A , hencs CS if < (Carry clear by add a,a)
8717: D1      		pop  de           ; restore DE
8718:         	__less_returnc:
8718: 3E00    		ld   a,0          ; A 0
871A: DE00    		sbc  a,0          ; A $FF if CS.
871C: 6F      		ld   l,a          ; put in HL
871D: 67      		ld   h,a
871E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* = word *********
              	
871F:         	define_3d:
871F: CD218A  		call COMPCompileSelf
8722: 7C      		ld   a,h          ; H = H ^ D
8723: AA      		xor  d
8724: 67      		ld   h,a
8725: 7D      		ld   a,l          ; A = (L ^ E) | (H ^ D)
8726: AB      		xor  e
8727: B4      		or   h           ; if A == 0 they are the same.
8728: 210000  		ld   hl,$0000         ; return 0 if different
872B: C0      		ret  nz
872C: 2B      		dec  hl           ; return -1
872D: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* - word *********
              	
872E:         	define_2d:
872E: CD218A  		call COMPCompileSelf
8731: D5      		push  de           ; save DE
8732: EB      		ex   de,hl          ; HL = B, DE = A
8733: AF      		xor  a            ; clear carry
8734: ED52    		sbc  hl,de          ; calculate B-A
8736: D1      		pop  de           ; restore DE
8737: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* * word *********
              	
8738:         	define_2a:
8738: CD218A  		call COMPCompileSelf
873B: C3AC86  		jp   MULTMultiply16
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* / word *********
              	
873E:         	define_2f:
873E: CD218A  		call COMPCompileSelf
8741: D5      		push  de
8742: CD4E86  		call  DIVDivideMod16
8745: EB      		ex   de,hl
8746: D1      		pop  de
8747: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* + macro *********
              	
8748:         	define_2b:
8748: CD2C8A  		call COMPMacroExpand
874B: 0601    		ld b,end_2b-start_2b
874D:         	start_2b:
874D: 19      		add  hl,de
874E:         	end_2b:
874E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* and word *********
              	
874F:         	define_61_6e_64:
874F: CD218A  		call COMPCompileSelf
8752: 7C      		ld   a,h
8753: A2      		and  d
8754: 67      		ld   h,a
8755: 7D      		ld   a,l
8756: A3      		and  e
8757: 6F      		ld   l,a
8758: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* mod word *********
              	
8759:         	define_6d_6f_64:
8759: CD218A  		call COMPCompileSelf
875C: D5      		push  de
875D: CD4E86  		call  DIVDivideMod16
8760: D1      		pop  de
8761: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* or word *********
              	
8762:         	define_6f_72:
8762: CD218A  		call COMPCompileSelf
8765: 7C      		ld   a,h
8766: B2      		or   d
8767: 67      		ld   h,a
8768: 7D      		ld   a,l
8769: B3      		or   e
876A: 6F      		ld   l,a
876B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* xor word *********
              	
876C:         	define_78_6f_72:
876C: CD218A  		call COMPCompileSelf
876F: 7C      		ld   a,h
8770: AA      		xor  d
8771: 67      		ld   h,a
8772: 7D      		ld   a,l
8773: AB      		xor  e
8774: 6F      		ld   l,a
8775: C9      		ret
              	
              		include "temp/console.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;  File:  console.src
              	;  Purpose: con.raw words.
              	;  Date :   12th March 2019
              	;  Author:  paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	
              	; ********* con.raw.setmode word *********
              	
8776:         	define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65:
8776: CD218A  		call COMPCompileSelf
8779: C30785  		jp   GFXMode
              	
              	
              	
              	; ********* con.raw.char! word *********
              	
877C:         	define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21:
877C: CD218A  		call COMPCompileSelf
877F: C33C85  		jp   GFXWriteCharacter
              	
              	
              	
              	; ********* con.raw.hex! word *********
              	
8782:         	define_63_6f_6e_2e_72_61_77_2e_68_65_78_21:
8782: CD218A  		call COMPCompileSelf
8785: C34F85  		jp   GFXWriteHexWord
              	
              	
              	
              	; ********* con.raw.inkey word *********
              	
8788:         	define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79:
8788: CD218A  		call COMPCompileSelf
878B: EB      		ex   de,hl
878C: CD8185  		call  IOScanKeyboard       ; read keyboard
878F: 6F      		ld   l,a
8790: 2600    		ld   h,$00
8792: C9      		ret
              		include "temp/dictionary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   dictionary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019.
              	;  Purpose : Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;  Add Dictionary Word. Name is a tagged string at BC ends in $80-$FF.
              	;  Uses the current page/pointer values.
              	;
              	; ***********************************************************************************************
              	
8793:         	DICTAddWord:
8793: F5      		push  af          ; registers to stack.
8794: C5      		push  bc
8795: D5      		push  de
8796: E5      		push hl
8797: DDE5    		push  ix
              	
8799: C5      		push  bc          ; put word address in HL
879A: E1      		pop  hl
              	
879B: 7E      		ld   a,(hl)         ; get length from tag into B
879C: E63F    		and  $3F
879E: 47      		ld   b,a
879F: 23      		inc  hl          ; HL = first character of word to be added.
              	
87A0: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
87A2: CDD886  		call  PAGESwitch
              	
87A5: DD2100C0		ld   ix,$C000       ; IX = Start of dictionary
              	
87A9:         	__DICTFindEndDictionary:
87A9: DD7E00  		ld   a,(ix+0)        ; follow down chain to the end
87AC: B7      		or   a
87AD: 2807    		jr   z,__DICTCreateEntry
87AF: 5F      		ld   e,a         ; go to next.
87B0: 1600    		ld   d,0
87B2: DD19    		add  ix,de
87B4: 18F3    		jr   __DICTFindEndDictionary
              	
87B6:         	__DICTCreateEntry:         ; IX now points to the 0 which ends the dictionary.
87B6: 78      		ld   a,b
87B7: C605    		add  a,5
87B9: DD7700  		ld   (ix+0),a        ; offset is length + 5
              	
87BC: 3A3A8A  		ld   a,(HerePage)      ; code page
87BF: DD7701  		ld   (ix+1),a
              	
87C2: ED5B388A		ld   de,(Here)        ; code address
87C6: DD7302  		ld   (ix+2),e
87C9: DD7203  		ld   (ix+3),d
              	
87CC: DD7004  		ld   (ix+4),b        ; put length in offset 4
              	
87CF: EB      		ex   de,hl         ; put address of name in DE
87D0:         	__DICTAddCopy:
87D0: 1A      		ld   a,(de)         ; copy byte over as 7 bit ASCII.
87D1: DD7705  		ld   (ix+5),a
87D4: DD23    		inc  ix
87D6: 13      		inc  de
87D7: 10F7    		djnz __DICTAddCopy       ; until string is copied over, e.g. B bytes
              	
87D9: DD360500		ld   (ix+5),0        ; write end of dictionary zero.
              	
87DD: CDF186  		call  PAGERestore
              	
87E0: DDE1    		pop  ix          ; restore and exit
87E2: E1      		pop  hl
87E3: D1      		pop  de
87E4: C1      		pop  bc
87E5: F1      		pop  af
87E6: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;   Find word in dictionary. BC points to tagged string which is the name.
              	;
              	;   On exit, HL is the address and DE the page number with CC if found,
              	;   CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
87E7:         	DICTFindWord:
87E7: C5      		push  bc         ; save registers - return in DEHL Carry
87E8: DDE5    		push  ix
              	
87EA: 60      		ld   h,b        ; put address of name in HL.
87EB: 69      		ld   l,c        ; this points to the length/type tag.
              	
87EC: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
87EE: CDD886  		call  PAGESwitch
              	
87F1: DD2100C0		ld   ix,$C000       ; dictionary start
87F5:         	__DICTFindMainLoop:
87F5: DD7E00  		ld   a,(ix+0)      ; examine offset, exit if zero as we have searched the lot.
87F8: B7      		or   a
87F9: 283A    		jr   z,__DICTFindFail
              	
87FB: DD7E04  		ld   a,(ix+4)       ; length of the word being checked.
87FE: AE      		xor  (hl)        ; xor with tag length
87FF: E63F    		and  $3F        ; check lower 6 bits
8801: 2029    		jr   nz,__DICTFindNext     ; if different can't be this word as different lengths.
              	
8803: DDE5    		push  ix         ; save pointers on stack.
8805: E5      		push  hl
              	
8806: DD7E04  		ld   a,(ix+4)      ; get the word length to test into B
8809: E63F    		and  $3F
880B: 47      		ld   b,a
880C: 23      		inc  hl         ; skip over tag byte
880D:         	__DICTCheckName:
880D: DD7E05  		ld   a,(ix+5)       ; compare dictionary vs character.
8810: BE      		cp   (hl)        ; compare vs the matching character.
8811: 2016    		jr   nz,__DICTFindNoMatch    ; no, not the same word.
8813: 23      		inc  hl         ; HL point to next character
8814: DD23    		inc  ix
8816: 10F5    		djnz  __DICTCheckName     ; do for B characters.
              	
8818: E1      		pop  hl         ; Found a match. restore HL and IX
8819: DDE1    		pop  ix
              	
881B: 1600    		ld   d,0        ; D = 0
881D: DD5E01  		ld   e,(ix+1)      ; E = page#
8820: DD6E02  		ld   l,(ix+2)      ; HL = address
8823: DD6603  		ld   h,(ix+3)
8826: AF      		xor  a         ; clear the carry flag.
8827: 1813    		jr   __DICTFindExit
              	
8829:         	__DICTFindNoMatch:        ; this one doesn't match.
8829: E1      		pop  hl         ; restore HL and IX
882A: DDE1    		pop  ix
882C:         	__DICTFindNext:
882C: DD5E00  		ld   e,(ix+0)      ; DE = offset to next word
882F: 1600    		ld   d,$00
8831: DD19    		add  ix,de        ; IX now points to next word.
8833: 18C0    		jr   __DICTFindMainLoop    ; and try the next one.
              	
8835:         	__DICTFindFail:
8835: 110000  		ld   de,$0000       ; return all zeros.
8838: 210000  		ld   hl,$0000
883B: 37      		scf          ; set carry flag
883C:         	__DICTFindExit:
883C: F5      		push  af         ; restore original page, preserving carry flag.
883D: CDF186  		call  PAGERestore
8840: F1      		pop  af
8841: DDE1    		pop  ix         ; pop registers and return.
8843: C1      		pop  bc
8844: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;      Remove underscore prefixed words from the dictionary.
              	;
              	; ***********************************************************************************************
              	
              	
              	
              	; ********* dict.crunch word *********
              	
8845:         	define_64_69_63_74_2e_63_72_75_6e_63_68:
8845: CD218A  		call COMPCompileSelf
              	
8848:         	DICTCrunchDictionary:
8848: C5      		push  bc
8849: D5      		push  de
884A: E5      		push hl
884B: DDE5    		push  ix
              	
884D: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
884F: CDD886  		call  PAGESwitch
8852: DD2100C0		ld   ix,$C000       ; dictionary start
8856:         	__DICTCrunchNext:
8856: DD7E00  		ld   a,(ix+0)
8859: B7      		or   a
885A: 2823    		jr   z,__DICTCrunchExit
885C: DD7E05  		ld   a,(ix+5)       ; check first character
885F: FE5F    		cp   '_'        ; if not _, try next
8861: 2013    		jr   nz,__DICTCrunchAdvance
              	
8863: DDE5    		push  ix
8865: D1      		pop   de         ; DE = start position
8866: DD6E00  		ld   l,(ix+0)      ; HL = start + offset
8869: 2600    		ld   h,0
886B: 19      		add  hl,de
886C: 7C      		ld   a,h        ; BC = count
886D: 2F      		cpl
886E: 47      		ld   b,a
886F: 7D      		ld   a,l
8870: 2F      		cpl
8871: 4F      		ld   c,a
8872: EDB0    		ldir          ; copy it
8874: 18E0    		jr   __DICTCrunchNext     ; retry from the same position.
              	
8876:         	__DICTCrunchAdvance:       ; go to next slot.
8876: DD5E00  		ld   e,(ix+0)      ; DE = offset
8879: 1600    		ld   d,0
887B: DD19    		add  ix,de        ; go gorward
887D: 18D7    		jr   __DICTCrunchNext
              	
887F:         	__DICTCrunchExit:
887F: DDE1    		pop  ix
8881: E1      		pop  hl
8882: D1      		pop  de
8883: C1      		pop  bc
8884: C9      		ret
              	
              	
              		include "temp/memory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Memory operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ! macro *********
              	
8885:         	define_21:
8885: CD2C8A  		call COMPMacroExpand
8888: 0604    		ld b,end_21-start_21
888A:         	start_21:
888A: 73      		ld   (hl),e
888B: 23      		inc  hl
888C: 72      		ld   (hl),d
888D: 2B      		dec  hl
888E:         	end_21:
888E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* @ macro *********
              	
888F:         	define_40:
888F: CD2C8A  		call COMPMacroExpand
8892: 0604    		ld b,end_40-start_40
8894:         	start_40:
8894: 7E      		ld   a,(hl)
8895: 23      		inc  hl
8896: 66      		ld  h,(hl)
8897: 6F      		ld  l,a
8898:         	end_40:
8898: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +! word *********
              	
8899:         	define_2b_21:
8899: CD218A  		call COMPCompileSelf
889C: 7E      		ld   a,(hl)
889D: 83      		add  a,e
889E: 77      		ld   (hl),a
889F: 23      		inc  hl
88A0: 7E      		ld   a,(hl)
88A1: 8A      		adc  a,d
88A2: 77      		ld   (hl),a
88A3: 2B      		dec  hl
88A4: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c! macro *********
              	
88A5:         	define_63_21:
88A5: CD2C8A  		call COMPMacroExpand
88A8: 0601    		ld b,end_63_21-start_63_21
88AA:         	start_63_21:
88AA: 73      		ld   (hl),e
88AB:         	end_63_21:
88AB: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c@ macro *********
              	
88AC:         	define_63_40:
88AC: CD2C8A  		call COMPMacroExpand
88AF: 0603    		ld b,end_63_40-start_63_40
88B1:         	start_63_40:
88B1: 6E      		ld   l,(hl)
88B2: 2600    		ld   h,0
88B4:         	end_63_40:
88B4: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p@ word *********
              	
88B5:         	define_70_40:
88B5: CD218A  		call COMPCompileSelf
88B8: 42      		ld   b,d
88B9: 4B      		ld   c,e
88BA: ED68    		in   l,(c)
88BC: 2600    		ld   h,0
88BE: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p! macro *********
              	
88BF:         	define_70_21:
88BF: CD2C8A  		call COMPMacroExpand
88C2: 0604    		ld b,end_70_21-start_70_21
88C4:         	start_70_21:
88C4: 42      		ld   b,d
88C5: 4B      		ld   c,e
88C6: ED69    		out  (c),l
88C8:         	end_70_21:
88C8: C9      		ret
              		include "temp/miscellany.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   miscellany.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* , word *********
              	
88C9:         	define_2c:
88C9: 00      		nop
88CA: CD218A  		call COMPCompileSelf
88CD: C39186  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ; macro *********
              	
88D0:         	define_3b:
88D0: 00      		nop
88D1: CD2C8A  		call COMPMacroExpand
88D4: 0601    		ld b,end_3b-start_3b
88D6:         	start_3b:
88D6: C9      		ret
88D7:         	end_3b:
88D7: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c, word *********
              	
88D8:         	define_63_2c:
88D8: 00      		nop
88D9: CD218A  		call COMPCompileSelf
88DC: 7D      		ld   a,l
88DD: C39186  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* param! word *********
              	
88E0:         	define_70_61_72_61_6d_21:
88E0: CD218A  		call COMPCompileSelf
88E3: 22488A  		ld   (Parameter),hl
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* copy word *********
              	
88E6:         	define_63_6f_70_79:
88E6: CD218A  		call COMPCompileSelf
88E9: ED4B488A		ld   bc,(Parameter)
88ED: 78      		ld   a,b
88EE: B1      		or   c
88EF: C8      		ret  z
              	
88F0: C5      		push  bc          ; BC count
88F1: D5      		push  de          ; DE target
88F2: E5      		push  hl          ; HL source
              	
88F3: AF      		xor  a          ; Clear C
88F4: ED52    		sbc  hl,de         ; check overlap ?
88F6: 300B    		jr   nc,__copy_gt_count      ; if source after target
88F8: 19      		add  hl,de         ; undo subtract
              	
88F9: 09      		add  hl,bc         ; add count to HL + DE
88FA: EB      		ex   de,hl
88FB: 09      		add  hl,bc
88FC: EB      		ex   de,hl
88FD: 1B      		dec  de          ; dec them, so now at the last byte to copy
88FE: 2B      		dec  hl
88FF: EDB8    		lddr           ; do it backwards
8901: 1803    		jr   __copy_exit
              	
8903:         	__copy_gt_count:
8903: 19      		add  hl,de         ; undo subtract
8904: EDB0    		ldir          ; do the copy
8906:         	__copy_exit:
8906: E1      		pop  hl          ; restore registers
8907: D1      		pop  de
8908: C1      		pop  bc
8909: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* fill word *********
              	
890A:         	define_66_69_6c_6c:
890A: CD218A  		call COMPCompileSelf
890D: ED4B488A		ld   bc,(Parameter)
8911: 78      		ld   a,b         ; exit if C = 0
8912: B1      		or   c
8913: C8      		ret  z
              	
8914: C5      		push  bc          ; BC count
8915: D5      		push  de          ; DE target, L byte
8916:         	__fill_loop:
8916: 7D      		ld   a,l         ; copy a byte
8917: 12      		ld   (de),a
8918: 13      		inc  de          ; bump pointer
8919: 0B      		dec  bc          ; dec counter and loop
891A: 78      		ld   a,b
891B: B1      		or   c
891C: 20F8    		jr   nz,__fill_loop
891E: D1      		pop  de          ; restore
891F: C1      		pop  bc
8920: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* halt word *********
              	
8921:         	define_68_61_6c_74:
8921: 00      		nop
8922: CD218A  		call COMPCompileSelf
8925:         	__halt_loop:
8925: F3      		di
8926: 76      		halt
8927: 18FC    		jr   __halt_loop
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* break macro *********
              	
8929:         	define_62_72_65_61_6b:
8929: 00      		nop
892A: CD2C8A  		call COMPMacroExpand
892D: 0602    		ld b,end_62_72_65_61_6b-start_62_72_65_61_6b
892F:         	start_62_72_65_61_6b:
892F: DD01    		db   $DD,$01
8931:         	end_62_72_65_61_6b:
8931: C9      		ret
              	
              		include "temp/register.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Register manipulation
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* swap macro *********
              	
8932:         	define_73_77_61_70:
8932: CD2C8A  		call COMPMacroExpand
8935: 0601    		ld b,end_73_77_61_70-start_73_77_61_70
8937:         	start_73_77_61_70:
8937: EB      		ex   de,hl
8938:         	end_73_77_61_70:
8938: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>b macro *********
              	
8939:         	define_61_3e_62:
8939: CD2C8A  		call COMPMacroExpand
893C: 0602    		ld b,end_61_3e_62-start_61_3e_62
893E:         	start_61_3e_62:
893E: 54      		ld   d,h
893F: 5D      		ld   e,l
8940:         	end_61_3e_62:
8940: C9      		ret
              	
              	
              	
              	
              	; ********* b>a macro *********
              	
8941:         	define_62_3e_61:
8941: CD2C8A  		call COMPMacroExpand
8944: 0602    		ld b,end_62_3e_61-start_62_3e_61
8946:         	start_62_3e_61:
8946: 62      		ld   h,d
8947: 6B      		ld   l,e
8948:         	end_62_3e_61:
8948: C9      		ret
              	
              		include "temp/stack.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Stack words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* push macro *********
              	
8949:         	define_70_75_73_68:
8949: 00      		nop
894A: CD2C8A  		call COMPMacroExpand
894D: 0601    		ld b,end_70_75_73_68-start_70_75_73_68
894F:         	start_70_75_73_68:
894F: E5      		push  hl
8950:         	end_70_75_73_68:
8950: C9      		ret
              	
              	
              	
              	; ********* pop macro *********
              	
8951:         	define_70_6f_70:
8951: 00      		nop
8952: CD2C8A  		call COMPMacroExpand
8955: 0602    		ld b,end_70_6f_70-start_70_6f_70
8957:         	start_70_6f_70:
8957: EB      		ex   de,hl
8958: E1      		pop  hl
8959:         	end_70_6f_70:
8959: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>r macro *********
              	
895A:         	define_61_3e_72:
895A: 00      		nop
895B: CD2C8A  		call COMPMacroExpand
895E: 0601    		ld b,end_61_3e_72-start_61_3e_72
8960:         	start_61_3e_72:
8960: E5      		push  hl
8961:         	end_61_3e_72:
8961: C9      		ret
              	
              	
              	
              	; ********* r>a macro *********
              	
8962:         	define_72_3e_61:
8962: 00      		nop
8963: CD2C8A  		call COMPMacroExpand
8966: 0601    		ld b,end_72_3e_61-start_72_3e_61
8968:         	start_72_3e_61:
8968: E1      		pop  hl
8969:         	end_72_3e_61:
8969: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* b>r macro *********
              	
896A:         	define_62_3e_72:
896A: 00      		nop
896B: CD2C8A  		call COMPMacroExpand
896E: 0601    		ld b,end_62_3e_72-start_62_3e_72
8970:         	start_62_3e_72:
8970: D5      		push  de
8971:         	end_62_3e_72:
8971: C9      		ret
              	
              	
              	
              	; ********* r>b macro *********
              	
8972:         	define_72_3e_62:
8972: 00      		nop
8973: CD2C8A  		call COMPMacroExpand
8976: 0601    		ld b,end_72_3e_62-start_72_3e_62
8978:         	start_72_3e_62:
8978: D1      		pop  de
8979:         	end_72_3e_62:
8979: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ab>r macro *********
              	
897A:         	define_61_62_3e_72:
897A: 00      		nop
897B: CD2C8A  		call COMPMacroExpand
897E: 0602    		ld b,end_61_62_3e_72-start_61_62_3e_72
8980:         	start_61_62_3e_72:
8980: D5      		push  de
8981: E5      		push  hl
8982:         	end_61_62_3e_72:
8982: C9      		ret
              	
              	
              	
              	; ********* r>ab macro *********
              	
8983:         	define_72_3e_61_62:
8983: 00      		nop
8984: CD2C8A  		call COMPMacroExpand
8987: 0602    		ld b,end_72_3e_61_62-start_72_3e_61_62
8989:         	start_72_3e_61_62:
8989: E1      		pop  hl
898A: D1      		pop  de
898B:         	end_72_3e_61_62:
898B: C9      		ret
              		include "temp/unary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Unary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* -- macro *********
              	
898C:         	define_2d_2d:
898C: CD2C8A  		call COMPMacroExpand
898F: 0601    		ld b,end_2d_2d-start_2d_2d
8991:         	start_2d_2d:
8991: 2B      		dec  hl
8992:         	end_2d_2d:
8992: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* --- macro *********
              	
8993:         	define_2d_2d_2d:
8993: CD2C8A  		call COMPMacroExpand
8996: 0602    		ld b,end_2d_2d_2d-start_2d_2d_2d
8998:         	start_2d_2d_2d:
8998: 2B      		dec  hl
8999: 2B      		dec  hl
899A:         	end_2d_2d_2d:
899A: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ++ macro *********
              	
899B:         	define_2b_2b:
899B: CD2C8A  		call COMPMacroExpand
899E: 0601    		ld b,end_2b_2b-start_2b_2b
89A0:         	start_2b_2b:
89A0: 23      		inc  hl
89A1:         	end_2b_2b:
89A1: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +++ macro *********
              	
89A2:         	define_2b_2b_2b:
89A2: CD2C8A  		call COMPMacroExpand
89A5: 0602    		ld b,end_2b_2b_2b-start_2b_2b_2b
89A7:         	start_2b_2b_2b:
89A7: 23      		inc  hl
89A8: 23      		inc  hl
89A9:         	end_2b_2b_2b:
89A9: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0- word *********
              	
89AA:         	define_30_2d:
89AA: CD218A  		call COMPCompileSelf
89AD:         	__negate:
89AD: 7C      		ld   a,h
89AE: 2F      		cpl
89AF: 67      		ld   h,a
89B0: 7D      		ld   a,l
89B1: 2F      		cpl
89B2: 6F      		ld   l,a
89B3: 23      		inc  hl
89B4: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0< word *********
              	
89B5:         	define_30_3c:
89B5: CD218A  		call COMPCompileSelf
89B8: CB7C    		bit  7,h
89BA: 210000  		ld   hl,$0000
89BD: C8      		ret  z
89BE: 2B      		dec  hl
89BF: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0= word *********
              	
89C0:         	define_30_3d:
89C0: CD218A  		call COMPCompileSelf
89C3: 7C      		ld   a,h
89C4: B5      		or   l
89C5: 210000  		ld   hl,$0000
89C8: C0      		ret  nz
89C9: 2B      		dec  hl
89CA: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2* macro *********
              	
89CB:         	define_32_2a:
89CB: CD2C8A  		call COMPMacroExpand
89CE: 0601    		ld b,end_32_2a-start_32_2a
89D0:         	start_32_2a:
89D0: 29      		add  hl,hl
89D1:         	end_32_2a:
89D1: C9      		ret
              	
              	
              	
              	; ********* 4* macro *********
              	
89D2:         	define_34_2a:
89D2: CD2C8A  		call COMPMacroExpand
89D5: 0602    		ld b,end_34_2a-start_34_2a
89D7:         	start_34_2a:
89D7: 29      		add  hl,hl
89D8: 29      		add  hl,hl
89D9:         	end_34_2a:
89D9: C9      		ret
              	
              	
              	
              	; ********* 8* macro *********
              	
89DA:         	define_38_2a:
89DA: CD2C8A  		call COMPMacroExpand
89DD: 0603    		ld b,end_38_2a-start_38_2a
89DF:         	start_38_2a:
89DF: 29      		add  hl,hl
89E0: 29      		add  hl,hl
89E1: 29      		add  hl,hl
89E2:         	end_38_2a:
89E2: C9      		ret
              	
              	
              	
              	; ********* 16* macro *********
              	
89E3:         	define_31_36_2a:
89E3: CD2C8A  		call COMPMacroExpand
89E6: 0604    		ld b,end_31_36_2a-start_31_36_2a
89E8:         	start_31_36_2a:
89E8: 29      		add  hl,hl
89E9: 29      		add  hl,hl
89EA: 29      		add  hl,hl
89EB: 29      		add  hl,hl
89EC:         	end_31_36_2a:
89EC: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2/ macro *********
              	
89ED:         	define_32_2f:
89ED: CD2C8A  		call COMPMacroExpand
89F0: 0604    		ld b,end_32_2f-start_32_2f
89F2:         	start_32_2f:
89F2: CB2C    		sra  h
89F4: CB1D    		rr   l
89F6:         	end_32_2f:
89F6: C9      		ret
              	
              	
              	
              	; ********* 4/ macro *********
              	
89F7:         	define_34_2f:
89F7: CD2C8A  		call COMPMacroExpand
89FA: 0608    		ld b,end_34_2f-start_34_2f
89FC:         	start_34_2f:
89FC: CB2C    		sra  h
89FE: CB1D    		rr   l
8A00: CB2C    		sra  h
8A02: CB1D    		rr   l
8A04:         	end_34_2f:
8A04: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* abs word *********
              	
8A05:         	define_61_62_73:
8A05: CD218A  		call COMPCompileSelf
8A08: CB7C    		bit  7,h
8A0A: C8      		ret  z
8A0B: C3AD89  		jp   __negate
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* bswap macro *********
              	
8A0E:         	define_62_73_77_61_70:
8A0E: CD2C8A  		call COMPMacroExpand
8A11: 0603    		ld b,end_62_73_77_61_70-start_62_73_77_61_70
8A13:         	start_62_73_77_61_70:
8A13: 7D      		ld   a,l
8A14: 6C      		ld   l,h
8A15: 67      		ld   h,a
8A16:         	end_62_73_77_61_70:
8A16: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* not word *********
              	
8A17:         	define_6e_6f_74:
8A17: CD218A  		call COMPCompileSelf
8A1A: 7C      		ld   a,h
8A1B: 2F      		cpl
8A1C: 67      		ld   h,a
8A1D: 7D      		ld   a,l
8A1E: 2F      		cpl
8A1F: 6F      		ld   l,a
8A20: C9      		ret
              		include "temp/wordaction.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   wordaction.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Routines that belong to word code
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;       Compile a reference to self.
              	;
              	; ***************************************************************************************
              	
8A21:         	COMPCompileSelf:
8A21: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8A22: 3ECD    		ld  a,$CD         ; call opcode
8A24: CD7986  		call  FARCompileByte       ; compile that
8A27: CD9186  		call  FARCompileWord       ; compile the address
8A2A: E1      		pop  hl          ; restore old HL
8A2B: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;         Compile Macro Code
              	;
              	; ***************************************************************************************
              	
8A2C:         	COMPMacroExpand:
8A2C: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8A2D: 23      		inc  hl          ; skip over the LD B,xx opcode
8A2E: 46      		ld   b,(hl)         ; read count
8A2F:         	__COMPMExLoop:
8A2F: 23      		inc  hl          ; get next byte to copy
8A30: 7E      		ld   a,(hl)
8A31: CD7986  		call  FARCompileByte       ; compile that
8A34: 10F9    		djnz  __COMPMExLoop      ; do it B times.
8A36: E1      		pop  hl          ; restore old HL
8A37: C9      		ret
              	
              	
              	
              			include "data.asm"							; data area.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th March 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8A38:         	SystemInformation:
              	
8A38:         	Here:												; +0 	Here 
8A38: 728A    			dw 		FreeMemory
8A3A:         	HerePage: 											; +2	Here.Page
8A3A: 2A00    			db 		FirstCodePage,0
8A3C:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
8A3C: 2C000000			db 		FirstCodePage+2,0,0,0
8A40:         	DisplayInfo: 										; +8 	Display information
8A40: 4C8A0000			dw 		DisplayInformation,0		
8A44:         	BootAddress:										; +12 	Boot Address
8A44: 2F80    			dw 		StopDefault
8A46:         	BootPage:											; +14 	Boot Page
8A46: 2A00    			db 		FirstCodePage,0
8A48:         	Parameter:	 										; +16 	3rd Parameter
8A48: 00000000			dw 		0,0		
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8A4C:         	DisplayInformation:
              	
8A4C:         	SIScreenWidth: 										; +0 	screen width
8A4C: 00000000			db 		0,0,0,0	
8A50:         	SIScreenHeight:										; +4 	screen height
8A50: 00000000			db 		0,0,0,0
8A54:         	SIScreenSize:										; +8 	char size of screen
8A54: 00000000			dw 		0,0		
8A58:         	SIScreenMode:										; +12 	current mode
8A58: 00000000			db 		0,0,0,0
8A5C:         	SIFontBase:											; font in use
8A5C: 0782    			dw 		AlternateFont
8A5E:         	SIScreenDriver:										; Screen Driver
8A5E: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8A60:         	__PAGEStackPointer: 								; stack used for switching pages
8A60: 0000    			dw 		0
8A62:         	__PAGEStackBase:
8A62: FFFFFFFF			ds 		16
8A66: FF...   	
              	
              	
              	
8A72:         	FreeMemory:											; free memory in $8000-$BFFF page.
              	
8A72: FFFFFFFF			org 	$C000
8A76: FF...   	
              			include "temp/__dictionary.asm" 			; dictionary.
C000: 06      		db 1+5
C001: 20      		db $20
C002: 8588    		dw define_21
C004: 01      		db 1
C005: 21      		db "!"
              	
C006: 06      		db 1+5
C007: 20      		db $20
C008: 3887    		dw define_2a
C00A: 01      		db 1
C00B: 2A      		db "*"
              	
C00C: 06      		db 1+5
C00D: 20      		db $20
C00E: 4887    		dw define_2b
C010: 01      		db 1
C011: 2B      		db "+"
              	
C012: 07      		db 2+5
C013: 20      		db $20
C014: 9988    		dw define_2b_21
C016: 02      		db 2
C017: 2B21    		db "+!"
              	
C019: 07      		db 2+5
C01A: 20      		db $20
C01B: 9B89    		dw define_2b_2b
C01D: 02      		db 2
C01E: 2B2B    		db "++"
              	
C020: 08      		db 3+5
C021: 20      		db $20
C022: A289    		dw define_2b_2b_2b
C024: 03      		db 3
C025: 2B2B2B  		db "+++"
              	
C028: 06      		db 1+5
C029: 20      		db $20
C02A: C988    		dw define_2c
C02C: 01      		db 1
C02D: 2C      		db ","
              	
C02E: 06      		db 1+5
C02F: 20      		db $20
C030: 2E87    		dw define_2d
C032: 01      		db 1
C033: 2D      		db "-"
              	
C034: 07      		db 2+5
C035: 20      		db $20
C036: 8C89    		dw define_2d_2d
C038: 02      		db 2
C039: 2D2D    		db "--"
              	
C03B: 08      		db 3+5
C03C: 20      		db $20
C03D: 9389    		dw define_2d_2d_2d
C03F: 03      		db 3
C040: 2D2D2D  		db "---"
              	
C043: 06      		db 1+5
C044: 20      		db $20
C045: 3E87    		dw define_2f
C047: 01      		db 1
C048: 2F      		db "/"
              	
C049: 07      		db 2+5
C04A: 20      		db $20
C04B: AA89    		dw define_30_2d
C04D: 02      		db 2
C04E: 302D    		db "0-"
              	
C050: 07      		db 2+5
C051: 20      		db $20
C052: B589    		dw define_30_3c
C054: 02      		db 2
C055: 303C    		db "0<"
              	
C057: 07      		db 2+5
C058: 20      		db $20
C059: C089    		dw define_30_3d
C05B: 02      		db 2
C05C: 303D    		db "0="
              	
C05E: 08      		db 3+5
C05F: 20      		db $20
C060: E389    		dw define_31_36_2a
C062: 03      		db 3
C063: 31362A  		db "16*"
              	
C066: 07      		db 2+5
C067: 20      		db $20
C068: CB89    		dw define_32_2a
C06A: 02      		db 2
C06B: 322A    		db "2*"
              	
C06D: 07      		db 2+5
C06E: 20      		db $20
C06F: ED89    		dw define_32_2f
C071: 02      		db 2
C072: 322F    		db "2/"
              	
C074: 07      		db 2+5
C075: 20      		db $20
C076: D289    		dw define_34_2a
C078: 02      		db 2
C079: 342A    		db "4*"
              	
C07B: 07      		db 2+5
C07C: 20      		db $20
C07D: F789    		dw define_34_2f
C07F: 02      		db 2
C080: 342F    		db "4/"
              	
C082: 07      		db 2+5
C083: 20      		db $20
C084: DA89    		dw define_38_2a
C086: 02      		db 2
C087: 382A    		db "8*"
              	
C089: 06      		db 1+5
C08A: 20      		db $20
C08B: D088    		dw define_3b
C08D: 01      		db 1
C08E: 3B      		db ";"
              	
C08F: 06      		db 1+5
C090: 20      		db $20
C091: 0787    		dw define_3c
C093: 01      		db 1
C094: 3C      		db "<"
              	
C095: 06      		db 1+5
C096: 20      		db $20
C097: 1F87    		dw define_3d
C099: 01      		db 1
C09A: 3D      		db "="
              	
C09B: 06      		db 1+5
C09C: 20      		db $20
C09D: 8F88    		dw define_40
C09F: 01      		db 1
C0A0: 40      		db "@"
              	
C0A1: 08      		db 3+5
C0A2: 20      		db $20
C0A3: 3989    		dw define_61_3e_62
C0A5: 03      		db 3
C0A6: 613E62  		db "a>b"
              	
C0A9: 08      		db 3+5
C0AA: 20      		db $20
C0AB: 5A89    		dw define_61_3e_72
C0AD: 03      		db 3
C0AE: 613E72  		db "a>r"
              	
C0B1: 09      		db 4+5
C0B2: 20      		db $20
C0B3: 7A89    		dw define_61_62_3e_72
C0B5: 04      		db 4
C0B6: 61623E72		db "ab>r"
              	
C0BA: 08      		db 3+5
C0BB: 20      		db $20
C0BC: 058A    		dw define_61_62_73
C0BE: 03      		db 3
C0BF: 616273  		db "abs"
              	
C0C2: 08      		db 3+5
C0C3: 20      		db $20
C0C4: 4F87    		dw define_61_6e_64
C0C6: 03      		db 3
C0C7: 616E64  		db "and"
              	
C0CA: 08      		db 3+5
C0CB: 20      		db $20
C0CC: 4189    		dw define_62_3e_61
C0CE: 03      		db 3
C0CF: 623E61  		db "b>a"
              	
C0D2: 08      		db 3+5
C0D3: 20      		db $20
C0D4: 6A89    		dw define_62_3e_72
C0D6: 03      		db 3
C0D7: 623E72  		db "b>r"
              	
C0DA: 0A      		db 5+5
C0DB: 20      		db $20
C0DC: 2989    		dw define_62_72_65_61_6b
C0DE: 05      		db 5
C0DF: 62726561		db "break"
C0E3: 6B      	
              	
C0E4: 0A      		db 5+5
C0E5: 20      		db $20
C0E6: 0E8A    		dw define_62_73_77_61_70
C0E8: 05      		db 5
C0E9: 62737761		db "bswap"
C0ED: 70      	
              	
C0EE: 07      		db 2+5
C0EF: 20      		db $20
C0F0: A588    		dw define_63_21
C0F2: 02      		db 2
C0F3: 6321    		db "c!"
              	
C0F5: 07      		db 2+5
C0F6: 20      		db $20
C0F7: D888    		dw define_63_2c
C0F9: 02      		db 2
C0FA: 632C    		db "c,"
              	
C0FC: 07      		db 2+5
C0FD: 20      		db $20
C0FE: AC88    		dw define_63_40
C100: 02      		db 2
C101: 6340    		db "c@"
              	
C103: 12      		db 13+5
C104: 20      		db $20
C105: 7C87    		dw define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21
C107: 0D      		db 13
C108: 636F6E2E		db "con.raw.char!"
C10C: 7261772E	
C110: 63686172	
C114: 21      	
              	
C115: 11      		db 12+5
C116: 20      		db $20
C117: 8287    		dw define_63_6f_6e_2e_72_61_77_2e_68_65_78_21
C119: 0C      		db 12
C11A: 636F6E2E		db "con.raw.hex!"
C11E: 7261772E	
C122: 68657821	
              	
C126: 12      		db 13+5
C127: 20      		db $20
C128: 8887    		dw define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79
C12A: 0D      		db 13
C12B: 636F6E2E		db "con.raw.inkey"
C12F: 7261772E	
C133: 696E6B65	
C137: 79      	
              	
C138: 14      		db 15+5
C139: 20      		db $20
C13A: 7687    		dw define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65
C13C: 0F      		db 15
C13D: 636F6E2E		db "con.raw.setmode"
C141: 7261772E	
C145: 7365746D	
C149: 6F6465  	
              	
C14C: 09      		db 4+5
C14D: 20      		db $20
C14E: E688    		dw define_63_6f_70_79
C150: 04      		db 4
C151: 636F7079		db "copy"
              	
C155: 10      		db 11+5
C156: 20      		db $20
C157: 4588    		dw define_64_69_63_74_2e_63_72_75_6e_63_68
C159: 0B      		db 11
C15A: 64696374		db "dict.crunch"
C15E: 2E637275	
C162: 6E6368  	
              	
C165: 09      		db 4+5
C166: 20      		db $20
C167: 0A89    		dw define_66_69_6c_6c
C169: 04      		db 4
C16A: 66696C6C		db "fill"
              	
C16E: 09      		db 4+5
C16F: 20      		db $20
C170: 2189    		dw define_68_61_6c_74
C172: 04      		db 4
C173: 68616C74		db "halt"
              	
C177: 08      		db 3+5
C178: 20      		db $20
C179: 5987    		dw define_6d_6f_64
C17B: 03      		db 3
C17C: 6D6F64  		db "mod"
              	
C17F: 08      		db 3+5
C180: 20      		db $20
C181: 178A    		dw define_6e_6f_74
C183: 03      		db 3
C184: 6E6F74  		db "not"
              	
C187: 07      		db 2+5
C188: 20      		db $20
C189: 6287    		dw define_6f_72
C18B: 02      		db 2
C18C: 6F72    		db "or"
              	
C18E: 07      		db 2+5
C18F: 20      		db $20
C190: BF88    		dw define_70_21
C192: 02      		db 2
C193: 7021    		db "p!"
              	
C195: 07      		db 2+5
C196: 20      		db $20
C197: B588    		dw define_70_40
C199: 02      		db 2
C19A: 7040    		db "p@"
              	
C19C: 0B      		db 6+5
C19D: 20      		db $20
C19E: E088    		dw define_70_61_72_61_6d_21
C1A0: 06      		db 6
C1A1: 70617261		db "param!"
C1A5: 6D21    	
              	
C1A7: 08      		db 3+5
C1A8: 20      		db $20
C1A9: 5189    		dw define_70_6f_70
C1AB: 03      		db 3
C1AC: 706F70  		db "pop"
              	
C1AF: 09      		db 4+5
C1B0: 20      		db $20
C1B1: 4989    		dw define_70_75_73_68
C1B3: 04      		db 4
C1B4: 70757368		db "push"
              	
C1B8: 08      		db 3+5
C1B9: 20      		db $20
C1BA: 6289    		dw define_72_3e_61
C1BC: 03      		db 3
C1BD: 723E61  		db "r>a"
              	
C1C0: 09      		db 4+5
C1C1: 20      		db $20
C1C2: 8389    		dw define_72_3e_61_62
C1C4: 04      		db 4
C1C5: 723E6162		db "r>ab"
              	
C1C9: 08      		db 3+5
C1CA: 20      		db $20
C1CB: 7289    		dw define_72_3e_62
C1CD: 03      		db 3
C1CE: 723E62  		db "r>b"
              	
C1D1: 09      		db 4+5
C1D2: 20      		db $20
C1D3: 3289    		dw define_73_77_61_70
C1D5: 04      		db 4
C1D6: 73776170		db "swap"
              	
C1DA: 08      		db 3+5
C1DB: 20      		db $20
C1DC: 6C87    		dw define_78_6f_72
C1DE: 03      		db 3
C1DF: 786F72  		db "xor"
              	
C1E2: 00      		db 0
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $41E3 = 16867

; +++ global symbols +++

AlternateFont         = $8207 = 33287          font.asm:1
Boot                  = $8006 = 32774          kernel.asm:32
BootAddress           = $8A44 = 35396          data.asm:28
BootPage              = $8A46 = 35398          data.asm:30
COMPCompileSelf       = $8A21 = 35361          wordaction.asm:18
COMPMacroExpand       = $8A2C = 35372          wordaction.asm:32
DICTAddWord           = $8793 = 34707          dictionary.asm:19 (unused)
DICTCrunchDictionary  = $8848 = 34888          dictionary.asm:170 (unused)
DICTFindWord          = $87E7 = 34791          dictionary.asm:90 (unused)
DIVDivideMod16        = $864E = 34382          divide.asm:18
DictionaryPage        = $0020 =    32          kernel.asm:16
DisplayInfo           = $8A40 = 35392          data.asm:26 (unused)
DisplayInformation    = $8A4C = 35404          data.asm:41
Div16_Loop1           = $8658 = 34392          divide.asm:27
Div16_Loop2           = $8669 = 34409          divide.asm:41
Div16_NoAdd1          = $8660 = 34400          divide.asm:33
Div16_NoAdd2          = $8671 = 34417          divide.asm:47
EditBuffer            = $7B08 = 31496          kernel.asm:24 (unused)
EditPageSize          = $0200 =   512          kernel.asm:19 (unused)
FARCompileByte        = $8679 = 34425          farmemory.asm:18
FARCompileWord        = $8691 = 34449          farmemory.asm:40
FirstCodePage         = $002A =    42          kernel.asm:20
FirstSourcePage       = $0022 =    34          kernel.asm:17 (unused)
FreeMemory            = $8A72 = 35442          kernel.asm:60
GFXInitialise48k      = $8033 = 32819          screen48k.asm:19
GFXInitialiseLayer2   = $80AB = 32939          screen_layer2.asm:19
GFXInitialiseLowRes   = $8162 = 33122          screen_lores.asm:18
GFXMode               = $8507 = 34055          graphics.asm:18
GFXPrintCharacter48k  = $805F = 32863          screen48k.asm:53
GFXPrintCharacterLayer2 = $80DB = 32987          screen_layer2.asm:55
GFXPrintCharacterLowRes = $818C = 33164          screen_lores.asm:50
GFXWriteCharacter     = $853C = 34108          graphics.asm:64
GFXWriteHexWord       = $854F = 34127          graphics.asm:87
GFXWriteHexWordA      = $8551 = 34129          graphics.asm:89 (unused)
Here                  = $8A38 = 35384          data.asm:20
HerePage              = $8A3A = 35386          data.asm:22
IOScanKeyboard        = $8581 = 34177          keyboard.asm:19
L2PClear              = $80B4 = 32948          screen_layer2.asm:26
L2PClearBank          = $80C3 = 32963          screen_layer2.asm:34
LowClearScreen        = $8175 = 33141          screen_lores.asm:30
MULTMultiply16        = $86AC = 34476          multiply.asm:18
NextFreePage          = $8A3C = 35388          data.asm:24 (unused)
PAGEInitialise        = $86C6 = 34502          paging.asm:18
PAGERestore           = $86F1 = 34545          paging.asm:64
PAGESwitch            = $86D8 = 34520          paging.asm:36
Parameter             = $8A48 = 35400          data.asm:32
SIFontBase            = $8A5C = 35420          data.asm:51
SIScreenDriver        = $8A5E = 35422          data.asm:53
SIScreenHeight        = $8A50 = 35408          data.asm:45
SIScreenMode          = $8A58 = 35416          data.asm:49
SIScreenSize          = $8A54 = 35412          data.asm:47
SIScreenWidth         = $8A4C = 35404          data.asm:43
SourcePageCount       = $0004 =     4          kernel.asm:18
StackTop              = $7EFC = 32508          kernel.asm:25
StopDefault           = $802F = 32815          kernel.asm:52
SystemInformation     = $8A38 = 35384          data.asm:18
__COMPMExLoop         = $8A2F = 35375          wordaction.asm:36
__Core__Mult_Loop     = $86B3 = 34483          multiply.asm:24
__Core__Mult_Shift    = $86B8 = 34488          multiply.asm:28
__DICTAddCopy         = $87D0 = 34768          dictionary.asm:63
__DICTCheckName       = $880D = 34829          dictionary.asm:118
__DICTCreateEntry     = $87B6 = 34742          dictionary.asm:48
__DICTCrunchAdvance   = $8876 = 34934          dictionary.asm:201
__DICTCrunchExit      = $887F = 34943          dictionary.asm:207
__DICTCrunchNext      = $8856 = 34902          dictionary.asm:179
__DICTFindEndDictionary = $87A9 = 34729          dictionary.asm:39
__DICTFindExit        = $883C = 34876          dictionary.asm:149
__DICTFindFail        = $8835 = 34869          dictionary.asm:145
__DICTFindMainLoop    = $87F5 = 34805          dictionary.asm:101
__DICTFindNext        = $882C = 34860          dictionary.asm:139
__DICTFindNoMatch     = $8829 = 34857          dictionary.asm:136
__GFXConfigure        = $8521 = 34081          graphics.asm:39
__GFXLayer2           = $8519 = 34073          graphics.asm:32
__GFXLowRes           = $851E = 34078          graphics.asm:36
__GFXWCExit           = $854A = 34122          graphics.asm:74
__GFXWHByte           = $8563 = 34147          graphics.asm:105
__GFXWHDigit          = $8579 = 34169          graphics.asm:119
__GFXWHNibble         = $8570 = 34160          graphics.asm:113
__L2Exit              = $815B = 33115          screen_layer2.asm:156
__L2Loop              = $814C = 33100          screen_layer2.asm:143
__L2Not1              = $80F7 = 33015          screen_layer2.asm:77
__L2Not2              = $80FD = 33021          screen_layer2.asm:81
__L2Not3              = $8103 = 33027          screen_layer2.asm:85
__L2NotCursor         = $810E = 33038          screen_layer2.asm:94
__L2NotSet            = $8152 = 33106          screen_layer2.asm:148
__L2Outer             = $8143 = 33091          screen_layer2.asm:137
__LPExit              = $8200 = 33280          screen_lores.asm:143
__LowLoop             = $81EC = 33260          screen_lores.asm:127
__LowNotLower2        = $81E1 = 33249          screen_lores.asm:119
__LowNotReverse       = $81AE = 33198          screen_lores.asm:79
__LowNotSet           = $81F2 = 33266          screen_lores.asm:132
__LowOuter            = $81E3 = 33251          screen_lores.asm:121
__PAGEStackBase       = $8A62 = 35426          data.asm:64
__PAGEStackPointer    = $8A60 = 35424          data.asm:62
__ZXWCCopy            = $809F = 32927          screen48k.asm:115
__ZXWCExit            = $80A6 = 32934          screen48k.asm:122
___kr4                = $85B2 = 34226          keyboard.asm:50
__copy_exit           = $8906 = 35078          miscellany.asm:92
__copy_gt_count       = $8903 = 35075          miscellany.asm:89
__cs1                 = $8043 = 32835          screen48k.asm:29
__cs2                 = $804B = 32843          screen48k.asm:34
__fill_loop           = $8916 = 35094          miscellany.asm:113
__halt_loop           = $8925 = 35109          miscellany.asm:134
__kr1                 = $8596 = 34198          keyboard.asm:33
__kr2                 = $85A1 = 34209          keyboard.asm:39
__kr3                 = $85A3 = 34211          keyboard.asm:42
__kr_exit             = $85D2 = 34258          keyboard.asm:80
__kr_keypressed       = $85CC = 34252          keyboard.asm:74
__kr_no_shift_table   = $85D6 = 34262          keyboard.asm:95
__kr_shift_table      = $85FE = 34302          keyboard.asm:101
__kr_symbol_shift_table = $8626 = 34342          keyboard.asm:107
__less_returnc        = $8718 = 34584          binary.asm:32
__less_samesign       = $8713 = 34579          binary.asm:27
__negate              = $89AD = 35245          unary.asm:76
_end                  = $C1E3 = 49635          kernel.asm:26 (unused)
_size                 = $41E3 = 16867          kernel.asm:26 (unused)
define_21             = $8885 = 34949          memory.asm:16
define_2a             = $8738 = 34616          binary.asm:79
define_2b             = $8748 = 34632          binary.asm:103
define_2b_21          = $8899 = 34969          memory.asm:50
define_2b_2b          = $899B = 35227          unary.asm:45
define_2b_2b_2b       = $89A2 = 35234          unary.asm:59
define_2c             = $88C9 = 35017          miscellany.asm:16
define_2d             = $872E = 34606          binary.asm:64
define_2d_2d          = $898C = 35212          unary.asm:16
define_2d_2d_2d       = $8993 = 35219          unary.asm:30
define_2f             = $873E = 34622          binary.asm:89
define_30_2d          = $89AA = 35242          unary.asm:74
define_30_3c          = $89B5 = 35253          unary.asm:92
define_30_3d          = $89C0 = 35264          unary.asm:106
define_31_36_2a       = $89E3 = 35299          unary.asm:160
define_32_2a          = $89CB = 35275          unary.asm:121
define_32_2f          = $89ED = 35309          unary.asm:177
define_34_2a          = $89D2 = 35282          unary.asm:133
define_34_2f          = $89F7 = 35319          unary.asm:190
define_38_2a          = $89DA = 35290          unary.asm:146
define_3b             = $88D0 = 35024          miscellany.asm:27
define_3c             = $8707 = 34567          binary.asm:18
define_3d             = $871F = 34591          binary.asm:45
define_40             = $888F = 34959          memory.asm:33
define_61_3e_62       = $8939 = 35129          register.asm:30
define_61_3e_72       = $895A = 35162          stack.asm:45
define_61_62_3e_72    = $897A = 35194          stack.asm:101
define_61_62_73       = $8A05 = 35333          unary.asm:207
define_61_6e_64       = $874F = 34639          binary.asm:117
define_62_3e_61       = $8941 = 35137          register.asm:44
define_62_3e_72       = $896A = 35178          stack.asm:73
define_62_72_65_61_6b = $8929 = 35113          miscellany.asm:145
define_62_73_77_61_70 = $8A0E = 35342          unary.asm:219
define_63_21          = $88A5 = 34981          memory.asm:68
define_63_2c          = $88D8 = 35032          miscellany.asm:42
define_63_40          = $88AC = 34988          memory.asm:82
define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21 = $877C = 34684          console.asm:24
define_63_6f_6e_2e_72_61_77_2e_68_65_78_21 = $8782 = 34690          console.asm:32
define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79 = $8788 = 34696          console.asm:40
define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65 = $8776 = 34678          console.asm:16
define_63_6f_70_79    = $88E6 = 35046          miscellany.asm:64
define_64_69_63_74_2e_63_72_75_6e_63_68 = $8845 = 34885          dictionary.asm:167
define_66_69_6c_6c    = $890A = 35082          miscellany.asm:104
define_68_61_6c_74    = $8921 = 35105          miscellany.asm:131
define_6d_6f_64       = $8759 = 34649          binary.asm:133
define_6e_6f_74       = $8A17 = 35351          unary.asm:235
define_6f_72          = $8762 = 34658          binary.asm:146
define_70_21          = $88BF = 35007          memory.asm:111
define_70_40          = $88B5 = 34997          memory.asm:97
define_70_61_72_61_6d_21 = $88E0 = 35040          miscellany.asm:54
define_70_6f_70       = $8951 = 35153          stack.asm:29
define_70_75_73_68    = $8949 = 35145          stack.asm:16
define_72_3e_61       = $8962 = 35170          stack.asm:58
define_72_3e_61_62    = $8983 = 35203          stack.asm:115
define_72_3e_62       = $8972 = 35186          stack.asm:86
define_73_77_61_70    = $8932 = 35122          register.asm:16
define_78_6f_72       = $876C = 34668          binary.asm:162
end_21                = $888E = 34958          memory.asm:24
end_2b                = $874E = 34638          binary.asm:108
end_2b_2b             = $89A1 = 35233          unary.asm:50
end_2b_2b_2b          = $89A9 = 35241          unary.asm:65
end_2d_2d             = $8992 = 35218          unary.asm:21
end_2d_2d_2d          = $899A = 35226          unary.asm:36
end_31_36_2a          = $89EC = 35308          unary.asm:168
end_32_2a             = $89D1 = 35281          unary.asm:126
end_32_2f             = $89F6 = 35318          unary.asm:183
end_34_2a             = $89D9 = 35289          unary.asm:139
end_34_2f             = $8A04 = 35332          unary.asm:198
end_38_2a             = $89E2 = 35298          unary.asm:153
end_3b                = $88D7 = 35031          miscellany.asm:33
end_40                = $8898 = 34968          memory.asm:41
end_61_3e_62          = $8940 = 35136          register.asm:36
end_61_3e_72          = $8961 = 35169          stack.asm:51
end_61_62_3e_72       = $8982 = 35202          stack.asm:108
end_62_3e_61          = $8948 = 35144          register.asm:50
end_62_3e_72          = $8971 = 35185          stack.asm:79
end_62_72_65_61_6b    = $8931 = 35121          miscellany.asm:151
end_62_73_77_61_70    = $8A16 = 35350          unary.asm:226
end_63_21             = $88AB = 34987          memory.asm:73
end_63_40             = $88B4 = 34996          memory.asm:88
end_70_21             = $88C8 = 35016          memory.asm:118
end_70_6f_70          = $8959 = 35161          stack.asm:36
end_70_75_73_68       = $8950 = 35152          stack.asm:22
end_72_3e_61          = $8969 = 35177          stack.asm:64
end_72_3e_61_62       = $898B = 35211          stack.asm:122
end_72_3e_62          = $8979 = 35193          stack.asm:92
end_73_77_61_70       = $8938 = 35128          register.asm:21
start_21              = $888A = 34954          memory.asm:19
start_2b              = $874D = 34637          binary.asm:106
start_2b_2b           = $89A0 = 35232          unary.asm:48
start_2b_2b_2b        = $89A7 = 35239          unary.asm:62
start_2d_2d           = $8991 = 35217          unary.asm:19
start_2d_2d_2d        = $8998 = 35224          unary.asm:33
start_31_36_2a        = $89E8 = 35304          unary.asm:163
start_32_2a           = $89D0 = 35280          unary.asm:124
start_32_2f           = $89F2 = 35314          unary.asm:180
start_34_2a           = $89D7 = 35287          unary.asm:136
start_34_2f           = $89FC = 35324          unary.asm:193
start_38_2a           = $89DF = 35295          unary.asm:149
start_3b              = $88D6 = 35030          miscellany.asm:31
start_40              = $8894 = 34964          memory.asm:36
start_61_3e_62        = $893E = 35134          register.asm:33
start_61_3e_72        = $8960 = 35168          stack.asm:49
start_61_62_3e_72     = $8980 = 35200          stack.asm:105
start_62_3e_61        = $8946 = 35142          register.asm:47
start_62_3e_72        = $8970 = 35184          stack.asm:77
start_62_72_65_61_6b  = $892F = 35119          miscellany.asm:149
start_62_73_77_61_70  = $8A13 = 35347          unary.asm:222
start_63_21           = $88AA = 34986          memory.asm:71
start_63_40           = $88B1 = 34993          memory.asm:85
start_70_21           = $88C4 = 35012          memory.asm:114
start_70_6f_70        = $8957 = 35159          stack.asm:33
start_70_75_73_68     = $894F = 35151          stack.asm:20
start_72_3e_61        = $8968 = 35176          stack.asm:62
start_72_3e_61_62     = $8989 = 35209          stack.asm:119
start_72_3e_62        = $8978 = 35192          stack.asm:90
start_73_77_61_70     = $8937 = 35127          register.asm:19


total time: 0.0093 sec.
no errors
