              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-03-20 11:37:42
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th March 2019
              	;		Purpose :	Flat Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: C88A    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800E: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8010: CDCA86  			call 	PAGEInitialise
              	
8013: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8015: CD0B85  			call 	GFXMode
              	
8018: 3AD68A  			ld 		a,(BootPage)						; switch to boot page.
801B: CDCA86  			call 	PAGEInitialise
801E: DD2AD48A			ld 		ix,(BootAddress)					; start address
8022: 210000  			ld 		hl,0								; zero AB registers
8025: 110000  			ld 		de,0
8028: 22D88A  			ld 		(Parameter),hl 						; clear parameter
802B: DDE9    			jp 		(ix) 								; and execute.
              	
802D:         	BootDefault:
802D: 210000  			ld 		hl,$0000 							; start from page 0
8030: CD8C88  			call 	LOADLoadPages 						; load pages till we stop.
              	
8033:         	StopDefault:	
8033: C33380  			jp 		StopDefault
              	
8036: C9      			ret
              			
              			include "__includes.asm"					; the included sources picked up by processcore.py
              		include "components/console/drivers/screen48k.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8037:         	GFXInitialise48k:
8037: F5      			push 	af 									; save registers
8038: C5      			push 	bc
              	
8039: 013B12  			ld 		bc,$123B 							; Layer 2 access port
803C: 3E00    			ld 		a,0 								; disable Layer 2
803E: ED79    			out 	(c),a
8040: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8044: 210040  			ld 		hl,$4000 							; clear pixel memory
8047: 3600    	__cs1:	ld 		(hl),0
8049: 23      			inc 	hl
804A: 7C      			ld 		a,h
804B: FE58    			cp 		$58
804D: 20F8    			jr 		nz,__cs1
804F: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8051: 23      			inc 	hl
8052: 7C      			ld 		a,h
8053: FE5B    			cp 		$5B
8055: 20F8    			jr 		nz,__cs2	
8057: AF      			xor 	a 									; border off
8058: D3FE    			out 	($FE),a
805A: C1      			pop 	bc
805B: F1      			pop 	af
805C: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
805F: 116380  			ld 		de,GFXPrintCharacter48k
8062: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8063:         	GFXPrintCharacter48k:
8063: F5      			push 	af 									; save registers
8064: C5      			push 	bc
8065: D5      			push 	de
8066: E5      			push 	hl
              	
8067: 43      			ld 		b,e 								; character in B
8068: 7C      			ld 		a,h 								; check range.
8069: FE03    			cp 		3
806B: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
806D: E5      			push 	hl 									; save position.
806E: 7C      			ld 		a,h
806F: C658    			add 	$58
8071: 67      			ld 		h,a
              	
8072: 7A      			ld 		a,d 								; get current colour
8073: E607    			and 	7  									; mask 0..2
8075: F640    			or 		$40  								; make bright
8077: 77      			ld 		(hl),a 								; store it.	
8078: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8079: D5      			push 	de
807A: EB      			ex 		de,hl
807B: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
807C: 7A      			ld 		a,d
807D: E603    			and 	3
807F: 87      			add 	a,a
8080: 87      			add 	a,a
8081: 87      			add 	a,a
8082: F640    			or 		$40
8084: 67      			ld 		h,a
8085: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8086: E5      			push 	hl
8087: 78      			ld 		a,b 								; get character
8088: E67F    			and 	$7F 								; bits 0-6 only.
808A: D620    			sub 	32
808C: 6F      			ld 		l,a 								; put in HL
808D: 2600    			ld 		h,0
808F: 29      			add 	hl,hl 								; x 8
8090: 29      			add 	hl,hl
8091: 29      			add 	hl,hl
8092: ED5BEC8A			ld 		de,(SIFontBase) 					; add the font base.
8096: 19      			add 	hl,de
8097: EB      			ex 		de,hl 								; put in DE (font address)
8098: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8099: 78      			ld 		a,b
809A: 0608    			ld 		b,8 								; copy 8 characters
809C: 0E00    			ld 		c,0 								; XOR value 0
809E: CB7F    			bit 	7,a 								; is the character reversed
80A0: 2801    			jr 		z,__ZXWCCopy
80A2: 0D      			dec 	c 									; C is the XOR mask now $FF
80A3:         	__ZXWCCopy:
80A3: 1A      			ld 		a,(de)								; get font data
80A4: A9      			xor 	c 									; xor with reverse
80A5: 77      			ld 		(hl),a 								; write back
80A6: 24      			inc 	h 									; bump pointers
80A7: 13      			inc 	de
80A8: 10F9    			djnz 	__ZXWCCopy 							; do B times.
80AA:         	__ZXWCExit:
80AA: E1      			pop 	hl 									; restore and exit
80AB: D1      			pop 	de
80AC: C1      			pop 	bc
80AD: F1      			pop 	af
80AE: C9      			ret
              		include "components/console/drivers/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
80AF:         	GFXInitialiseLayer2:
80AF: F5      			push 	af
80B0: C5      			push 	bc
80B1: D5      			push 	de
80B2: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
80B6: 1E02    			ld 		e,2 								; 3 banks to erase
80B8:         	L2PClear:
80B8: 7B      			ld 		a,e 								; put bank number in bits 6/7
80B9: CB0F    			rrc 	a
80BB: CB0F    			rrc 	a
80BD: F603    			or 		2+1 								; shadow on, visible, enable write paging
80BF: 013B12  			ld 		bc,$123B 							; out to layer 2 port
80C2: ED79    			out 	(c),a
80C4: 210040  			ld 		hl,$4000 							; erase the bank to $00 
80C7:         	L2PClearBank: 										; assume default palette :)
80C7: 2B      			dec 	hl
80C8: 3600    			ld 		(hl),$00
80CA: 7C      			ld 		a,h
80CB: B5      			or 		l
80CC: 20F9    			jr		nz,L2PClearBank
80CE: 1D      			dec 	e
80CF: F2B880  			jp 		p,L2PClear
              	
80D2: AF      			xor 	a
80D3: D3FE    			out 	($FE),a
              	
80D5: D1      			pop 	de
80D6: C1      			pop 	bc
80D7: F1      			pop 	af
80D8: 212018  			ld 		hl,$1820 							; still 32 x 24 	
80DB: 11DF80  			ld 		de,GFXPrintCharacterLayer2
80DE: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
80DF:         	GFXPrintCharacterLayer2:
80DF: F5      			push 	af
80E0: C5      			push 	bc
80E1: D5      			push 	de
80E2: E5      			push 	hl
80E3: DDE5    			push 	ix
              	
80E5: 43      			ld 		b,e 								; save A temporarily
80E6: 78      			ld 		a,b
80E7: E67F    			and 	$7F
80E9: FE20    			cp 		32
80EB: 3872    			jr 		c,__L2Exit 							; check char in range
80ED: 7C      			ld 		a,h
80EE: FE03    			cp 		3
80F0: 306D    			jr 		nc,__L2Exit 						; check position in range
80F2: 78      			ld 		a,b
              	
80F3: F5      			push 	af 	
80F4: AF      			xor 	a 									; convert colour in C to palette index
80F5: CB42    			bit 	0,d 								; (assumes standard palette)
80F7: 2802    			jr 		z,__L2Not1
80F9: F603    			or 		$03
80FB:         	__L2Not1:
80FB: CB52    			bit 	2,d
80FD: 2802    			jr 		z,__L2Not2
80FF: F61C    			or 		$1C
8101:         	__L2Not2:
8101: CB4A    			bit 	1,d
8103: 2802    			jr 		z,__L2Not3
8105: F6C0    			or 		$C0
8107:         	__L2Not3:
8107: 4F      			ld 		c,a 								; C is foreground
8108: 0600    			ld 		b,0									; B is xor flipper, initially zero
810A: F1      			pop 	af 									; restore char
              	
810B: E5      			push 	hl
810C: CB7F    			bit 	7,a 								; adjust background bit on bit 7
810E: 2802    			jr 		z,__L2NotCursor
8110: 06FF    			ld 		b,$FF 								; light grey is cursor
8112:         	__L2NotCursor:
8112: E67F    			and 	$7F 								; offset from space
8114: D620    			sub 	$20
8116: 6F      			ld 		l,a 								; put into HL
8117: 2600    			ld 		h,0
8119: 29      			add 	hl,hl 								; x 8
811A: 29      			add 	hl,hl
811B: 29      			add 	hl,hl
              	
811C: E5      			push 	hl 									; transfer to IX
811D: DDE1    			pop 	ix
811F: E1      			pop 	hl
              	
8120: C5      			push 	bc 									; add the font base to it.
8121: ED4BEC8A			ld 		bc,(SIFontBase)
8125: DD09    			add 	ix,bc
8127: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8128: C5      			push 	bc
8129: 7C      			ld  	a,h 								; this is the page number.
812A: CB0F    			rrc 	a
812C: CB0F    			rrc 	a
812E: E6C0    			and 	$C0 								; in bits 6 & 7
8130: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8132: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8135: ED79    			out 	(c),a
8137: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8138: EB      			ex 		de,hl
8139: 6B      			ld 		l,e
813A: 2600    			ld 		h,0
813C: 29      			add 	hl,hl 								
813D: 29      			add 	hl,hl
813E: 29      			add 	hl,hl
813F: CB24    			sla 	h
8141: CB24    			sla 	h
8143: CB24    			sla 	h
              	
8145: 1E08    			ld 		e,8 								; do 8 rows
8147:         	__L2Outer:
8147: E5      			push 	hl 									; save start
8148: 1608    			ld 		d,8 								; do 8 columns
814A: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
814D: A8      			xor 	b 									; maybe flip it ?
814E: DD23    			inc 	ix
8150:         	__L2Loop:
8150: 3600    			ld 		(hl),0 								; background
8152: 87      			add 	a,a 								; shift pattern left
8153: 3001    			jr 		nc,__L2NotSet
8155: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8156:         	__L2NotSet:
8156: 23      			inc 	hl
8157: 15      			dec 	d 									; do a row
8158: 20F6    			jr 		nz,	__L2Loop
815A: E1      			pop 	hl 									; restore, go 256 bytes down.
815B: 24      			inc 	h
815C: 1D      			dec 	e 									; do 8 rows
815D: 20E8    			jr 		nz,__L2Outer	
815F:         	__L2Exit:
815F: DDE1    			pop 	ix
8161: E1      			pop 	hl
8162: D1      			pop 	de
8163: C1      			pop 	bc
8164: F1      			pop 	af
8165: C9      			ret
              		include "components/console/drivers/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8166:         	GFXInitialiseLowRes:
8166: F5      			push 	af
8167: C5      			push 	bc
8168: D5      			push 	de
              	
8169: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
816D: AF      			xor 	a 									; layer 2 off.
816E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8171: ED79    			out 	(c),a
              	
8173: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8176: 110060  			ld 		de,$6000
8179:         	LowClearScreen: 									; assume default palette :)
8179: AF      			xor 	a
817A: 77      			ld 		(hl),a
817B: 12      			ld 		(de),a
817C: 23      			inc 	hl
817D: 13      			inc 	de
817E: 7C      			ld 		a,h
817F: FE58    			cp 		$58
8181: 20F6    			jr		nz,LowClearScreen
8183: AF      			xor 	a
8184: D3FE    			out 	($FE),a
8186: D1      			pop 	de
8187: C1      			pop 	bc
8188: F1      			pop 	af
8189: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
818C: 119081  			ld 		de,GFXPrintCharacterLowRes
818F: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8190:         	GFXPrintCharacterLowRes:
8190: F5      			push 	af
8191: C5      			push 	bc
8192: D5      			push 	de
8193: E5      			push 	hl
8194: DDE5    			push 	ix
              	
8196: 43      			ld 		b,e 								; save character in B
8197: 7B      			ld 		a,e
8198: E67F    			and 	$7F
819A: FE20    			cp 		32
819C: 3866    			jr 		c,__LPExit
              	
819E: 29      			add 	hl,hl
819F: 29      			add 	hl,hl
81A0: 7C      			ld	 	a,h 								; check in range 192*4 = 768
81A1: FE03    			cp 		3
81A3: 305F    			jr 		nc,__LPExit
              	
81A5: 7A      			ld 		a,d 								; only lower 3 bits of colour
81A6: E607    			and 	7
81A8: 4F      			ld 		c,a 								; C is foreground
              	
81A9: E5      			push 	hl
81AA: 78      			ld 		a,b 								; get char back
81AB: 0600    			ld 		b,0 								; B = no flip colour.
81AD: CB7F    			bit 	7,a
81AF: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
81B1: 05      			dec 	b
81B2:         	__LowNotReverse:
81B2: E67F    			and 	$7F 								; offset from space
81B4: D620    			sub 	$20
81B6: 6F      			ld 		l,a 								; put into HL
81B7: 2600    			ld 		h,0
81B9: 29      			add 	hl,hl 								; x 8
81BA: 29      			add 	hl,hl
81BB: 29      			add 	hl,hl
              	
81BC: E5      			push 	hl 									; transfer to IX
81BD: DDE1    			pop 	ix
              	
81BF: C5      			push 	bc 									; add the font base to it.
81C0: ED4BEC8A			ld 		bc,(SIFontBase)
81C4: DD09    			add 	ix,bc
81C6: C1      			pop 	bc
81C7: E1      			pop 	hl
81C8: EB      			ex 		de,hl
81C9: 7B      			ld 		a,e 								; put DE => HL
81CA: E6C0    			and 	192 								; these are part of Y
81CC: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
81CD: 62      			ld 		h,d		
81CE: 29      			add 	hl,hl
81CF: 29      			add 	hl,hl
81D0: 29      			add 	hl,hl
81D1: 29      			add 	hl,hl
81D2: CBF4    			set 	6,h 								; put into $4000 range
              	
81D4: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
81D6: A3      			and 	e 									; and with E, gives X position
81D7: 87      			add 	a,a 								; now multiplied by 8.
81D8: 5F      			ld 		e,a 								; DE is x offset.
81D9: 1600    			ld 		d,0  
              	
81DB: 19      			add 	hl,de
81DC: 7C      			ld 		a,h
81DD: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
81DF: 3804    			jr 		c,__LowNotLower2
81E1: 110008  			ld 		de,$0800
81E4: 19      			add 	hl,de
81E5:         	__LowNotLower2:
81E5: 1E08    			ld 		e,8 								; do 8 rows
81E7:         	__LowOuter:
81E7: E5      			push 	hl 									; save start
81E8: 1608    			ld 		d,8 								; do 8 columns
81EA: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
81ED: A8      			xor 	b
81EE: DD23    			inc 	ix
81F0:         	__LowLoop:
81F0: 3600    			ld 		(hl),0 								; background
81F2: 87      			add 	a,a 								; shift pattern left
81F3: 3001    			jr 		nc,__LowNotSet
81F5: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
81F6:         	__LowNotSet:
81F6: 2C      			inc 	l
81F7: 15      			dec 	d 									; do a row
81F8: 20F6    			jr 		nz,	__LowLoop
81FA: E1      			pop 	hl 									; restore, go 256 bytes down.
81FB: D5      			push 	de
81FC: 118000  			ld 		de,128
81FF: 19      			add 	hl,de
8200: D1      			pop 	de
8201: 1D      			dec 	e 									; do 8 rows
8202: 20E3    			jr 		nz,__LowOuter	
8204:         	__LPExit:
8204: DDE1    			pop 	ix
8206: E1      			pop 	hl
8207: D1      			pop 	de
8208: C1      			pop 	bc
8209: F1      			pop 	af
820A: C9      			ret
              	
              		include "components/console/font.asm"
820B:         	AlternateFont:
820B: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
820F: 00000000	
8213: 0C1E1E0C	
8217: 0C000C00	
821B: 36360000	
821F: 00000000	
8223: 36367F36	
8227: 7F363600	
822B: 183E603C	
822F: 067C1800	
8233: 0063660C	
8237: 18336300	
823B: 1C361C3B	
823F: 6E663B00	
8243: 30306000	
8247: 00000000	
824B: 0C183030	
824F: 30180C00	
8253: 30180C0C	
8257: 0C183000	
825B: 00331E7F	
825F: 1E330000	
8263: 0018187E	
8267: 18180000	
826B: 00000000	
826F: 00181830	
8273: 0000007E	
8277: 00000000	
827B: 00000000	
827F: 00181800	
8283: 03060C18	
8287: 30604000	
828B: 3E63676F	
828F: 7B733E00	
8293: 18381818	
8297: 18187E00	
829B: 3C66061C	
829F: 30667E00	
82A3: 3C66061C	
82A7: 06663C00	
82AB: 0E1E3666	
82AF: 7F060F00	
82B3: 7E607C06	
82B7: 06663C00	
82BB: 1C30607C	
82BF: 66663C00	
82C3: 7E66060C	
82C7: 18181800	
82CB: 3C66663C	
82CF: 66663C00	
82D3: 3C66663E	
82D7: 060C3800	
82DB: 00181800	
82DF: 00181800	
82E3: 00181800	
82E7: 00181830	
82EB: 0C183060	
82EF: 30180C00	
82F3: 00007E00	
82F7: 007E0000	
82FB: 30180C06	
82FF: 0C183000	
8303: 3C66060C	
8307: 18001800	
830B: 3E636F6F	
830F: 6F603C00	
8313: 183C6666	
8317: 7E666600	
831B: 7E33333E	
831F: 33337E00	
8323: 1E336060	
8327: 60331E00	
832B: 7C363333	
832F: 33367C00	
8333: 7F31343C	
8337: 34317F00	
833B: 7F31343C	
833F: 34307800	
8343: 1E336060	
8347: 67331F00	
834B: 6666667E	
834F: 66666600	
8353: 3C181818	
8357: 18183C00	
835B: 0F060606	
835F: 66663C00	
8363: 7333363C	
8367: 36337300	
836B: 78303030	
836F: 31337F00	
8373: 63777F7F	
8377: 6B636300	
837B: 63737B6F	
837F: 67636300	
8383: 1C366363	
8387: 63361C00	
838B: 7E33333E	
838F: 30307800	
8393: 3C666666	
8397: 6E3C0E00	
839B: 7E33333E	
839F: 36337300	
83A3: 3C667038	
83A7: 0E663C00	
83AB: 7E5A1818	
83AF: 18183C00	
83B3: 66666666	
83B7: 66667E00	
83BB: 66666666	
83BF: 663C1800	
83C3: 6363636B	
83C7: 7F776300	
83CB: 6363361C	
83CF: 1C366300	
83D3: 6666663C	
83D7: 18183C00	
83DB: 7F63460C	
83DF: 19337F00	
83E3: 3C303030	
83E7: 30303C00	
83EB: 6030180C	
83EF: 06030100	
83F3: 3C0C0C0C	
83F7: 0C0C3C00	
83FB: 081C3663	
83FF: 00000000	
8403: 00000000	
8407: 0000007F	
840B: 18180C00	
840F: 00000000	
8413: 00003C06	
8417: 3E663B00	
841B: 7030303E	
841F: 33336E00	
8423: 00003C66	
8427: 60663C00	
842B: 0E06063E	
842F: 66663B00	
8433: 00003C66	
8437: 7E603C00	
843B: 1C363078	
843F: 30307800	
8443: 00003B66	
8447: 663E067C	
844B: 7030363B	
844F: 33337300	
8453: 18003818	
8457: 18183C00	
845B: 06000606	
845F: 0666663C	
8463: 70303336	
8467: 3C367300	
846B: 38181818	
846F: 18183C00	
8473: 0000667F	
8477: 7F6B6300	
847B: 00007C66	
847F: 66666600	
8483: 00003C66	
8487: 66663C00	
848B: 00006E33	
848F: 333E3078	
8493: 00003B66	
8497: 663E060F	
849B: 00006E3B	
849F: 33307800	
84A3: 00003E60	
84A7: 3C067C00	
84AB: 08183E18	
84AF: 181A0C00	
84B3: 00006666	
84B7: 66663B00	
84BB: 00006666	
84BF: 663C1800	
84C3: 0000636B	
84C7: 7F7F3600	
84CB: 00006336	
84CF: 1C366300	
84D3: 00006666	
84D7: 663E067C	
84DB: 00007E4C	
84DF: 18327E00	
84E3: 0E181870	
84E7: 18180E00	
84EB: 0C0C0C00	
84EF: 0C0C0C00	
84F3: 7018180E	
84F7: 18187000	
84FB: 3B6E0000	
84FF: 00000000	
8503: 00...   	
              	
              		include "components/console/graphics.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
850B:         	GFXMode:
850B: C5      			push 	bc
850C: D5      			push 	de
850D: E5      			push 	hl
850E: 7D      			ld 		a,l 								; save new mode.
850F: 32E88A  			ld 		(SIScreenMode),a
8512: 2D      			dec 	l 									; L = 1 mode layer2
8513: 2808    			jr 		z,__GFXLayer2
8515: 2D      			dec 	l
8516: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8518: CD3780  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
851B: 1808    			jr 		__GFXConfigure
              	
851D:         	__GFXLayer2:
851D: CDAF80  			call 	GFXInitialiseLayer2
8520: 1803    			jr 		__GFXConfigure
              	
8522:         	__GFXLowRes:
8522: CD6681  			call 	GFXInitialiseLowRes
              	
8525:         	__GFXConfigure:
8525: 7D      			ld 		a,l 								; save screen size
8526: 32DC8A  			ld 		(SIScreenWidth),a
8529: 7C      			ld 		a,h
852A: 32E08A  			ld 		(SIScreenHeight),a
852D: EB      			ex 		de,hl 								; save driver
852E: 22EE8A  			ld 		(SIScreenDriver),hl
              	
8531: 6A      			ld 		l,d 								; put sizes in HL DE
8532: 2600    			ld 		h,0
8534: 1600    			ld 		d,0
8536: CDB086  			call 	MULTMultiply16 						; multiply to get size and store.
8539: 22E48A  			ld 		(SIScreenSize),hl
              	
853C: E1      			pop 	hl
853D: D1      			pop 	de
853E: C1      			pop 	bc
853F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
8540:         	GFXWriteCharacter:
8540: F5      			push 	af
8541: C5      			push 	bc
8542: D5      			push 	de
8543: E5      			push 	hl
8544: 014E85  			ld 		bc,__GFXWCExit
8547: C5      			push 	bc
8548: ED4BEE8A			ld 		bc,(SIScreenDriver)
854C: C5      			push 	bc
854D: C9      			ret
854E:         	__GFXWCExit:
854E: E1      			pop 	hl
854F: D1      			pop 	de
8550: C1      			pop 	bc
8551: F1      			pop 	af
8552: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8553:         	GFXWriteHexWord:
8553: 3E05    			ld 		a,5
8555:         	GFXWriteHexWordA:
8555: C5      			push 	bc
8556: D5      			push 	de
8557: E5      			push 	hl
8558: 4F      			ld 		c,a
8559: 7A      			ld 		a,d
855A: D5      			push 	de
855B: CD6785  			call 	__GFXWHByte
855E: D1      			pop 	de
855F: 7B      			ld 		a,e
8560: CD6785  			call	__GFXWHByte
8563: E1      			pop 	hl
8564: D1      			pop 	de
8565: C1      			pop 	bc
8566: C9      			ret
              	
8567:         	__GFXWHByte:
8567: F5      			push 	af
8568: CB0F    			rrc 	a
856A: CB0F    			rrc		a
856C: CB0F    			rrc 	a
856E: CB0F    			rrc 	a
8570: CD7485  			call 	__GFXWHNibble
8573: F1      			pop 	af
8574:         	__GFXWHNibble:
8574: 51      			ld 		d,c
8575: E60F    			and 	15
8577: FE0A    			cp 		10
8579: 3802    			jr 		c,__GFXWHDigit
857B: C607    			add		a,7
857D:         	__GFXWHDigit:
857D: C630    			add 	a,48
857F: 5F      			ld 		e,a
8580: CD4085  			call 	GFXWriteCharacter
8583: 23      			inc 	hl
8584: C9      			ret
              		include "components/console/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8585:         	IOScanKeyboard:
8585: C5      			push 	bc
8586: D5      			push 	de
8587: E5      			push 	hl
              	
8588: 21DA85  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
858B: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
858D: 06FE    			ld 		b,$FE
858F: ED78    			in 		a,(c)
8591: CB47    			bit 	0,a
8593: 2005    			jr 		nz,__kr1
8595: 210286  			ld 		hl,__kr_shift_table
8598: 180B    			jr 		__kr2
859A:         	__kr1:
859A: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
859C: ED78    			in 		a,(c)
859E: CB4F    			bit 	1,a
85A0: 2003    			jr 		nz,__kr2
85A2: 212A86  			ld 		hl,__kr_symbol_shift_table
85A5:         	__kr2:
              	
85A5: 1EFE    			ld 		e,$FE 								; scan pattern.
85A7: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
85A8: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
85AA: FEFE    			cp 		$FE
85AC: 2808    			jr 		z,___kr4
85AE: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
85B0: FE7F    			cp 		$7F
85B2: 2802    			jr 		z,___kr4
85B4: 161F    			ld 		d,$01F 								; check all bits.
85B6:         	___kr4:
85B6: 43      			ld 		b,e 								; scan the keyboard
85B7: 0EFE    			ld 		c,$FE
85B9: ED78    			in 		a,(c)
85BB: 2F      			cpl 										; make that active high.
85BC: A2      			and 	d  									; and with check value.
85BD: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
85BF: 23      			inc 	hl 									; next set of keyboard characters
85C0: 23      			inc 	hl
85C1: 23      			inc 	hl
85C2: 23      			inc 	hl
85C3: 23      			inc 	hl
              	
85C4: 7B      			ld 		a,e 								; get pattern
85C5: 87      			add 	a,a 								; shift left
85C6: F601    			or 		1 									; set bit 1.
85C8: 5F      			ld 		e,a
              	
85C9: FEFF    			cp 		$FF 								; finished when all 1's.
85CB: 20DA    			jr 		nz,__kr3 
85CD: AF      			xor 	a
85CE: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
85D0:         	__kr_keypressed:
85D0: 23      			inc 	hl  								; shift right until carry set
85D1: 1F      			rra
85D2: 30FC    			jr 		nc,__kr_keypressed
85D4: 2B      			dec 	hl 									; undo the last inc hl
85D5: 7E      			ld 		a,(hl) 								; get the character number.
85D6:         	__kr_exit:
85D6: E1      			pop 	hl
85D7: D1      			pop 	de
85D8: C1      			pop 	bc
85D9: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
85DA:         	__kr_no_shift_table:
85DA: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
85DE: 76617364	
85E2: 6667    	
85E4: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
85E8: 74313233	
85EC: 3435    	
85EE: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
85F2: 36706F69	
85F6: 7579    	
85F8: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
85FC: 6820006D	
8600: 6E62    	
              	
8602:         	__kr_shift_table:
8602: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8606: 2F7E7C5C	
860A: 7B7D    	
860C: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
8610: 3E214023	
8614: 2425    	
8616: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
861A: 26223B00	
861E: 5D5B    	
8620: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8624: 5E20002E	
8628: 2C2A    	
              	
862A:         	__kr_symbol_shift_table:
862A: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
862E: 2F7E7C5C	
8632: 7B7D    	
8634: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8638: 3E101112	
863C: 1314    	
863E: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8642: 15223B00	
8646: 5D5B    	
8648: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
864C: 5E20002E	
8650: 2C2A    	
              		include "components/core/divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
8652:         	DIVDivideMod16:
              	
8652: C5      		push 	bc
8653: 42      		ld 		b,d 				; DE 
8654: 4B      		ld 		c,e
8655: EB      		ex 		de,hl
8656: 210000  		ld 		hl,0
8659: 78      		ld 		a,b
865A: 0608    		ld 		b,8
865C:         	Div16_Loop1:
865C: 17      		rla
865D: ED6A    		adc 	hl,hl
865F: ED52    		sbc 	hl,de
8661: 3001    		jr 		nc,Div16_NoAdd1
8663: 19      		add 	hl,de
8664:         	Div16_NoAdd1:
8664: 10F6    		djnz 	Div16_Loop1
8666: 17      		rla
8667: 2F      		cpl
8668: 47      		ld 		b,a
8669: 79      		ld 		a,c
866A: 48      		ld 		c,b
866B: 0608    		ld 		b,8
866D:         	Div16_Loop2:
866D: 17      		rla
866E: ED6A    		adc 	hl,hl
8670: ED52    		sbc 	hl,de
8672: 3001    		jr 		nc,Div16_NoAdd2
8674: 19      		add 	hl,de
8675:         	Div16_NoAdd2:
8675: 10F6    		djnz 	Div16_Loop2
8677: 17      		rla
8678: 2F      		cpl
8679: 51      		ld 		d,c
867A: 5F      		ld 		e,a
867B: C1      		pop 	bc
867C: C9      		ret
              			
              			
              		include "components/core/farmemory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th March 2019
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
867D:         	FARCompileByte:
867D: F5      			push 	af 									; save byte and HL
867E: E5      			push 	hl
867F: F5      			push 	af 									; save byte
8680: 3ACA8A  			ld		a,(HerePage) 						; switch to page
8683: CDDC86  			call 	PAGESwitch
8686: 2AC88A  			ld 		hl,(Here) 							; write to memory location
8689: F1      			pop 	af
868A: 77      			ld 		(hl),a
868B: 23      			inc 	hl 									; bump memory location
868C: 22C88A  			ld 		(Here),hl 							; write back
868F: CDF586  			call 	PAGERestore
8692: E1      			pop 	hl 									; restore and exit
8693: F1      			pop 	af
8694: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8695:         	FARCompileWord:
8695: F5      			push 	af 									; save byte and HL
8696: D5      			push 	de
8697: E5      			push 	hl
8698: EB      			ex 		de,hl 								; word into DE
8699: 3ACA8A  			ld		a,(HerePage) 						; switch to page
869C: CDDC86  			call 	PAGESwitch
869F: 2AC88A  			ld 		hl,(Here) 							; write to memory location
86A2: 73      			ld 		(hl),e
86A3: 23      			inc 	hl 	
86A4: 72      			ld 		(hl),d
86A5: 23      			inc 	hl
86A6: 22C88A  			ld 		(Here),hl 							; write back
86A9: CDF586  			call 	PAGERestore
86AC: E1      			pop 	hl
86AD: D1      			pop 	de 									; restore and exit
86AE: F1      			pop 	af
86AF: C9      			ret
              		include "components/core/multiply.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
86B0:         	MULTMultiply16:
86B0: C5      			push 	bc
86B1: D5      			push 	de
86B2: 44      			ld 		b,h 							; get multipliers in DE/BC
86B3: 4D      			ld 		c,l
86B4: 210000  			ld 		hl,0 							; zero total
86B7:         	__Core__Mult_Loop:
86B7: CB41    			bit 	0,c 							; lsb of shifter is non-zero
86B9: 2801    			jr 		z,__Core__Mult_Shift
86BB: 19      			add 	hl,de 							; add adder to total
86BC:         	__Core__Mult_Shift:
86BC: CB38    			srl 	b 								; shift BC right.
86BE: CB19    			rr 		c
86C0: EB      			ex 		de,hl 							; shift DE left
86C1: 29      			add 	hl,hl
86C2: EB      			ex 		de,hl
86C3: 78      			ld 		a,b 							; loop back if BC is nonzero
86C4: B1      			or 		c
86C5: 20F0    			jr 		nz,__Core__Mult_Loop
86C7: D1      			pop 	de
86C8: C1      			pop 	bc
86C9: C9      			ret
              	
              		include "components/core/paging.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th March 2019
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
86CA:         	PAGEInitialise:
86CA: E5      			push 	hl
86CB: ED9256  			db 		$ED,$92,$56							; switch to page A
86CE: 3C      			inc 	a
86CF: ED9257  			db 		$ED,$92,$57
86D2: 3D      			dec 	a
86D3: 08      			ex 		af,af' 								; put page in A'
86D4: 21F28A  			ld 		hl,__PAGEStackBase 					; reset the page stack
86D7: 22F08A  			ld 		(__PAGEStackPointer),hl
86DA: E1      			pop 	hl
86DB: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
86DC:         	PAGESwitch:
86DC: F5      			push 	af
86DD: E5      			push 	hl
              	
86DE: F5      			push 	af 									; save A on stack
86DF: 2AF08A  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
86E2: 08      			ex 		af,af'
86E3: 77      			ld 		(hl),a
86E4: 23      			inc 	hl
86E5: 22F08A  			ld 		(__PAGEStackPointer),hl
              	
86E8: F1      			pop 	af 									; restore new A
86E9: ED9256  			db 		$ED,$92,$56							; switch to page A
86EC: 3C      			inc 	a
86ED: ED9257  			db 		$ED,$92,$57
86F0: 3D      			dec 	a
86F1: 08      			ex 		af,af' 								; put page in A'
              	
86F2: E1      			pop 	hl
86F3: F1      			pop 	af
86F4: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
86F5:         	PAGERestore:
86F5: F5      			push 	af
86F6: E5      			push 	hl
86F7: 2AF08A  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
86FA: 2B      			dec 	hl
86FB: 7E      			ld 		a,(hl)
86FC: 22F08A  			ld 		(__PAGEStackPointer),hl
86FF: ED9256  			db 		$ED,$92,$56							; switch to page A
8702: 3C      			inc 	a
8703: ED9257  			db 		$ED,$92,$57
8706: 3D      			dec 	a
8707: 08      			ex 		af,af' 								; update A'
8708: E1      			pop 	hl
8709: F1      			pop 	af
870A: C9      			ret
              					
              		include "temp/binary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Binary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* < word *********
              	
870B:         	define_3c:
870B: CDB18A  		call COMPCompileSelf
870E: 7C      		ld   a,h           ; check if signs different.
870F: AA      		xor  d
8710: 87      		add  a,a          ; CS if different
8711: 3004    		jr   nc,__less_samesign
8713: 7A      		ld   a,d          ; different. set CS to sign of B
8714: 87      		add  a,a          ; if set (negative) B must be < A as A is +ve
8715: 1805    		jr   __less_returnc
8717:         	__less_samesign:
8717: D5      		push  de           ; save DE
8718: EB      		ex   de,hl          ; -1 if B < A
8719: ED52    		sbc  hl,de          ; calculate B - A , hencs CS if < (Carry clear by add a,a)
871B: D1      		pop  de           ; restore DE
871C:         	__less_returnc:
871C: 3E00    		ld   a,0          ; A 0
871E: DE00    		sbc  a,0          ; A $FF if CS.
8720: 6F      		ld   l,a          ; put in HL
8721: 67      		ld   h,a
8722: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* = word *********
              	
8723:         	define_3d:
8723: CDB18A  		call COMPCompileSelf
8726: 7C      		ld   a,h          ; H = H ^ D
8727: AA      		xor  d
8728: 67      		ld   h,a
8729: 7D      		ld   a,l          ; A = (L ^ E) | (H ^ D)
872A: AB      		xor  e
872B: B4      		or   h           ; if A == 0 they are the same.
872C: 210000  		ld   hl,$0000         ; return 0 if different
872F: C0      		ret  nz
8730: 2B      		dec  hl           ; return -1
8731: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* - word *********
              	
8732:         	define_2d:
8732: CDB18A  		call COMPCompileSelf
8735: D5      		push  de           ; save DE
8736: EB      		ex   de,hl          ; HL = B, DE = A
8737: AF      		xor  a            ; clear carry
8738: ED52    		sbc  hl,de          ; calculate B-A
873A: D1      		pop  de           ; restore DE
873B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* * word *********
              	
873C:         	define_2a:
873C: CDB18A  		call COMPCompileSelf
873F: C3B086  		jp   MULTMultiply16
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* / word *********
              	
8742:         	define_2f:
8742: CDB18A  		call COMPCompileSelf
8745: D5      		push  de
8746: CD5286  		call  DIVDivideMod16
8749: EB      		ex   de,hl
874A: D1      		pop  de
874B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* + macro *********
              	
874C:         	define_2b:
874C: CDBC8A  		call COMPMacroExpand
874F: 0601    		ld b,end_2b-start_2b
8751:         	start_2b:
8751: 19      		add  hl,de
8752:         	end_2b:
8752: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* and word *********
              	
8753:         	define_61_6e_64:
8753: CDB18A  		call COMPCompileSelf
8756: 7C      		ld   a,h
8757: A2      		and  d
8758: 67      		ld   h,a
8759: 7D      		ld   a,l
875A: A3      		and  e
875B: 6F      		ld   l,a
875C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* mod word *********
              	
875D:         	define_6d_6f_64:
875D: CDB18A  		call COMPCompileSelf
8760: D5      		push  de
8761: CD5286  		call  DIVDivideMod16
8764: D1      		pop  de
8765: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* or word *********
              	
8766:         	define_6f_72:
8766: CDB18A  		call COMPCompileSelf
8769: 7C      		ld   a,h
876A: B2      		or   d
876B: 67      		ld   h,a
876C: 7D      		ld   a,l
876D: B3      		or   e
876E: 6F      		ld   l,a
876F: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* xor word *********
              	
8770:         	define_78_6f_72:
8770: CDB18A  		call COMPCompileSelf
8773: 7C      		ld   a,h
8774: AA      		xor  d
8775: 67      		ld   h,a
8776: 7D      		ld   a,l
8777: AB      		xor  e
8778: 6F      		ld   l,a
8779: C9      		ret
              	
              		include "temp/console.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;  File:  console.src
              	;  Purpose: con.raw words.
              	;  Date :   12th March 2019
              	;  Author:  paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	
              	; ********* con.raw.setmode word *********
              	
877A:         	define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65:
877A: CDB18A  		call COMPCompileSelf
877D: C30B85  		jp   GFXMode
              	
              	
              	
              	; ********* con.raw.char! word *********
              	
8780:         	define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21:
8780: CDB18A  		call COMPCompileSelf
8783: C34085  		jp   GFXWriteCharacter
              	
              	
              	
              	; ********* con.raw.hex! word *********
              	
8786:         	define_63_6f_6e_2e_72_61_77_2e_68_65_78_21:
8786: CDB18A  		call COMPCompileSelf
8789: C35385  		jp   GFXWriteHexWord
              	
              	
              	
              	; ********* con.raw.inkey word *********
              	
878C:         	define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79:
878C: CDB18A  		call COMPCompileSelf
878F: EB      		ex   de,hl
8790: CD8585  		call  IOScanKeyboard       ; read keyboard
8793: 6F      		ld   l,a
8794: 2600    		ld   h,$00
8796: C9      		ret
              		include "temp/dictionary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   dictionary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019.
              	;  Purpose : Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;  Add Dictionary Word. Name is a tagged string at BC ends in $80-$FF.
              	;  Uses the current page/pointer values.
              	;
              	; ***********************************************************************************************
              	
8797:         	DICTAddWord:
8797: F5      		push  af          ; registers to stack.
8798: C5      		push  bc
8799: D5      		push  de
879A: E5      		push hl
879B: DDE5    		push  ix
              	
879D: C5      		push  bc          ; put word address in HL
879E: E1      		pop  hl
              	
879F: 7E      		ld   a,(hl)         ; get length from tag into B
87A0: E63F    		and  $3F
87A2: 47      		ld   b,a
87A3: 23      		inc  hl          ; HL = first character of word to be added.
              	
87A4: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
87A6: CDDC86  		call  PAGESwitch
              	
87A9: DD2100C0		ld   ix,$C000       ; IX = Start of dictionary
              	
87AD:         	__DICTFindEndDictionary:
87AD: DD7E00  		ld   a,(ix+0)        ; follow down chain to the end
87B0: B7      		or   a
87B1: 2807    		jr   z,__DICTCreateEntry
87B3: 5F      		ld   e,a         ; go to next.
87B4: 1600    		ld   d,0
87B6: DD19    		add  ix,de
87B8: 18F3    		jr   __DICTFindEndDictionary
              	
87BA:         	__DICTCreateEntry:         ; IX now points to the 0 which ends the dictionary.
87BA: 78      		ld   a,b
87BB: C605    		add  a,5
87BD: DD7700  		ld   (ix+0),a        ; offset is length + 5
              	
87C0: 3ACA8A  		ld   a,(HerePage)      ; code page
87C3: DD7701  		ld   (ix+1),a
              	
87C6: ED5BC88A		ld   de,(Here)        ; code address
87CA: DD7302  		ld   (ix+2),e
87CD: DD7203  		ld   (ix+3),d
              	
87D0: DD7004  		ld   (ix+4),b        ; put length in offset 4
              	
87D3: EB      		ex   de,hl         ; put address of name in DE
87D4:         	__DICTAddCopy:
87D4: 1A      		ld   a,(de)         ; copy byte over as 7 bit ASCII.
87D5: DD7705  		ld   (ix+5),a
87D8: DD23    		inc  ix
87DA: 13      		inc  de
87DB: 10F7    		djnz __DICTAddCopy       ; until string is copied over, e.g. B bytes
              	
87DD: DD360500		ld   (ix+5),0        ; write end of dictionary zero.
              	
87E1: CDF586  		call  PAGERestore
              	
87E4: DDE1    		pop  ix          ; restore and exit
87E6: E1      		pop  hl
87E7: D1      		pop  de
87E8: C1      		pop  bc
87E9: F1      		pop  af
87EA: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;   Find word in dictionary. BC points to tagged string which is the name.
              	;
              	;   On exit, HL is the address and DE the page number with CC if found,
              	;   CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
87EB:         	DICTFindWord:
87EB: C5      		push  bc         ; save registers - return in DEHL Carry
87EC: DDE5    		push  ix
              	
87EE: 60      		ld   h,b        ; put address of name in HL.
87EF: 69      		ld   l,c        ; this points to the length/type tag.
              	
87F0: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
87F2: CDDC86  		call  PAGESwitch
              	
87F5: DD2100C0		ld   ix,$C000       ; dictionary start
87F9:         	__DICTFindMainLoop:
87F9: DD7E00  		ld   a,(ix+0)      ; examine offset, exit if zero as we have searched the lot.
87FC: B7      		or   a
87FD: 283A    		jr   z,__DICTFindFail
              	
87FF: DD7E04  		ld   a,(ix+4)       ; length of the word being checked.
8802: AE      		xor  (hl)        ; xor with tag length
8803: E63F    		and  $3F        ; check lower 6 bits
8805: 2029    		jr   nz,__DICTFindNext     ; if different can't be this word as different lengths.
              	
8807: DDE5    		push  ix         ; save pointers on stack.
8809: E5      		push  hl
              	
880A: DD7E04  		ld   a,(ix+4)      ; get the word length to test into B
880D: E63F    		and  $3F
880F: 47      		ld   b,a
8810: 23      		inc  hl         ; skip over tag byte
8811:         	__DICTCheckName:
8811: DD7E05  		ld   a,(ix+5)       ; compare dictionary vs character.
8814: BE      		cp   (hl)        ; compare vs the matching character.
8815: 2016    		jr   nz,__DICTFindNoMatch    ; no, not the same word.
8817: 23      		inc  hl         ; HL point to next character
8818: DD23    		inc  ix
881A: 10F5    		djnz  __DICTCheckName     ; do for B characters.
              	
881C: E1      		pop  hl         ; Found a match. restore HL and IX
881D: DDE1    		pop  ix
              	
881F: 1600    		ld   d,0        ; D = 0
8821: DD5E01  		ld   e,(ix+1)      ; E = page#
8824: DD6E02  		ld   l,(ix+2)      ; HL = address
8827: DD6603  		ld   h,(ix+3)
882A: AF      		xor  a         ; clear the carry flag.
882B: 1813    		jr   __DICTFindExit
              	
882D:         	__DICTFindNoMatch:        ; this one doesn't match.
882D: E1      		pop  hl         ; restore HL and IX
882E: DDE1    		pop  ix
8830:         	__DICTFindNext:
8830: DD5E00  		ld   e,(ix+0)      ; DE = offset to next word
8833: 1600    		ld   d,$00
8835: DD19    		add  ix,de        ; IX now points to next word.
8837: 18C0    		jr   __DICTFindMainLoop    ; and try the next one.
              	
8839:         	__DICTFindFail:
8839: 110000  		ld   de,$0000       ; return all zeros.
883C: 210000  		ld   hl,$0000
883F: 37      		scf          ; set carry flag
8840:         	__DICTFindExit:
8840: F5      		push  af         ; restore original page, preserving carry flag.
8841: CDF586  		call  PAGERestore
8844: F1      		pop  af
8845: DDE1    		pop  ix         ; pop registers and return.
8847: C1      		pop  bc
8848: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;      Remove underscore prefixed words from the dictionary.
              	;
              	; ***********************************************************************************************
              	
              	
              	
              	; ********* dict.crunch word *********
              	
8849:         	define_64_69_63_74_2e_63_72_75_6e_63_68:
8849: CDB18A  		call COMPCompileSelf
              	
884C:         	DICTCrunchDictionary:
884C: C5      		push  bc
884D: D5      		push  de
884E: E5      		push hl
884F: DDE5    		push  ix
              	
8851: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
8853: CDDC86  		call  PAGESwitch
8856: DD2100C0		ld   ix,$C000       ; dictionary start
885A:         	__DICTCrunchNext:
885A: DD7E00  		ld   a,(ix+0)
885D: B7      		or   a
885E: 2823    		jr   z,__DICTCrunchExit
8860: DD7E05  		ld   a,(ix+5)       ; check first character
8863: FE5F    		cp   '_'        ; if not _, try next
8865: 2013    		jr   nz,__DICTCrunchAdvance
              	
8867: DDE5    		push  ix
8869: D1      		pop   de         ; DE = start position
886A: DD6E00  		ld   l,(ix+0)      ; HL = start + offset
886D: 2600    		ld   h,0
886F: 19      		add  hl,de
8870: 7C      		ld   a,h        ; BC = count
8871: 2F      		cpl
8872: 47      		ld   b,a
8873: 7D      		ld   a,l
8874: 2F      		cpl
8875: 4F      		ld   c,a
8876: EDB0    		ldir          ; copy it
8878: 18E0    		jr   __DICTCrunchNext     ; retry from the same position.
              	
887A:         	__DICTCrunchAdvance:       ; go to next slot.
887A: DD5E00  		ld   e,(ix+0)      ; DE = offset
887D: 1600    		ld   d,0
887F: DD19    		add  ix,de        ; go gorward
8881: 18D7    		jr   __DICTCrunchNext
              	
8883:         	__DICTCrunchExit:
8883: DDE1    		pop  ix
8885: E1      		pop  hl
8886: D1      		pop  de
8887: C1      		pop  bc
8888: C9      		ret
              	
              	
              		include "temp/loader.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   loader.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   19th March 2019.
              	;  Purpose : Loads in source pages
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;      Load in Pages from A until stopped.
              	;
              	; ***************************************************************************************
              	
              	
              	
              	; ********* loadfrom word *********
              	
8889:         	define_6c_6f_61_64_66_72_6f_6d:
8889: CDB18A  		call COMPCompileSelf
              	
888C:         	LOADLoadPages:
              	
888C: D5      		push  de          ; save registers
888D: E5      		push  hl
888E: DDE5    		push  ix
8890: CDEC88  		call  LOADGetPageAndAddress     ; convert to page and address
              	
8893:         	__LOADPageLoop:
8893: CDA388  		call  LOADProcessPage      ; process Page A from IX to End.
8896: DD2100C0		ld   ix,$C000        ; reset IX to start of next buffer
889A: C602    		add  a,2         ; go to next 16k page pair.
889C: FE26    		cp   FirstSourcePage+SourcePageCount  ; reached the end.
889E: 20F3    		jr   nz,__LOADPageLoop      ; go back.
88A0: C33380  		jp   StopDefault       ; end (will be warmstart !)
              	
              	
              	; ***************************************************************************************
              	;
              	;       Process Page A from IX to End
              	;
              	; ***************************************************************************************
              	
88A3:         	LOADProcessPage:
88A3: F5      		push  af          ; save A IX
88A4: DDE5    		push  ix
88A6: CDDC86  		call  PAGESwitch        ; switch to that page
88A9:         	__LOADPLoop:
88A9: DD7E00  		ld   a,(ix+0)        ; look at first character on page
88AC: FE80    		cp   $80         ; is there something here ?
88AE: 282E    		jr   z,__LOADPNext       ; if not, go to next.
88B0: DDE5    		push  ix          ; save current position
              	
88B2: D5      		push  de          ; save DE and HL
88B3: E5      		push  hl
88B4: 11087B  		ld   de,EditBuffer       ; copy IX into edit buffer
88B7: DDE5    		push  ix
88B9: E1      		pop  hl
88BA: 010002  		ld   bc,EditPageSize
88BD: EDB0    		ldir
88BF: E1      		pop  hl          ; restore HL and DE
88C0: D1      		pop  de
88C1: DD21087B		ld   ix,EditBuffer       ; start processing from the edit buffer/
              	
88C5:         	__LOADPDoLoop:
88C5: DD7E00  		ld   a,(ix+0)       ; get first tag
88C8: FE80    		cp   $80         ; end ?
88CA: 2810    		jr   z,__LOADPDoExit      ; then exit
              	
88CC: DD01    		db   $DD,$01
              	
88CE: DD7E00  		ld   a,(ix+0)       ; get length into BC
88D1: E63F    		and  $3F
88D3: 4F      		ld   c,a
88D4: 0600    		ld   b,$00
88D6: DD09    		add  ix,bc         ; go to next word
88D8: DD23    		inc  ix          ; +1 for the tag byte
88DA: 18E9    		jr   __LOADPDoLoop
              	
88DC:         	__LOADPDoExit:
88DC: DDE1    		pop  ix          ; restore current position
88DE:         	__LOADPNext:
88DE: 010002  		ld   bc,EditPageSize      ; go to next page
88E1: DD09    		add  ix,bc         ; until reached the end.
88E3: 30C4    		jr   nc,__LOADPLoop       ; until done the pages to $0000.
88E5: CDF586  		call  PAGERestore
88E8: DDE1    		pop  ix          ; restore A IX
88EA: F1      		pop  af
88EB: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;     Convert a page number in HL to an address in IX, and page in A.
              	;
              	; ***************************************************************************************
              	
88EC:         	LOADGetPageAndAddress:
88EC: E5      		push  hl          ; save HL twice
88ED: E5      		push  hl
88EE: 7D      		ld   a,l         ; get offset in page (32 source pages/page)
88EF: E61F    		and  31
88F1: 87      		add  a,a         ; 2 x offset, x 512 by putting it in H
88F2: C6C0    		add  a,$C0         ; offset from $C000
88F4: 67      		ld   h,a
88F5: 2E00    		ld   l,$00
88F7: E5      		push  hl          ; copy into IX.
88F8: DDE1    		pop  ix
88FA: E1      		pop  hl          ; this is the page number / 32 x 2
88FB: CB3C    		srl  h
88FD: CB1D    		rr   l
88FF: CB3C    		srl  h
8901: CB1D    		rr   l
8903: CB3C    		srl  h
8905: CB1D    		rr   l
8907: CB3C    		srl  h
8909: CB1D    		rr   l
890B: CB3C    		srl  h
890D: CB1D    		rr   l
890F: 29      		add  hl,hl         ; HL now contains the offset.
8910: 7D      		ld   a,l         ; get in A
8911: C622    		add  a,FirstSourcePage      ; offset from first source page
8913: E1      		pop  hl          ; restore HL
8914: C9      		ret           ; and exit
              	
              	
              		include "temp/memory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Memory operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ! macro *********
              	
8915:         	define_21:
8915: CDBC8A  		call COMPMacroExpand
8918: 0604    		ld b,end_21-start_21
891A:         	start_21:
891A: 73      		ld   (hl),e
891B: 23      		inc  hl
891C: 72      		ld   (hl),d
891D: 2B      		dec  hl
891E:         	end_21:
891E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* @ macro *********
              	
891F:         	define_40:
891F: CDBC8A  		call COMPMacroExpand
8922: 0604    		ld b,end_40-start_40
8924:         	start_40:
8924: 7E      		ld   a,(hl)
8925: 23      		inc  hl
8926: 66      		ld  h,(hl)
8927: 6F      		ld  l,a
8928:         	end_40:
8928: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +! word *********
              	
8929:         	define_2b_21:
8929: CDB18A  		call COMPCompileSelf
892C: 7E      		ld   a,(hl)
892D: 83      		add  a,e
892E: 77      		ld   (hl),a
892F: 23      		inc  hl
8930: 7E      		ld   a,(hl)
8931: 8A      		adc  a,d
8932: 77      		ld   (hl),a
8933: 2B      		dec  hl
8934: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c! macro *********
              	
8935:         	define_63_21:
8935: CDBC8A  		call COMPMacroExpand
8938: 0601    		ld b,end_63_21-start_63_21
893A:         	start_63_21:
893A: 73      		ld   (hl),e
893B:         	end_63_21:
893B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c@ macro *********
              	
893C:         	define_63_40:
893C: CDBC8A  		call COMPMacroExpand
893F: 0603    		ld b,end_63_40-start_63_40
8941:         	start_63_40:
8941: 6E      		ld   l,(hl)
8942: 2600    		ld   h,0
8944:         	end_63_40:
8944: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p@ word *********
              	
8945:         	define_70_40:
8945: CDB18A  		call COMPCompileSelf
8948: 42      		ld   b,d
8949: 4B      		ld   c,e
894A: ED68    		in   l,(c)
894C: 2600    		ld   h,0
894E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p! macro *********
              	
894F:         	define_70_21:
894F: CDBC8A  		call COMPMacroExpand
8952: 0604    		ld b,end_70_21-start_70_21
8954:         	start_70_21:
8954: 42      		ld   b,d
8955: 4B      		ld   c,e
8956: ED69    		out  (c),l
8958:         	end_70_21:
8958: C9      		ret
              		include "temp/miscellany.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   miscellany.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* , word *********
              	
8959:         	define_2c:
8959: 00      		nop
895A: CDB18A  		call COMPCompileSelf
895D: C39586  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ; macro *********
              	
8960:         	define_3b:
8960: 00      		nop
8961: CDBC8A  		call COMPMacroExpand
8964: 0601    		ld b,end_3b-start_3b
8966:         	start_3b:
8966: C9      		ret
8967:         	end_3b:
8967: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c, word *********
              	
8968:         	define_63_2c:
8968: 00      		nop
8969: CDB18A  		call COMPCompileSelf
896C: 7D      		ld   a,l
896D: C39586  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* param! word *********
              	
8970:         	define_70_61_72_61_6d_21:
8970: CDB18A  		call COMPCompileSelf
8973: 22D88A  		ld   (Parameter),hl
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* copy word *********
              	
8976:         	define_63_6f_70_79:
8976: CDB18A  		call COMPCompileSelf
8979: ED4BD88A		ld   bc,(Parameter)
897D: 78      		ld   a,b
897E: B1      		or   c
897F: C8      		ret  z
              	
8980: C5      		push  bc          ; BC count
8981: D5      		push  de          ; DE target
8982: E5      		push  hl          ; HL source
              	
8983: AF      		xor  a          ; Clear C
8984: ED52    		sbc  hl,de         ; check overlap ?
8986: 300B    		jr   nc,__copy_gt_count      ; if source after target
8988: 19      		add  hl,de         ; undo subtract
              	
8989: 09      		add  hl,bc         ; add count to HL + DE
898A: EB      		ex   de,hl
898B: 09      		add  hl,bc
898C: EB      		ex   de,hl
898D: 1B      		dec  de          ; dec them, so now at the last byte to copy
898E: 2B      		dec  hl
898F: EDB8    		lddr           ; do it backwards
8991: 1803    		jr   __copy_exit
              	
8993:         	__copy_gt_count:
8993: 19      		add  hl,de         ; undo subtract
8994: EDB0    		ldir          ; do the copy
8996:         	__copy_exit:
8996: E1      		pop  hl          ; restore registers
8997: D1      		pop  de
8998: C1      		pop  bc
8999: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* fill word *********
              	
899A:         	define_66_69_6c_6c:
899A: CDB18A  		call COMPCompileSelf
899D: ED4BD88A		ld   bc,(Parameter)
89A1: 78      		ld   a,b         ; exit if C = 0
89A2: B1      		or   c
89A3: C8      		ret  z
              	
89A4: C5      		push  bc          ; BC count
89A5: D5      		push  de          ; DE target, L byte
89A6:         	__fill_loop:
89A6: 7D      		ld   a,l         ; copy a byte
89A7: 12      		ld   (de),a
89A8: 13      		inc  de          ; bump pointer
89A9: 0B      		dec  bc          ; dec counter and loop
89AA: 78      		ld   a,b
89AB: B1      		or   c
89AC: 20F8    		jr   nz,__fill_loop
89AE: D1      		pop  de          ; restore
89AF: C1      		pop  bc
89B0: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* halt word *********
              	
89B1:         	define_68_61_6c_74:
89B1: 00      		nop
89B2: CDB18A  		call COMPCompileSelf
89B5:         	__halt_loop:
89B5: F3      		di
89B6: 76      		halt
89B7: 18FC    		jr   __halt_loop
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* break macro *********
              	
89B9:         	define_62_72_65_61_6b:
89B9: 00      		nop
89BA: CDBC8A  		call COMPMacroExpand
89BD: 0602    		ld b,end_62_72_65_61_6b-start_62_72_65_61_6b
89BF:         	start_62_72_65_61_6b:
89BF: DD01    		db   $DD,$01
89C1:         	end_62_72_65_61_6b:
89C1: C9      		ret
              	
              		include "temp/register.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Register manipulation
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* swap macro *********
              	
89C2:         	define_73_77_61_70:
89C2: CDBC8A  		call COMPMacroExpand
89C5: 0601    		ld b,end_73_77_61_70-start_73_77_61_70
89C7:         	start_73_77_61_70:
89C7: EB      		ex   de,hl
89C8:         	end_73_77_61_70:
89C8: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>b macro *********
              	
89C9:         	define_61_3e_62:
89C9: CDBC8A  		call COMPMacroExpand
89CC: 0602    		ld b,end_61_3e_62-start_61_3e_62
89CE:         	start_61_3e_62:
89CE: 54      		ld   d,h
89CF: 5D      		ld   e,l
89D0:         	end_61_3e_62:
89D0: C9      		ret
              	
              	
              	
              	
              	; ********* b>a macro *********
              	
89D1:         	define_62_3e_61:
89D1: CDBC8A  		call COMPMacroExpand
89D4: 0602    		ld b,end_62_3e_61-start_62_3e_61
89D6:         	start_62_3e_61:
89D6: 62      		ld   h,d
89D7: 6B      		ld   l,e
89D8:         	end_62_3e_61:
89D8: C9      		ret
              	
              		include "temp/stack.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Stack words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* push macro *********
              	
89D9:         	define_70_75_73_68:
89D9: 00      		nop
89DA: CDBC8A  		call COMPMacroExpand
89DD: 0601    		ld b,end_70_75_73_68-start_70_75_73_68
89DF:         	start_70_75_73_68:
89DF: E5      		push  hl
89E0:         	end_70_75_73_68:
89E0: C9      		ret
              	
              	
              	
              	; ********* pop macro *********
              	
89E1:         	define_70_6f_70:
89E1: 00      		nop
89E2: CDBC8A  		call COMPMacroExpand
89E5: 0602    		ld b,end_70_6f_70-start_70_6f_70
89E7:         	start_70_6f_70:
89E7: EB      		ex   de,hl
89E8: E1      		pop  hl
89E9:         	end_70_6f_70:
89E9: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>r macro *********
              	
89EA:         	define_61_3e_72:
89EA: 00      		nop
89EB: CDBC8A  		call COMPMacroExpand
89EE: 0601    		ld b,end_61_3e_72-start_61_3e_72
89F0:         	start_61_3e_72:
89F0: E5      		push  hl
89F1:         	end_61_3e_72:
89F1: C9      		ret
              	
              	
              	
              	; ********* r>a macro *********
              	
89F2:         	define_72_3e_61:
89F2: 00      		nop
89F3: CDBC8A  		call COMPMacroExpand
89F6: 0601    		ld b,end_72_3e_61-start_72_3e_61
89F8:         	start_72_3e_61:
89F8: E1      		pop  hl
89F9:         	end_72_3e_61:
89F9: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* b>r macro *********
              	
89FA:         	define_62_3e_72:
89FA: 00      		nop
89FB: CDBC8A  		call COMPMacroExpand
89FE: 0601    		ld b,end_62_3e_72-start_62_3e_72
8A00:         	start_62_3e_72:
8A00: D5      		push  de
8A01:         	end_62_3e_72:
8A01: C9      		ret
              	
              	
              	
              	; ********* r>b macro *********
              	
8A02:         	define_72_3e_62:
8A02: 00      		nop
8A03: CDBC8A  		call COMPMacroExpand
8A06: 0601    		ld b,end_72_3e_62-start_72_3e_62
8A08:         	start_72_3e_62:
8A08: D1      		pop  de
8A09:         	end_72_3e_62:
8A09: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ab>r macro *********
              	
8A0A:         	define_61_62_3e_72:
8A0A: 00      		nop
8A0B: CDBC8A  		call COMPMacroExpand
8A0E: 0602    		ld b,end_61_62_3e_72-start_61_62_3e_72
8A10:         	start_61_62_3e_72:
8A10: D5      		push  de
8A11: E5      		push  hl
8A12:         	end_61_62_3e_72:
8A12: C9      		ret
              	
              	
              	
              	; ********* r>ab macro *********
              	
8A13:         	define_72_3e_61_62:
8A13: 00      		nop
8A14: CDBC8A  		call COMPMacroExpand
8A17: 0602    		ld b,end_72_3e_61_62-start_72_3e_61_62
8A19:         	start_72_3e_61_62:
8A19: E1      		pop  hl
8A1A: D1      		pop  de
8A1B:         	end_72_3e_61_62:
8A1B: C9      		ret
              		include "temp/unary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Unary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* -- macro *********
              	
8A1C:         	define_2d_2d:
8A1C: CDBC8A  		call COMPMacroExpand
8A1F: 0601    		ld b,end_2d_2d-start_2d_2d
8A21:         	start_2d_2d:
8A21: 2B      		dec  hl
8A22:         	end_2d_2d:
8A22: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* --- macro *********
              	
8A23:         	define_2d_2d_2d:
8A23: CDBC8A  		call COMPMacroExpand
8A26: 0602    		ld b,end_2d_2d_2d-start_2d_2d_2d
8A28:         	start_2d_2d_2d:
8A28: 2B      		dec  hl
8A29: 2B      		dec  hl
8A2A:         	end_2d_2d_2d:
8A2A: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ++ macro *********
              	
8A2B:         	define_2b_2b:
8A2B: CDBC8A  		call COMPMacroExpand
8A2E: 0601    		ld b,end_2b_2b-start_2b_2b
8A30:         	start_2b_2b:
8A30: 23      		inc  hl
8A31:         	end_2b_2b:
8A31: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +++ macro *********
              	
8A32:         	define_2b_2b_2b:
8A32: CDBC8A  		call COMPMacroExpand
8A35: 0602    		ld b,end_2b_2b_2b-start_2b_2b_2b
8A37:         	start_2b_2b_2b:
8A37: 23      		inc  hl
8A38: 23      		inc  hl
8A39:         	end_2b_2b_2b:
8A39: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0- word *********
              	
8A3A:         	define_30_2d:
8A3A: CDB18A  		call COMPCompileSelf
8A3D:         	__negate:
8A3D: 7C      		ld   a,h
8A3E: 2F      		cpl
8A3F: 67      		ld   h,a
8A40: 7D      		ld   a,l
8A41: 2F      		cpl
8A42: 6F      		ld   l,a
8A43: 23      		inc  hl
8A44: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0< word *********
              	
8A45:         	define_30_3c:
8A45: CDB18A  		call COMPCompileSelf
8A48: CB7C    		bit  7,h
8A4A: 210000  		ld   hl,$0000
8A4D: C8      		ret  z
8A4E: 2B      		dec  hl
8A4F: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0= word *********
              	
8A50:         	define_30_3d:
8A50: CDB18A  		call COMPCompileSelf
8A53: 7C      		ld   a,h
8A54: B5      		or   l
8A55: 210000  		ld   hl,$0000
8A58: C0      		ret  nz
8A59: 2B      		dec  hl
8A5A: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2* macro *********
              	
8A5B:         	define_32_2a:
8A5B: CDBC8A  		call COMPMacroExpand
8A5E: 0601    		ld b,end_32_2a-start_32_2a
8A60:         	start_32_2a:
8A60: 29      		add  hl,hl
8A61:         	end_32_2a:
8A61: C9      		ret
              	
              	
              	
              	; ********* 4* macro *********
              	
8A62:         	define_34_2a:
8A62: CDBC8A  		call COMPMacroExpand
8A65: 0602    		ld b,end_34_2a-start_34_2a
8A67:         	start_34_2a:
8A67: 29      		add  hl,hl
8A68: 29      		add  hl,hl
8A69:         	end_34_2a:
8A69: C9      		ret
              	
              	
              	
              	; ********* 8* macro *********
              	
8A6A:         	define_38_2a:
8A6A: CDBC8A  		call COMPMacroExpand
8A6D: 0603    		ld b,end_38_2a-start_38_2a
8A6F:         	start_38_2a:
8A6F: 29      		add  hl,hl
8A70: 29      		add  hl,hl
8A71: 29      		add  hl,hl
8A72:         	end_38_2a:
8A72: C9      		ret
              	
              	
              	
              	; ********* 16* macro *********
              	
8A73:         	define_31_36_2a:
8A73: CDBC8A  		call COMPMacroExpand
8A76: 0604    		ld b,end_31_36_2a-start_31_36_2a
8A78:         	start_31_36_2a:
8A78: 29      		add  hl,hl
8A79: 29      		add  hl,hl
8A7A: 29      		add  hl,hl
8A7B: 29      		add  hl,hl
8A7C:         	end_31_36_2a:
8A7C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2/ macro *********
              	
8A7D:         	define_32_2f:
8A7D: CDBC8A  		call COMPMacroExpand
8A80: 0604    		ld b,end_32_2f-start_32_2f
8A82:         	start_32_2f:
8A82: CB2C    		sra  h
8A84: CB1D    		rr   l
8A86:         	end_32_2f:
8A86: C9      		ret
              	
              	
              	
              	; ********* 4/ macro *********
              	
8A87:         	define_34_2f:
8A87: CDBC8A  		call COMPMacroExpand
8A8A: 0608    		ld b,end_34_2f-start_34_2f
8A8C:         	start_34_2f:
8A8C: CB2C    		sra  h
8A8E: CB1D    		rr   l
8A90: CB2C    		sra  h
8A92: CB1D    		rr   l
8A94:         	end_34_2f:
8A94: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* abs word *********
              	
8A95:         	define_61_62_73:
8A95: CDB18A  		call COMPCompileSelf
8A98: CB7C    		bit  7,h
8A9A: C8      		ret  z
8A9B: C33D8A  		jp   __negate
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* bswap macro *********
              	
8A9E:         	define_62_73_77_61_70:
8A9E: CDBC8A  		call COMPMacroExpand
8AA1: 0603    		ld b,end_62_73_77_61_70-start_62_73_77_61_70
8AA3:         	start_62_73_77_61_70:
8AA3: 7D      		ld   a,l
8AA4: 6C      		ld   l,h
8AA5: 67      		ld   h,a
8AA6:         	end_62_73_77_61_70:
8AA6: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* not word *********
              	
8AA7:         	define_6e_6f_74:
8AA7: CDB18A  		call COMPCompileSelf
8AAA: 7C      		ld   a,h
8AAB: 2F      		cpl
8AAC: 67      		ld   h,a
8AAD: 7D      		ld   a,l
8AAE: 2F      		cpl
8AAF: 6F      		ld   l,a
8AB0: C9      		ret
              		include "temp/wordaction.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   wordaction.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Routines that belong to word code
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;       Compile a reference to self.
              	;
              	; ***************************************************************************************
              	
8AB1:         	COMPCompileSelf:
8AB1: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8AB2: 3ECD    		ld  a,$CD         ; call opcode
8AB4: CD7D86  		call  FARCompileByte       ; compile that
8AB7: CD9586  		call  FARCompileWord       ; compile the address
8ABA: E1      		pop  hl          ; restore old HL
8ABB: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;         Compile Macro Code
              	;
              	; ***************************************************************************************
              	
8ABC:         	COMPMacroExpand:
8ABC: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8ABD: 23      		inc  hl          ; skip over the LD B,xx opcode
8ABE: 46      		ld   b,(hl)         ; read count
8ABF:         	__COMPMExLoop:
8ABF: 23      		inc  hl          ; get next byte to copy
8AC0: 7E      		ld   a,(hl)
8AC1: CD7D86  		call  FARCompileByte       ; compile that
8AC4: 10F9    		djnz  __COMPMExLoop      ; do it B times.
8AC6: E1      		pop  hl          ; restore old HL
8AC7: C9      		ret
              	
              	
              	
              			include "data.asm"							; data area.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th March 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8AC8:         	SystemInformation:
              	
8AC8:         	Here:												; +0 	Here 
8AC8: 028B    			dw 		FreeMemory
8ACA:         	HerePage: 											; +2	Here.Page
8ACA: 2A00    			db 		FirstCodePage,0
8ACC:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
8ACC: 2C000000			db 		FirstCodePage+2,0,0,0
8AD0:         	DisplayInfo: 										; +8 	Display information
8AD0: DC8A0000			dw 		DisplayInformation,0		
8AD4:         	BootAddress:										; +12 	Boot Address
8AD4: 2D80    			dw 		BootDefault
8AD6:         	BootPage:											; +14 	Boot Page
8AD6: 2A00    			db 		FirstCodePage,0
8AD8:         	Parameter:	 										; +16 	3rd Parameter
8AD8: 00000000			dw 		0,0		
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8ADC:         	DisplayInformation:
              	
8ADC:         	SIScreenWidth: 										; +0 	screen width
8ADC: 00000000			db 		0,0,0,0	
8AE0:         	SIScreenHeight:										; +4 	screen height
8AE0: 00000000			db 		0,0,0,0
8AE4:         	SIScreenSize:										; +8 	char size of screen
8AE4: 00000000			dw 		0,0		
8AE8:         	SIScreenMode:										; +12 	current mode
8AE8: 00000000			db 		0,0,0,0
8AEC:         	SIFontBase:											; font in use
8AEC: 0B82    			dw 		AlternateFont
8AEE:         	SIScreenDriver:										; Screen Driver
8AEE: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8AF0:         	__PAGEStackPointer: 								; stack used for switching pages
8AF0: 0000    			dw 		0
8AF2:         	__PAGEStackBase:
8AF2: FFFFFFFF			ds 		16
8AF6: FF...   	
              	
              	
              	
8B02:         	FreeMemory:											; free memory in $8000-$BFFF page.
              	
8B02: FFFFFFFF			org 	$C000
8B06: FF...   	
              			include "temp/__dictionary.asm" 			; dictionary.
C000: 06      		db 1+5
C001: 20      		db $20
C002: 1589    		dw define_21
C004: 01      		db 1
C005: 21      		db "!"
              	
C006: 06      		db 1+5
C007: 20      		db $20
C008: 3C87    		dw define_2a
C00A: 01      		db 1
C00B: 2A      		db "*"
              	
C00C: 06      		db 1+5
C00D: 20      		db $20
C00E: 4C87    		dw define_2b
C010: 01      		db 1
C011: 2B      		db "+"
              	
C012: 07      		db 2+5
C013: 20      		db $20
C014: 2989    		dw define_2b_21
C016: 02      		db 2
C017: 2B21    		db "+!"
              	
C019: 07      		db 2+5
C01A: 20      		db $20
C01B: 2B8A    		dw define_2b_2b
C01D: 02      		db 2
C01E: 2B2B    		db "++"
              	
C020: 08      		db 3+5
C021: 20      		db $20
C022: 328A    		dw define_2b_2b_2b
C024: 03      		db 3
C025: 2B2B2B  		db "+++"
              	
C028: 06      		db 1+5
C029: 20      		db $20
C02A: 5989    		dw define_2c
C02C: 01      		db 1
C02D: 2C      		db ","
              	
C02E: 06      		db 1+5
C02F: 20      		db $20
C030: 3287    		dw define_2d
C032: 01      		db 1
C033: 2D      		db "-"
              	
C034: 07      		db 2+5
C035: 20      		db $20
C036: 1C8A    		dw define_2d_2d
C038: 02      		db 2
C039: 2D2D    		db "--"
              	
C03B: 08      		db 3+5
C03C: 20      		db $20
C03D: 238A    		dw define_2d_2d_2d
C03F: 03      		db 3
C040: 2D2D2D  		db "---"
              	
C043: 06      		db 1+5
C044: 20      		db $20
C045: 4287    		dw define_2f
C047: 01      		db 1
C048: 2F      		db "/"
              	
C049: 07      		db 2+5
C04A: 20      		db $20
C04B: 3A8A    		dw define_30_2d
C04D: 02      		db 2
C04E: 302D    		db "0-"
              	
C050: 07      		db 2+5
C051: 20      		db $20
C052: 458A    		dw define_30_3c
C054: 02      		db 2
C055: 303C    		db "0<"
              	
C057: 07      		db 2+5
C058: 20      		db $20
C059: 508A    		dw define_30_3d
C05B: 02      		db 2
C05C: 303D    		db "0="
              	
C05E: 08      		db 3+5
C05F: 20      		db $20
C060: 738A    		dw define_31_36_2a
C062: 03      		db 3
C063: 31362A  		db "16*"
              	
C066: 07      		db 2+5
C067: 20      		db $20
C068: 5B8A    		dw define_32_2a
C06A: 02      		db 2
C06B: 322A    		db "2*"
              	
C06D: 07      		db 2+5
C06E: 20      		db $20
C06F: 7D8A    		dw define_32_2f
C071: 02      		db 2
C072: 322F    		db "2/"
              	
C074: 07      		db 2+5
C075: 20      		db $20
C076: 628A    		dw define_34_2a
C078: 02      		db 2
C079: 342A    		db "4*"
              	
C07B: 07      		db 2+5
C07C: 20      		db $20
C07D: 878A    		dw define_34_2f
C07F: 02      		db 2
C080: 342F    		db "4/"
              	
C082: 07      		db 2+5
C083: 20      		db $20
C084: 6A8A    		dw define_38_2a
C086: 02      		db 2
C087: 382A    		db "8*"
              	
C089: 06      		db 1+5
C08A: 20      		db $20
C08B: 6089    		dw define_3b
C08D: 01      		db 1
C08E: 3B      		db ";"
              	
C08F: 06      		db 1+5
C090: 20      		db $20
C091: 0B87    		dw define_3c
C093: 01      		db 1
C094: 3C      		db "<"
              	
C095: 06      		db 1+5
C096: 20      		db $20
C097: 2387    		dw define_3d
C099: 01      		db 1
C09A: 3D      		db "="
              	
C09B: 06      		db 1+5
C09C: 20      		db $20
C09D: 1F89    		dw define_40
C09F: 01      		db 1
C0A0: 40      		db "@"
              	
C0A1: 08      		db 3+5
C0A2: 20      		db $20
C0A3: C989    		dw define_61_3e_62
C0A5: 03      		db 3
C0A6: 613E62  		db "a>b"
              	
C0A9: 08      		db 3+5
C0AA: 20      		db $20
C0AB: EA89    		dw define_61_3e_72
C0AD: 03      		db 3
C0AE: 613E72  		db "a>r"
              	
C0B1: 09      		db 4+5
C0B2: 20      		db $20
C0B3: 0A8A    		dw define_61_62_3e_72
C0B5: 04      		db 4
C0B6: 61623E72		db "ab>r"
              	
C0BA: 08      		db 3+5
C0BB: 20      		db $20
C0BC: 958A    		dw define_61_62_73
C0BE: 03      		db 3
C0BF: 616273  		db "abs"
              	
C0C2: 08      		db 3+5
C0C3: 20      		db $20
C0C4: 5387    		dw define_61_6e_64
C0C6: 03      		db 3
C0C7: 616E64  		db "and"
              	
C0CA: 08      		db 3+5
C0CB: 20      		db $20
C0CC: D189    		dw define_62_3e_61
C0CE: 03      		db 3
C0CF: 623E61  		db "b>a"
              	
C0D2: 08      		db 3+5
C0D3: 20      		db $20
C0D4: FA89    		dw define_62_3e_72
C0D6: 03      		db 3
C0D7: 623E72  		db "b>r"
              	
C0DA: 0A      		db 5+5
C0DB: 20      		db $20
C0DC: B989    		dw define_62_72_65_61_6b
C0DE: 05      		db 5
C0DF: 62726561		db "break"
C0E3: 6B      	
              	
C0E4: 0A      		db 5+5
C0E5: 20      		db $20
C0E6: 9E8A    		dw define_62_73_77_61_70
C0E8: 05      		db 5
C0E9: 62737761		db "bswap"
C0ED: 70      	
              	
C0EE: 07      		db 2+5
C0EF: 20      		db $20
C0F0: 3589    		dw define_63_21
C0F2: 02      		db 2
C0F3: 6321    		db "c!"
              	
C0F5: 07      		db 2+5
C0F6: 20      		db $20
C0F7: 6889    		dw define_63_2c
C0F9: 02      		db 2
C0FA: 632C    		db "c,"
              	
C0FC: 07      		db 2+5
C0FD: 20      		db $20
C0FE: 3C89    		dw define_63_40
C100: 02      		db 2
C101: 6340    		db "c@"
              	
C103: 12      		db 13+5
C104: 20      		db $20
C105: 8087    		dw define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21
C107: 0D      		db 13
C108: 636F6E2E		db "con.raw.char!"
C10C: 7261772E	
C110: 63686172	
C114: 21      	
              	
C115: 11      		db 12+5
C116: 20      		db $20
C117: 8687    		dw define_63_6f_6e_2e_72_61_77_2e_68_65_78_21
C119: 0C      		db 12
C11A: 636F6E2E		db "con.raw.hex!"
C11E: 7261772E	
C122: 68657821	
              	
C126: 12      		db 13+5
C127: 20      		db $20
C128: 8C87    		dw define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79
C12A: 0D      		db 13
C12B: 636F6E2E		db "con.raw.inkey"
C12F: 7261772E	
C133: 696E6B65	
C137: 79      	
              	
C138: 14      		db 15+5
C139: 20      		db $20
C13A: 7A87    		dw define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65
C13C: 0F      		db 15
C13D: 636F6E2E		db "con.raw.setmode"
C141: 7261772E	
C145: 7365746D	
C149: 6F6465  	
              	
C14C: 09      		db 4+5
C14D: 20      		db $20
C14E: 7689    		dw define_63_6f_70_79
C150: 04      		db 4
C151: 636F7079		db "copy"
              	
C155: 10      		db 11+5
C156: 20      		db $20
C157: 4988    		dw define_64_69_63_74_2e_63_72_75_6e_63_68
C159: 0B      		db 11
C15A: 64696374		db "dict.crunch"
C15E: 2E637275	
C162: 6E6368  	
              	
C165: 09      		db 4+5
C166: 20      		db $20
C167: 9A89    		dw define_66_69_6c_6c
C169: 04      		db 4
C16A: 66696C6C		db "fill"
              	
C16E: 09      		db 4+5
C16F: 20      		db $20
C170: B189    		dw define_68_61_6c_74
C172: 04      		db 4
C173: 68616C74		db "halt"
              	
C177: 0D      		db 8+5
C178: 20      		db $20
C179: 8988    		dw define_6c_6f_61_64_66_72_6f_6d
C17B: 08      		db 8
C17C: 6C6F6164		db "loadfrom"
C180: 66726F6D	
              	
C184: 08      		db 3+5
C185: 20      		db $20
C186: 5D87    		dw define_6d_6f_64
C188: 03      		db 3
C189: 6D6F64  		db "mod"
              	
C18C: 08      		db 3+5
C18D: 20      		db $20
C18E: A78A    		dw define_6e_6f_74
C190: 03      		db 3
C191: 6E6F74  		db "not"
              	
C194: 07      		db 2+5
C195: 20      		db $20
C196: 6687    		dw define_6f_72
C198: 02      		db 2
C199: 6F72    		db "or"
              	
C19B: 07      		db 2+5
C19C: 20      		db $20
C19D: 4F89    		dw define_70_21
C19F: 02      		db 2
C1A0: 7021    		db "p!"
              	
C1A2: 07      		db 2+5
C1A3: 20      		db $20
C1A4: 4589    		dw define_70_40
C1A6: 02      		db 2
C1A7: 7040    		db "p@"
              	
C1A9: 0B      		db 6+5
C1AA: 20      		db $20
C1AB: 7089    		dw define_70_61_72_61_6d_21
C1AD: 06      		db 6
C1AE: 70617261		db "param!"
C1B2: 6D21    	
              	
C1B4: 08      		db 3+5
C1B5: 20      		db $20
C1B6: E189    		dw define_70_6f_70
C1B8: 03      		db 3
C1B9: 706F70  		db "pop"
              	
C1BC: 09      		db 4+5
C1BD: 20      		db $20
C1BE: D989    		dw define_70_75_73_68
C1C0: 04      		db 4
C1C1: 70757368		db "push"
              	
C1C5: 08      		db 3+5
C1C6: 20      		db $20
C1C7: F289    		dw define_72_3e_61
C1C9: 03      		db 3
C1CA: 723E61  		db "r>a"
              	
C1CD: 09      		db 4+5
C1CE: 20      		db $20
C1CF: 138A    		dw define_72_3e_61_62
C1D1: 04      		db 4
C1D2: 723E6162		db "r>ab"
              	
C1D6: 08      		db 3+5
C1D7: 20      		db $20
C1D8: 028A    		dw define_72_3e_62
C1DA: 03      		db 3
C1DB: 723E62  		db "r>b"
              	
C1DE: 09      		db 4+5
C1DF: 20      		db $20
C1E0: C289    		dw define_73_77_61_70
C1E2: 04      		db 4
C1E3: 73776170		db "swap"
              	
C1E7: 08      		db 3+5
C1E8: 20      		db $20
C1E9: 7087    		dw define_78_6f_72
C1EB: 03      		db 3
C1EC: 786F72  		db "xor"
              	
C1EF: 00      		db 0
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $41F0 = 16880

; +++ global symbols +++

AlternateFont         = $820B = 33291          font.asm:1
Boot                  = $8006 = 32774          kernel.asm:32
BootAddress           = $8AD4 = 35540          data.asm:28
BootDefault           = $802D = 32813          kernel.asm:50
BootPage              = $8AD6 = 35542          data.asm:30
COMPCompileSelf       = $8AB1 = 35505          wordaction.asm:18
COMPMacroExpand       = $8ABC = 35516          wordaction.asm:32
DICTAddWord           = $8797 = 34711          dictionary.asm:19 (unused)
DICTCrunchDictionary  = $884C = 34892          dictionary.asm:170 (unused)
DICTFindWord          = $87EB = 34795          dictionary.asm:90 (unused)
DIVDivideMod16        = $8652 = 34386          divide.asm:18
DictionaryPage        = $0020 =    32          kernel.asm:16
DisplayInfo           = $8AD0 = 35536          data.asm:26 (unused)
DisplayInformation    = $8ADC = 35548          data.asm:41
Div16_Loop1           = $865C = 34396          divide.asm:27
Div16_Loop2           = $866D = 34413          divide.asm:41
Div16_NoAdd1          = $8664 = 34404          divide.asm:33
Div16_NoAdd2          = $8675 = 34421          divide.asm:47
EditBuffer            = $7B08 = 31496          kernel.asm:24
EditPageSize          = $0200 =   512          kernel.asm:19
FARCompileByte        = $867D = 34429          farmemory.asm:18
FARCompileWord        = $8695 = 34453          farmemory.asm:40
FirstCodePage         = $002A =    42          kernel.asm:20
FirstSourcePage       = $0022 =    34          kernel.asm:17
FreeMemory            = $8B02 = 35586          kernel.asm:62
GFXInitialise48k      = $8037 = 32823          screen48k.asm:19
GFXInitialiseLayer2   = $80AF = 32943          screen_layer2.asm:19
GFXInitialiseLowRes   = $8166 = 33126          screen_lores.asm:18
GFXMode               = $850B = 34059          graphics.asm:18
GFXPrintCharacter48k  = $8063 = 32867          screen48k.asm:53
GFXPrintCharacterLayer2 = $80DF = 32991          screen_layer2.asm:55
GFXPrintCharacterLowRes = $8190 = 33168          screen_lores.asm:50
GFXWriteCharacter     = $8540 = 34112          graphics.asm:64
GFXWriteHexWord       = $8553 = 34131          graphics.asm:87
GFXWriteHexWordA      = $8555 = 34133          graphics.asm:89 (unused)
Here                  = $8AC8 = 35528          data.asm:20
HerePage              = $8ACA = 35530          data.asm:22
IOScanKeyboard        = $8585 = 34181          keyboard.asm:19
L2PClear              = $80B8 = 32952          screen_layer2.asm:26
L2PClearBank          = $80C7 = 32967          screen_layer2.asm:34
LOADGetPageAndAddress = $88EC = 35052          loader.asm:100
LOADLoadPages         = $888C = 34956          loader.asm:25
LOADProcessPage       = $88A3 = 34979          loader.asm:47
LowClearScreen        = $8179 = 33145          screen_lores.asm:30
MULTMultiply16        = $86B0 = 34480          multiply.asm:18
NextFreePage          = $8ACC = 35532          data.asm:24 (unused)
PAGEInitialise        = $86CA = 34506          paging.asm:18
PAGERestore           = $86F5 = 34549          paging.asm:64
PAGESwitch            = $86DC = 34524          paging.asm:36
Parameter             = $8AD8 = 35544          data.asm:32
SIFontBase            = $8AEC = 35564          data.asm:51
SIScreenDriver        = $8AEE = 35566          data.asm:53
SIScreenHeight        = $8AE0 = 35552          data.asm:45
SIScreenMode          = $8AE8 = 35560          data.asm:49
SIScreenSize          = $8AE4 = 35556          data.asm:47
SIScreenWidth         = $8ADC = 35548          data.asm:43
SourcePageCount       = $0004 =     4          kernel.asm:18
StackTop              = $7EFC = 32508          kernel.asm:25
StopDefault           = $8033 = 32819          kernel.asm:54
SystemInformation     = $8AC8 = 35528          data.asm:18
__COMPMExLoop         = $8ABF = 35519          wordaction.asm:36
__Core__Mult_Loop     = $86B7 = 34487          multiply.asm:24
__Core__Mult_Shift    = $86BC = 34492          multiply.asm:28
__DICTAddCopy         = $87D4 = 34772          dictionary.asm:63
__DICTCheckName       = $8811 = 34833          dictionary.asm:118
__DICTCreateEntry     = $87BA = 34746          dictionary.asm:48
__DICTCrunchAdvance   = $887A = 34938          dictionary.asm:201
__DICTCrunchExit      = $8883 = 34947          dictionary.asm:207
__DICTCrunchNext      = $885A = 34906          dictionary.asm:179
__DICTFindEndDictionary = $87AD = 34733          dictionary.asm:39
__DICTFindExit        = $8840 = 34880          dictionary.asm:149
__DICTFindFail        = $8839 = 34873          dictionary.asm:145
__DICTFindMainLoop    = $87F9 = 34809          dictionary.asm:101
__DICTFindNext        = $8830 = 34864          dictionary.asm:139
__DICTFindNoMatch     = $882D = 34861          dictionary.asm:136
__GFXConfigure        = $8525 = 34085          graphics.asm:39
__GFXLayer2           = $851D = 34077          graphics.asm:32
__GFXLowRes           = $8522 = 34082          graphics.asm:36
__GFXWCExit           = $854E = 34126          graphics.asm:74
__GFXWHByte           = $8567 = 34151          graphics.asm:105
__GFXWHDigit          = $857D = 34173          graphics.asm:119
__GFXWHNibble         = $8574 = 34164          graphics.asm:113
__L2Exit              = $815F = 33119          screen_layer2.asm:156
__L2Loop              = $8150 = 33104          screen_layer2.asm:143
__L2Not1              = $80FB = 33019          screen_layer2.asm:77
__L2Not2              = $8101 = 33025          screen_layer2.asm:81
__L2Not3              = $8107 = 33031          screen_layer2.asm:85
__L2NotCursor         = $8112 = 33042          screen_layer2.asm:94
__L2NotSet            = $8156 = 33110          screen_layer2.asm:148
__L2Outer             = $8147 = 33095          screen_layer2.asm:137
__LOADPDoExit         = $88DC = 35036          loader.asm:83
__LOADPDoLoop         = $88C5 = 35013          loader.asm:68
__LOADPLoop           = $88A9 = 34985          loader.asm:51
__LOADPNext           = $88DE = 35038          loader.asm:85
__LOADPageLoop        = $8893 = 34963          loader.asm:32
__LPExit              = $8204 = 33284          screen_lores.asm:143
__LowLoop             = $81F0 = 33264          screen_lores.asm:127
__LowNotLower2        = $81E5 = 33253          screen_lores.asm:119
__LowNotReverse       = $81B2 = 33202          screen_lores.asm:79
__LowNotSet           = $81F6 = 33270          screen_lores.asm:132
__LowOuter            = $81E7 = 33255          screen_lores.asm:121
__PAGEStackBase       = $8AF2 = 35570          data.asm:64
__PAGEStackPointer    = $8AF0 = 35568          data.asm:62
__ZXWCCopy            = $80A3 = 32931          screen48k.asm:115
__ZXWCExit            = $80AA = 32938          screen48k.asm:122
___kr4                = $85B6 = 34230          keyboard.asm:50
__copy_exit           = $8996 = 35222          miscellany.asm:92
__copy_gt_count       = $8993 = 35219          miscellany.asm:89
__cs1                 = $8047 = 32839          screen48k.asm:29
__cs2                 = $804F = 32847          screen48k.asm:34
__fill_loop           = $89A6 = 35238          miscellany.asm:113
__halt_loop           = $89B5 = 35253          miscellany.asm:134
__kr1                 = $859A = 34202          keyboard.asm:33
__kr2                 = $85A5 = 34213          keyboard.asm:39
__kr3                 = $85A7 = 34215          keyboard.asm:42
__kr_exit             = $85D6 = 34262          keyboard.asm:80
__kr_keypressed       = $85D0 = 34256          keyboard.asm:74
__kr_no_shift_table   = $85DA = 34266          keyboard.asm:95
__kr_shift_table      = $8602 = 34306          keyboard.asm:101
__kr_symbol_shift_table = $862A = 34346          keyboard.asm:107
__less_returnc        = $871C = 34588          binary.asm:32
__less_samesign       = $8717 = 34583          binary.asm:27
__negate              = $8A3D = 35389          unary.asm:76
_end                  = $C1F0 = 49648          kernel.asm:26 (unused)
_size                 = $41F0 = 16880          kernel.asm:26 (unused)
define_21             = $8915 = 35093          memory.asm:16
define_2a             = $873C = 34620          binary.asm:79
define_2b             = $874C = 34636          binary.asm:103
define_2b_21          = $8929 = 35113          memory.asm:50
define_2b_2b          = $8A2B = 35371          unary.asm:45
define_2b_2b_2b       = $8A32 = 35378          unary.asm:59
define_2c             = $8959 = 35161          miscellany.asm:16
define_2d             = $8732 = 34610          binary.asm:64
define_2d_2d          = $8A1C = 35356          unary.asm:16
define_2d_2d_2d       = $8A23 = 35363          unary.asm:30
define_2f             = $8742 = 34626          binary.asm:89
define_30_2d          = $8A3A = 35386          unary.asm:74
define_30_3c          = $8A45 = 35397          unary.asm:92
define_30_3d          = $8A50 = 35408          unary.asm:106
define_31_36_2a       = $8A73 = 35443          unary.asm:160
define_32_2a          = $8A5B = 35419          unary.asm:121
define_32_2f          = $8A7D = 35453          unary.asm:177
define_34_2a          = $8A62 = 35426          unary.asm:133
define_34_2f          = $8A87 = 35463          unary.asm:190
define_38_2a          = $8A6A = 35434          unary.asm:146
define_3b             = $8960 = 35168          miscellany.asm:27
define_3c             = $870B = 34571          binary.asm:18
define_3d             = $8723 = 34595          binary.asm:45
define_40             = $891F = 35103          memory.asm:33
define_61_3e_62       = $89C9 = 35273          register.asm:30
define_61_3e_72       = $89EA = 35306          stack.asm:45
define_61_62_3e_72    = $8A0A = 35338          stack.asm:101
define_61_62_73       = $8A95 = 35477          unary.asm:207
define_61_6e_64       = $8753 = 34643          binary.asm:117
define_62_3e_61       = $89D1 = 35281          register.asm:44
define_62_3e_72       = $89FA = 35322          stack.asm:73
define_62_72_65_61_6b = $89B9 = 35257          miscellany.asm:145
define_62_73_77_61_70 = $8A9E = 35486          unary.asm:219
define_63_21          = $8935 = 35125          memory.asm:68
define_63_2c          = $8968 = 35176          miscellany.asm:42
define_63_40          = $893C = 35132          memory.asm:82
define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21 = $8780 = 34688          console.asm:24
define_63_6f_6e_2e_72_61_77_2e_68_65_78_21 = $8786 = 34694          console.asm:32
define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79 = $878C = 34700          console.asm:40
define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65 = $877A = 34682          console.asm:16
define_63_6f_70_79    = $8976 = 35190          miscellany.asm:64
define_64_69_63_74_2e_63_72_75_6e_63_68 = $8849 = 34889          dictionary.asm:167
define_66_69_6c_6c    = $899A = 35226          miscellany.asm:104
define_68_61_6c_74    = $89B1 = 35249          miscellany.asm:131
define_6c_6f_61_64_66_72_6f_6d = $8889 = 34953          loader.asm:22
define_6d_6f_64       = $875D = 34653          binary.asm:133
define_6e_6f_74       = $8AA7 = 35495          unary.asm:235
define_6f_72          = $8766 = 34662          binary.asm:146
define_70_21          = $894F = 35151          memory.asm:111
define_70_40          = $8945 = 35141          memory.asm:97
define_70_61_72_61_6d_21 = $8970 = 35184          miscellany.asm:54
define_70_6f_70       = $89E1 = 35297          stack.asm:29
define_70_75_73_68    = $89D9 = 35289          stack.asm:16
define_72_3e_61       = $89F2 = 35314          stack.asm:58
define_72_3e_61_62    = $8A13 = 35347          stack.asm:115
define_72_3e_62       = $8A02 = 35330          stack.asm:86
define_73_77_61_70    = $89C2 = 35266          register.asm:16
define_78_6f_72       = $8770 = 34672          binary.asm:162
end_21                = $891E = 35102          memory.asm:24
end_2b                = $8752 = 34642          binary.asm:108
end_2b_2b             = $8A31 = 35377          unary.asm:50
end_2b_2b_2b          = $8A39 = 35385          unary.asm:65
end_2d_2d             = $8A22 = 35362          unary.asm:21
end_2d_2d_2d          = $8A2A = 35370          unary.asm:36
end_31_36_2a          = $8A7C = 35452          unary.asm:168
end_32_2a             = $8A61 = 35425          unary.asm:126
end_32_2f             = $8A86 = 35462          unary.asm:183
end_34_2a             = $8A69 = 35433          unary.asm:139
end_34_2f             = $8A94 = 35476          unary.asm:198
end_38_2a             = $8A72 = 35442          unary.asm:153
end_3b                = $8967 = 35175          miscellany.asm:33
end_40                = $8928 = 35112          memory.asm:41
end_61_3e_62          = $89D0 = 35280          register.asm:36
end_61_3e_72          = $89F1 = 35313          stack.asm:51
end_61_62_3e_72       = $8A12 = 35346          stack.asm:108
end_62_3e_61          = $89D8 = 35288          register.asm:50
end_62_3e_72          = $8A01 = 35329          stack.asm:79
end_62_72_65_61_6b    = $89C1 = 35265          miscellany.asm:151
end_62_73_77_61_70    = $8AA6 = 35494          unary.asm:226
end_63_21             = $893B = 35131          memory.asm:73
end_63_40             = $8944 = 35140          memory.asm:88
end_70_21             = $8958 = 35160          memory.asm:118
end_70_6f_70          = $89E9 = 35305          stack.asm:36
end_70_75_73_68       = $89E0 = 35296          stack.asm:22
end_72_3e_61          = $89F9 = 35321          stack.asm:64
end_72_3e_61_62       = $8A1B = 35355          stack.asm:122
end_72_3e_62          = $8A09 = 35337          stack.asm:92
end_73_77_61_70       = $89C8 = 35272          register.asm:21
start_21              = $891A = 35098          memory.asm:19
start_2b              = $8751 = 34641          binary.asm:106
start_2b_2b           = $8A30 = 35376          unary.asm:48
start_2b_2b_2b        = $8A37 = 35383          unary.asm:62
start_2d_2d           = $8A21 = 35361          unary.asm:19
start_2d_2d_2d        = $8A28 = 35368          unary.asm:33
start_31_36_2a        = $8A78 = 35448          unary.asm:163
start_32_2a           = $8A60 = 35424          unary.asm:124
start_32_2f           = $8A82 = 35458          unary.asm:180
start_34_2a           = $8A67 = 35431          unary.asm:136
start_34_2f           = $8A8C = 35468          unary.asm:193
start_38_2a           = $8A6F = 35439          unary.asm:149
start_3b              = $8966 = 35174          miscellany.asm:31
start_40              = $8924 = 35108          memory.asm:36
start_61_3e_62        = $89CE = 35278          register.asm:33
start_61_3e_72        = $89F0 = 35312          stack.asm:49
start_61_62_3e_72     = $8A10 = 35344          stack.asm:105
start_62_3e_61        = $89D6 = 35286          register.asm:47
start_62_3e_72        = $8A00 = 35328          stack.asm:77
start_62_72_65_61_6b  = $89BF = 35263          miscellany.asm:149
start_62_73_77_61_70  = $8AA3 = 35491          unary.asm:222
start_63_21           = $893A = 35130          memory.asm:71
start_63_40           = $8941 = 35137          memory.asm:85
start_70_21           = $8954 = 35156          memory.asm:114
start_70_6f_70        = $89E7 = 35303          stack.asm:33
start_70_75_73_68     = $89DF = 35295          stack.asm:20
start_72_3e_61        = $89F8 = 35320          stack.asm:62
start_72_3e_61_62     = $8A19 = 35353          stack.asm:119
start_72_3e_62        = $8A08 = 35336          stack.asm:90
start_73_77_61_70     = $89C7 = 35271          register.asm:19


total time: 0.0106 sec.
no errors
