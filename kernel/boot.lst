              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-28 18:51:33
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	M7 Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 4689    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: DD01    			db 		$DD,$01
              	
800C: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
8010: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8012: CDC686  			call 	PAGEInitialise
              	
8015: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8017: CD0785  			call 	GFXMode
              	
801A: 3A5489  			ld 		a,(BootPage)						; switch to boot page.
801D: CDC686  			call 	PAGEInitialise
8020: DD2A5289			ld 		ix,(BootAddress)					; start address
8024: 210000  			ld 		hl,0								; zero AB registers
8027: 110000  			ld 		de,0
802A: 225689  			ld 		(Parameter),hl 						; clear parameter
802D: DDE9    			jp 		(ix) 								; and execute.
              	
802F:         	StopDefault:	
802F: C32F80  			jp 		StopDefault
              	
8032: C9      			ret
              			
              			include "includes.asm"						; the included sources picked up by processcore.py
              		include "components/console/drivers/screen48k.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		28th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8033:         	GFXInitialise48k:
8033: F5      			push 	af 									; save registers
8034: C5      			push 	bc
              	
8035: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8038: 3E00    			ld 		a,0 								; disable Layer 2
803A: ED79    			out 	(c),a
803C: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8040: 210040  			ld 		hl,$4000 							; clear pixel memory
8043: 3600    	__cs1:	ld 		(hl),0
8045: 23      			inc 	hl
8046: 7C      			ld 		a,h
8047: FE58    			cp 		$58
8049: 20F8    			jr 		nz,__cs1
804B: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
804D: 23      			inc 	hl
804E: 7C      			ld 		a,h
804F: FE5B    			cp 		$5B
8051: 20F8    			jr 		nz,__cs2	
8053: AF      			xor 	a 									; border off
8054: D3FE    			out 	($FE),a
8056: C1      			pop 	bc
8057: F1      			pop 	af
8058: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
805B: 115F80  			ld 		de,GFXPrintCharacter48k
805E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
805F:         	GFXPrintCharacter48k:
805F: F5      			push 	af 									; save registers
8060: C5      			push 	bc
8061: D5      			push 	de
8062: E5      			push 	hl
              	
8063: 43      			ld 		b,e 								; character in B
8064: 7C      			ld 		a,h 								; check range.
8065: FE03    			cp 		3
8067: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8069: E5      			push 	hl 									; save position.
806A: 7C      			ld 		a,h
806B: C658    			add 	$58
806D: 67      			ld 		h,a
              	
806E: 7A      			ld 		a,d 								; get current colour
806F: E607    			and 	7  									; mask 0..2
8071: F640    			or 		$40  								; make bright
8073: 77      			ld 		(hl),a 								; store it.	
8074: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8075: D5      			push 	de
8076: EB      			ex 		de,hl
8077: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8078: 7A      			ld 		a,d
8079: E603    			and 	3
807B: 87      			add 	a,a
807C: 87      			add 	a,a
807D: 87      			add 	a,a
807E: F640    			or 		$40
8080: 67      			ld 		h,a
8081: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8082: E5      			push 	hl
8083: 78      			ld 		a,b 								; get character
8084: E67F    			and 	$7F 								; bits 0-6 only.
8086: D620    			sub 	32
8088: 6F      			ld 		l,a 								; put in HL
8089: 2600    			ld 		h,0
808B: 29      			add 	hl,hl 								; x 8
808C: 29      			add 	hl,hl
808D: 29      			add 	hl,hl
808E: ED5B6A89			ld 		de,(SIFontBase) 					; add the font base.
8092: 19      			add 	hl,de
8093: EB      			ex 		de,hl 								; put in DE (font address)
8094: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8095: 78      			ld 		a,b
8096: 0608    			ld 		b,8 								; copy 8 characters
8098: 0E00    			ld 		c,0 								; XOR value 0
809A: CB7F    			bit 	7,a 								; is the character reversed
809C: 2801    			jr 		z,__ZXWCCopy
809E: 0D      			dec 	c 									; C is the XOR mask now $FF
809F:         	__ZXWCCopy:
809F: 1A      			ld 		a,(de)								; get font data
80A0: A9      			xor 	c 									; xor with reverse
80A1: 77      			ld 		(hl),a 								; write back
80A2: 24      			inc 	h 									; bump pointers
80A3: 13      			inc 	de
80A4: 10F9    			djnz 	__ZXWCCopy 							; do B times.
80A6:         	__ZXWCExit:
80A6: E1      			pop 	hl 									; restore and exit
80A7: D1      			pop 	de
80A8: C1      			pop 	bc
80A9: F1      			pop 	af
80AA: C9      			ret
              		include "components/console/drivers/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		28th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
80AB:         	GFXInitialiseLayer2:
80AB: F5      			push 	af
80AC: C5      			push 	bc
80AD: D5      			push 	de
80AE: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
80B2: 1E02    			ld 		e,2 								; 3 banks to erase
80B4:         	L2PClear:
80B4: 7B      			ld 		a,e 								; put bank number in bits 6/7
80B5: CB0F    			rrc 	a
80B7: CB0F    			rrc 	a
80B9: F603    			or 		2+1 								; shadow on, visible, enable write paging
80BB: 013B12  			ld 		bc,$123B 							; out to layer 2 port
80BE: ED79    			out 	(c),a
80C0: 210040  			ld 		hl,$4000 							; erase the bank to $00 
80C3:         	L2PClearBank: 										; assume default palette :)
80C3: 2B      			dec 	hl
80C4: 3600    			ld 		(hl),$00
80C6: 7C      			ld 		a,h
80C7: B5      			or 		l
80C8: 20F9    			jr		nz,L2PClearBank
80CA: 1D      			dec 	e
80CB: F2B480  			jp 		p,L2PClear
              	
80CE: AF      			xor 	a
80CF: D3FE    			out 	($FE),a
              	
80D1: D1      			pop 	de
80D2: C1      			pop 	bc
80D3: F1      			pop 	af
80D4: 212018  			ld 		hl,$1820 							; still 32 x 24 	
80D7: 11DB80  			ld 		de,GFXPrintCharacterLayer2
80DA: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
80DB:         	GFXPrintCharacterLayer2:
80DB: F5      			push 	af
80DC: C5      			push 	bc
80DD: D5      			push 	de
80DE: E5      			push 	hl
80DF: DDE5    			push 	ix
              	
80E1: 43      			ld 		b,e 								; save A temporarily
80E2: 78      			ld 		a,b
80E3: E67F    			and 	$7F
80E5: FE20    			cp 		32
80E7: 3872    			jr 		c,__L2Exit 							; check char in range
80E9: 7C      			ld 		a,h
80EA: FE03    			cp 		3
80EC: 306D    			jr 		nc,__L2Exit 						; check position in range
80EE: 78      			ld 		a,b
              	
80EF: F5      			push 	af 	
80F0: AF      			xor 	a 									; convert colour in C to palette index
80F1: CB42    			bit 	0,d 								; (assumes standard palette)
80F3: 2802    			jr 		z,__L2Not1
80F5: F603    			or 		$03
80F7:         	__L2Not1:
80F7: CB52    			bit 	2,d
80F9: 2802    			jr 		z,__L2Not2
80FB: F61C    			or 		$1C
80FD:         	__L2Not2:
80FD: CB4A    			bit 	1,d
80FF: 2802    			jr 		z,__L2Not3
8101: F6C0    			or 		$C0
8103:         	__L2Not3:
8103: 4F      			ld 		c,a 								; C is foreground
8104: 0600    			ld 		b,0									; B is xor flipper, initially zero
8106: F1      			pop 	af 									; restore char
              	
8107: E5      			push 	hl
8108: CB7F    			bit 	7,a 								; adjust background bit on bit 7
810A: 2802    			jr 		z,__L2NotCursor
810C: 06FF    			ld 		b,$FF 								; light grey is cursor
810E:         	__L2NotCursor:
810E: E67F    			and 	$7F 								; offset from space
8110: D620    			sub 	$20
8112: 6F      			ld 		l,a 								; put into HL
8113: 2600    			ld 		h,0
8115: 29      			add 	hl,hl 								; x 8
8116: 29      			add 	hl,hl
8117: 29      			add 	hl,hl
              	
8118: E5      			push 	hl 									; transfer to IX
8119: DDE1    			pop 	ix
811B: E1      			pop 	hl
              	
811C: C5      			push 	bc 									; add the font base to it.
811D: ED4B6A89			ld 		bc,(SIFontBase)
8121: DD09    			add 	ix,bc
8123: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8124: C5      			push 	bc
8125: 7C      			ld  	a,h 								; this is the page number.
8126: CB0F    			rrc 	a
8128: CB0F    			rrc 	a
812A: E6C0    			and 	$C0 								; in bits 6 & 7
812C: F603    			or 		$03 								; shadow on, visible, enable write pagin.
812E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8131: ED79    			out 	(c),a
8133: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8134: EB      			ex 		de,hl
8135: 6B      			ld 		l,e
8136: 2600    			ld 		h,0
8138: 29      			add 	hl,hl 								
8139: 29      			add 	hl,hl
813A: 29      			add 	hl,hl
813B: CB24    			sla 	h
813D: CB24    			sla 	h
813F: CB24    			sla 	h
              	
8141: 1E08    			ld 		e,8 								; do 8 rows
8143:         	__L2Outer:
8143: E5      			push 	hl 									; save start
8144: 1608    			ld 		d,8 								; do 8 columns
8146: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8149: A8      			xor 	b 									; maybe flip it ?
814A: DD23    			inc 	ix
814C:         	__L2Loop:
814C: 3600    			ld 		(hl),0 								; background
814E: 87      			add 	a,a 								; shift pattern left
814F: 3001    			jr 		nc,__L2NotSet
8151: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8152:         	__L2NotSet:
8152: 23      			inc 	hl
8153: 15      			dec 	d 									; do a row
8154: 20F6    			jr 		nz,	__L2Loop
8156: E1      			pop 	hl 									; restore, go 256 bytes down.
8157: 24      			inc 	h
8158: 1D      			dec 	e 									; do 8 rows
8159: 20E8    			jr 		nz,__L2Outer	
815B:         	__L2Exit:
815B: DDE1    			pop 	ix
815D: E1      			pop 	hl
815E: D1      			pop 	de
815F: C1      			pop 	bc
8160: F1      			pop 	af
8161: C9      			ret
              		include "components/console/drivers/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		28th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8162:         	GFXInitialiseLowRes:
8162: F5      			push 	af
8163: C5      			push 	bc
8164: D5      			push 	de
              	
8165: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8169: AF      			xor 	a 									; layer 2 off.
816A: 013B12  			ld 		bc,$123B 							; out to layer 2 port
816D: ED79    			out 	(c),a
              	
816F: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8172: 110060  			ld 		de,$6000
8175:         	LowClearScreen: 									; assume default palette :)
8175: AF      			xor 	a
8176: 77      			ld 		(hl),a
8177: 12      			ld 		(de),a
8178: 23      			inc 	hl
8179: 13      			inc 	de
817A: 7C      			ld 		a,h
817B: FE58    			cp 		$58
817D: 20F6    			jr		nz,LowClearScreen
817F: AF      			xor 	a
8180: D3FE    			out 	($FE),a
8182: D1      			pop 	de
8183: C1      			pop 	bc
8184: F1      			pop 	af
8185: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8188: 118C81  			ld 		de,GFXPrintCharacterLowRes
818B: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
818C:         	GFXPrintCharacterLowRes:
818C: F5      			push 	af
818D: C5      			push 	bc
818E: D5      			push 	de
818F: E5      			push 	hl
8190: DDE5    			push 	ix
              	
8192: 43      			ld 		b,e 								; save character in B
8193: 7B      			ld 		a,e
8194: E67F    			and 	$7F
8196: FE20    			cp 		32
8198: 3866    			jr 		c,__LPExit
              	
819A: 29      			add 	hl,hl
819B: 29      			add 	hl,hl
819C: 7C      			ld	 	a,h 								; check in range 192*4 = 768
819D: FE03    			cp 		3
819F: 305F    			jr 		nc,__LPExit
              	
81A1: 7A      			ld 		a,d 								; only lower 3 bits of colour
81A2: E607    			and 	7
81A4: 4F      			ld 		c,a 								; C is foreground
              	
81A5: E5      			push 	hl
81A6: 78      			ld 		a,b 								; get char back
81A7: 0600    			ld 		b,0 								; B = no flip colour.
81A9: CB7F    			bit 	7,a
81AB: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
81AD: 05      			dec 	b
81AE:         	__LowNotReverse:
81AE: E67F    			and 	$7F 								; offset from space
81B0: D620    			sub 	$20
81B2: 6F      			ld 		l,a 								; put into HL
81B3: 2600    			ld 		h,0
81B5: 29      			add 	hl,hl 								; x 8
81B6: 29      			add 	hl,hl
81B7: 29      			add 	hl,hl
              	
81B8: E5      			push 	hl 									; transfer to IX
81B9: DDE1    			pop 	ix
              	
81BB: C5      			push 	bc 									; add the font base to it.
81BC: ED4B6A89			ld 		bc,(SIFontBase)
81C0: DD09    			add 	ix,bc
81C2: C1      			pop 	bc
81C3: E1      			pop 	hl
81C4: EB      			ex 		de,hl
81C5: 7B      			ld 		a,e 								; put DE => HL
81C6: E6C0    			and 	192 								; these are part of Y
81C8: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
81C9: 62      			ld 		h,d		
81CA: 29      			add 	hl,hl
81CB: 29      			add 	hl,hl
81CC: 29      			add 	hl,hl
81CD: 29      			add 	hl,hl
81CE: CBF4    			set 	6,h 								; put into $4000 range
              	
81D0: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
81D2: A3      			and 	e 									; and with E, gives X position
81D3: 87      			add 	a,a 								; now multiplied by 8.
81D4: 5F      			ld 		e,a 								; DE is x offset.
81D5: 1600    			ld 		d,0  
              	
81D7: 19      			add 	hl,de
81D8: 7C      			ld 		a,h
81D9: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
81DB: 3804    			jr 		c,__LowNotLower2
81DD: 110008  			ld 		de,$0800
81E0: 19      			add 	hl,de
81E1:         	__LowNotLower2:
81E1: 1E08    			ld 		e,8 								; do 8 rows
81E3:         	__LowOuter:
81E3: E5      			push 	hl 									; save start
81E4: 1608    			ld 		d,8 								; do 8 columns
81E6: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
81E9: A8      			xor 	b
81EA: DD23    			inc 	ix
81EC:         	__LowLoop:
81EC: 3600    			ld 		(hl),0 								; background
81EE: 87      			add 	a,a 								; shift pattern left
81EF: 3001    			jr 		nc,__LowNotSet
81F1: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
81F2:         	__LowNotSet:
81F2: 2C      			inc 	l
81F3: 15      			dec 	d 									; do a row
81F4: 20F6    			jr 		nz,	__LowLoop
81F6: E1      			pop 	hl 									; restore, go 256 bytes down.
81F7: D5      			push 	de
81F8: 118000  			ld 		de,128
81FB: 19      			add 	hl,de
81FC: D1      			pop 	de
81FD: 1D      			dec 	e 									; do 8 rows
81FE: 20E3    			jr 		nz,__LowOuter	
8200:         	__LPExit:
8200: DDE1    			pop 	ix
8202: E1      			pop 	hl
8203: D1      			pop 	de
8204: C1      			pop 	bc
8205: F1      			pop 	af
8206: C9      			ret
              	
              		include "components/console/font.asm"
8207:         	AlternateFont:
8207: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
820B: 00000000	
820F: 0C1E1E0C	
8213: 0C000C00	
8217: 36360000	
821B: 00000000	
821F: 36367F36	
8223: 7F363600	
8227: 183E603C	
822B: 067C1800	
822F: 0063660C	
8233: 18336300	
8237: 1C361C3B	
823B: 6E663B00	
823F: 30306000	
8243: 00000000	
8247: 0C183030	
824B: 30180C00	
824F: 30180C0C	
8253: 0C183000	
8257: 00331E7F	
825B: 1E330000	
825F: 0018187E	
8263: 18180000	
8267: 00000000	
826B: 00181830	
826F: 0000007E	
8273: 00000000	
8277: 00000000	
827B: 00181800	
827F: 03060C18	
8283: 30604000	
8287: 3E63676F	
828B: 7B733E00	
828F: 18381818	
8293: 18187E00	
8297: 3C66061C	
829B: 30667E00	
829F: 3C66061C	
82A3: 06663C00	
82A7: 0E1E3666	
82AB: 7F060F00	
82AF: 7E607C06	
82B3: 06663C00	
82B7: 1C30607C	
82BB: 66663C00	
82BF: 7E66060C	
82C3: 18181800	
82C7: 3C66663C	
82CB: 66663C00	
82CF: 3C66663E	
82D3: 060C3800	
82D7: 00181800	
82DB: 00181800	
82DF: 00181800	
82E3: 00181830	
82E7: 0C183060	
82EB: 30180C00	
82EF: 00007E00	
82F3: 007E0000	
82F7: 30180C06	
82FB: 0C183000	
82FF: 3C66060C	
8303: 18001800	
8307: 3E636F6F	
830B: 6F603C00	
830F: 183C6666	
8313: 7E666600	
8317: 7E33333E	
831B: 33337E00	
831F: 1E336060	
8323: 60331E00	
8327: 7C363333	
832B: 33367C00	
832F: 7F31343C	
8333: 34317F00	
8337: 7F31343C	
833B: 34307800	
833F: 1E336060	
8343: 67331F00	
8347: 6666667E	
834B: 66666600	
834F: 3C181818	
8353: 18183C00	
8357: 0F060606	
835B: 66663C00	
835F: 7333363C	
8363: 36337300	
8367: 78303030	
836B: 31337F00	
836F: 63777F7F	
8373: 6B636300	
8377: 63737B6F	
837B: 67636300	
837F: 1C366363	
8383: 63361C00	
8387: 7E33333E	
838B: 30307800	
838F: 3C666666	
8393: 6E3C0E00	
8397: 7E33333E	
839B: 36337300	
839F: 3C667038	
83A3: 0E663C00	
83A7: 7E5A1818	
83AB: 18183C00	
83AF: 66666666	
83B3: 66667E00	
83B7: 66666666	
83BB: 663C1800	
83BF: 6363636B	
83C3: 7F776300	
83C7: 6363361C	
83CB: 1C366300	
83CF: 6666663C	
83D3: 18183C00	
83D7: 7F63460C	
83DB: 19337F00	
83DF: 3C303030	
83E3: 30303C00	
83E7: 6030180C	
83EB: 06030100	
83EF: 3C0C0C0C	
83F3: 0C0C3C00	
83F7: 081C3663	
83FB: 00000000	
83FF: 00000000	
8403: 0000007F	
8407: 18180C00	
840B: 00000000	
840F: 00003C06	
8413: 3E663B00	
8417: 7030303E	
841B: 33336E00	
841F: 00003C66	
8423: 60663C00	
8427: 0E06063E	
842B: 66663B00	
842F: 00003C66	
8433: 7E603C00	
8437: 1C363078	
843B: 30307800	
843F: 00003B66	
8443: 663E067C	
8447: 7030363B	
844B: 33337300	
844F: 18003818	
8453: 18183C00	
8457: 06000606	
845B: 0666663C	
845F: 70303336	
8463: 3C367300	
8467: 38181818	
846B: 18183C00	
846F: 0000667F	
8473: 7F6B6300	
8477: 00007C66	
847B: 66666600	
847F: 00003C66	
8483: 66663C00	
8487: 00006E33	
848B: 333E3078	
848F: 00003B66	
8493: 663E060F	
8497: 00006E3B	
849B: 33307800	
849F: 00003E60	
84A3: 3C067C00	
84A7: 08183E18	
84AB: 181A0C00	
84AF: 00006666	
84B3: 66663B00	
84B7: 00006666	
84BB: 663C1800	
84BF: 0000636B	
84C3: 7F7F3600	
84C7: 00006336	
84CB: 1C366300	
84CF: 00006666	
84D3: 663E067C	
84D7: 00007E4C	
84DB: 18327E00	
84DF: 0E181870	
84E3: 18180E00	
84E7: 0C0C0C00	
84EB: 0C0C0C00	
84EF: 7018180E	
84F3: 18187000	
84F7: 3B6E0000	
84FB: 00000000	
84FF: 00...   	
              	
              		include "components/console/graphics.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		28th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
8507:         	GFXMode:
8507: C5      			push 	bc
8508: D5      			push 	de
8509: E5      			push 	hl
850A: 7D      			ld 		a,l 								; save new mode.
850B: 326689  			ld 		(SIScreenMode),a
850E: 2D      			dec 	l 									; L = 1 mode layer2
850F: 2808    			jr 		z,__GFXLayer2
8511: 2D      			dec 	l
8512: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8514: CD3380  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
8517: 1808    			jr 		__GFXConfigure
              	
8519:         	__GFXLayer2:
8519: CDAB80  			call 	GFXInitialiseLayer2
851C: 1803    			jr 		__GFXConfigure
              	
851E:         	__GFXLowRes:
851E: CD6281  			call 	GFXInitialiseLowRes
              	
8521:         	__GFXConfigure:
8521: 7D      			ld 		a,l 								; save screen size
8522: 325A89  			ld 		(SIScreenWidth),a
8525: 7C      			ld 		a,h
8526: 325E89  			ld 		(SIScreenHeight),a
8529: EB      			ex 		de,hl 								; save driver
852A: 226C89  			ld 		(SIScreenDriver),hl
              	
852D: 6A      			ld 		l,d 								; put sizes in HL DE
852E: 2600    			ld 		h,0
8530: 1600    			ld 		d,0
8532: CDAC86  			call 	MULTMultiply16 						; multiply to get size and store.
8535: 226289  			ld 		(SIScreenSize),hl
              	
8538: E1      			pop 	hl
8539: D1      			pop 	de
853A: C1      			pop 	bc
853B: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
853C:         	GFXWriteCharacter:
853C: F5      			push 	af
853D: C5      			push 	bc
853E: D5      			push 	de
853F: E5      			push 	hl
8540: 014A85  			ld 		bc,__GFXWCExit
8543: C5      			push 	bc
8544: ED4B6C89			ld 		bc,(SIScreenDriver)
8548: C5      			push 	bc
8549: C9      			ret
854A:         	__GFXWCExit:
854A: E1      			pop 	hl
854B: D1      			pop 	de
854C: C1      			pop 	bc
854D: F1      			pop 	af
854E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
854F:         	GFXWriteHexWord:
854F: 3E05    			ld 		a,5
8551:         	GFXWriteHexWordA:
8551: C5      			push 	bc
8552: D5      			push 	de
8553: E5      			push 	hl
8554: 4F      			ld 		c,a
8555: 7A      			ld 		a,d
8556: D5      			push 	de
8557: CD6385  			call 	__GFXWHByte
855A: D1      			pop 	de
855B: 7B      			ld 		a,e
855C: CD6385  			call	__GFXWHByte
855F: E1      			pop 	hl
8560: D1      			pop 	de
8561: C1      			pop 	bc
8562: C9      			ret
              	
8563:         	__GFXWHByte:
8563: F5      			push 	af
8564: CB0F    			rrc 	a
8566: CB0F    			rrc		a
8568: CB0F    			rrc 	a
856A: CB0F    			rrc 	a
856C: CD7085  			call 	__GFXWHNibble
856F: F1      			pop 	af
8570:         	__GFXWHNibble:
8570: 51      			ld 		d,c
8571: E60F    			and 	15
8573: FE0A    			cp 		10
8575: 3802    			jr 		c,__GFXWHDigit
8577: C607    			add		a,7
8579:         	__GFXWHDigit:
8579: C630    			add 	a,48
857B: 5F      			ld 		e,a
857C: CD3C85  			call 	GFXWriteCharacter
857F: 23      			inc 	hl
8580: C9      			ret
              		include "components/console/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		27th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8581:         	IOScanKeyboard:
8581: C5      			push 	bc
8582: D5      			push 	de
8583: E5      			push 	hl
              	
8584: 21D685  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8587: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8589: 06FE    			ld 		b,$FE
858B: ED78    			in 		a,(c)
858D: CB47    			bit 	0,a
858F: 2005    			jr 		nz,__kr1
8591: 21FE85  			ld 		hl,__kr_shift_table
8594: 180B    			jr 		__kr2
8596:         	__kr1:
8596: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8598: ED78    			in 		a,(c)
859A: CB4F    			bit 	1,a
859C: 2003    			jr 		nz,__kr2
859E: 212686  			ld 		hl,__kr_symbol_shift_table
85A1:         	__kr2:
              	
85A1: 1EFE    			ld 		e,$FE 								; scan pattern.
85A3: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
85A4: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
85A6: FEFE    			cp 		$FE
85A8: 2808    			jr 		z,___kr4
85AA: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
85AC: FE7F    			cp 		$7F
85AE: 2802    			jr 		z,___kr4
85B0: 161F    			ld 		d,$01F 								; check all bits.
85B2:         	___kr4:
85B2: 43      			ld 		b,e 								; scan the keyboard
85B3: 0EFE    			ld 		c,$FE
85B5: ED78    			in 		a,(c)
85B7: 2F      			cpl 										; make that active high.
85B8: A2      			and 	d  									; and with check value.
85B9: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
85BB: 23      			inc 	hl 									; next set of keyboard characters
85BC: 23      			inc 	hl
85BD: 23      			inc 	hl
85BE: 23      			inc 	hl
85BF: 23      			inc 	hl
              	
85C0: 7B      			ld 		a,e 								; get pattern
85C1: 87      			add 	a,a 								; shift left
85C2: F601    			or 		1 									; set bit 1.
85C4: 5F      			ld 		e,a
              	
85C5: FEFF    			cp 		$FF 								; finished when all 1's.
85C7: 20DA    			jr 		nz,__kr3 
85C9: AF      			xor 	a
85CA: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
85CC:         	__kr_keypressed:
85CC: 23      			inc 	hl  								; shift right until carry set
85CD: 1F      			rra
85CE: 30FC    			jr 		nc,__kr_keypressed
85D0: 2B      			dec 	hl 									; undo the last inc hl
85D1: 7E      			ld 		a,(hl) 								; get the character number.
85D2:         	__kr_exit:
85D2: E1      			pop 	hl
85D3: D1      			pop 	de
85D4: C1      			pop 	bc
85D5: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
85D6:         	__kr_no_shift_table:
85D6: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
85DA: 76617364	
85DE: 6667    	
85E0: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
85E4: 74313233	
85E8: 3435    	
85EA: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
85EE: 36706F69	
85F2: 7579    	
85F4: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
85F8: 6820006D	
85FC: 6E62    	
              	
85FE:         	__kr_shift_table:
85FE: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8602: 2F7E7C5C	
8606: 7B7D    	
8608: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
860C: 3E214023	
8610: 2425    	
8612: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8616: 26223B00	
861A: 5D5B    	
861C: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8620: 5E20002E	
8624: 2C2A    	
              	
8626:         	__kr_symbol_shift_table:
8626: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
862A: 2F7E7C5C	
862E: 7B7D    	
8630: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8634: 3E101112	
8638: 1314    	
863A: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
863E: 15223B00	
8642: 5D5B    	
8644: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8648: 5E20002E	
864C: 2C2A    	
              		include "components/core/divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		28th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
864E:         	DIVDivideMod16:
              	
864E: C5      		push 	bc
864F: 42      		ld 		b,d 				; DE 
8650: 4B      		ld 		c,e
8651: EB      		ex 		de,hl
8652: 210000  		ld 		hl,0
8655: 78      		ld 		a,b
8656: 0608    		ld 		b,8
8658:         	Div16_Loop1:
8658: 17      		rla
8659: ED6A    		adc 	hl,hl
865B: ED52    		sbc 	hl,de
865D: 3001    		jr 		nc,Div16_NoAdd1
865F: 19      		add 	hl,de
8660:         	Div16_NoAdd1:
8660: 10F6    		djnz 	Div16_Loop1
8662: 17      		rla
8663: 2F      		cpl
8664: 47      		ld 		b,a
8665: 79      		ld 		a,c
8666: 48      		ld 		c,b
8667: 0608    		ld 		b,8
8669:         	Div16_Loop2:
8669: 17      		rla
866A: ED6A    		adc 	hl,hl
866C: ED52    		sbc 	hl,de
866E: 3001    		jr 		nc,Div16_NoAdd2
8670: 19      		add 	hl,de
8671:         	Div16_NoAdd2:
8671: 10F6    		djnz 	Div16_Loop2
8673: 17      		rla
8674: 2F      		cpl
8675: 51      		ld 		d,c
8676: 5F      		ld 		e,a
8677: C1      		pop 	bc
8678: C9      		ret
              			
              			
              		include "components/core/farmemory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		28th January 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8679:         	FARCompileByte:
8679: F5      			push 	af 									; save byte and HL
867A: E5      			push 	hl
867B: F5      			push 	af 									; save byte
867C: 3A4889  			ld		a,(HerePage) 						; switch to page
867F: CDD886  			call 	PAGESwitch
8682: 2A4689  			ld 		hl,(Here) 							; write to memory location
8685: F1      			pop 	af
8686: 77      			ld 		(hl),a
8687: 23      			inc 	hl 									; bump memory location
8688: 224689  			ld 		(Here),hl 							; write back
868B: CDF186  			call 	PAGERestore
868E: E1      			pop 	hl 									; restore and exit
868F: F1      			pop 	af
8690: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8691:         	FARCompileWord:
8691: F5      			push 	af 									; save byte and HL
8692: D5      			push 	de
8693: E5      			push 	hl
8694: EB      			ex 		de,hl 								; word into DE
8695: 3A4889  			ld		a,(HerePage) 						; switch to page
8698: CDD886  			call 	PAGESwitch
869B: 2A4689  			ld 		hl,(Here) 							; write to memory location
869E: 73      			ld 		(hl),e
869F: 23      			inc 	hl 	
86A0: 72      			ld 		(hl),d
86A1: 23      			inc 	hl
86A2: 224689  			ld 		(Here),hl 							; write back
86A5: CDF186  			call 	PAGERestore
86A8: E1      			pop 	hl
86A9: D1      			pop 	de 									; restore and exit
86AA: F1      			pop 	af
86AB: C9      			ret
              		include "components/core/multiply.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		28th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
86AC:         	MULTMultiply16:
86AC: C5      			push 	bc
86AD: D5      			push 	de
86AE: 44      			ld 		b,h 							; get multipliers in DE/BC
86AF: 4D      			ld 		c,l
86B0: 210000  			ld 		hl,0 							; zero total
86B3:         	__Core__Mult_Loop:
86B3: CB41    			bit 	0,c 							; lsb of shifter is non-zero
86B5: 2801    			jr 		z,__Core__Mult_Shift
86B7: 19      			add 	hl,de 							; add adder to total
86B8:         	__Core__Mult_Shift:
86B8: CB38    			srl 	b 								; shift BC right.
86BA: CB19    			rr 		c
86BC: EB      			ex 		de,hl 							; shift DE left
86BD: 29      			add 	hl,hl
86BE: EB      			ex 		de,hl
86BF: 78      			ld 		a,b 							; loop back if BC is nonzero
86C0: B1      			or 		c
86C1: 20F0    			jr 		nz,__Core__Mult_Loop
86C3: D1      			pop 	de
86C4: C1      			pop 	bc
86C5: C9      			ret
              	
              		include "components/core/paging.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		28th January 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
86C6:         	PAGEInitialise:
86C6: E5      			push 	hl
86C7: ED9256  			db 		$ED,$92,$56							; switch to page A
86CA: 3C      			inc 	a
86CB: ED9257  			db 		$ED,$92,$57
86CE: 3D      			dec 	a
86CF: 08      			ex 		af,af' 								; put page in A'
86D0: 217089  			ld 		hl,__PAGEStackBase 					; reset the page stack
86D3: 226E89  			ld 		(__PAGEStackPointer),hl
86D6: E1      			pop 	hl
86D7: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
86D8:         	PAGESwitch:
86D8: F5      			push 	af
86D9: E5      			push 	hl
              	
86DA: F5      			push 	af 									; save A on stack
86DB: 2A6E89  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
86DE: 08      			ex 		af,af'
86DF: 77      			ld 		(hl),a
86E0: 23      			inc 	hl
86E1: 226E89  			ld 		(__PAGEStackPointer),hl
              	
86E4: F1      			pop 	af 									; restore new A
86E5: ED9256  			db 		$ED,$92,$56							; switch to page A
86E8: 3C      			inc 	a
86E9: ED9257  			db 		$ED,$92,$57
86EC: 3D      			dec 	a
86ED: 08      			ex 		af,af' 								; put page in A'
              	
86EE: E1      			pop 	hl
86EF: F1      			pop 	af
86F0: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
86F1:         	PAGERestore:
86F1: F5      			push 	af
86F2: E5      			push 	hl
86F3: 2A6E89  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
86F6: 2B      			dec 	hl
86F7: 7E      			ld 		a,(hl)
86F8: 226E89  			ld 		(__PAGEStackPointer),hl
86FB: ED9256  			db 		$ED,$92,$56							; switch to page A
86FE: 3C      			inc 	a
86FF: ED9257  			db 		$ED,$92,$57
8702: 3D      			dec 	a
8703: 08      			ex 		af,af' 								; update A'
8704: E1      			pop 	hl
8705: F1      			pop 	af
8706: C9      			ret
              					
              		include "temp/binary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Binary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* < word *********
              	
8707:         	define_3c:
8707: CD2F89  		call COMPCompileSelf
870A: 7C      		ld   a,h           ; check if signs different.
870B: AA      		xor  d
870C: 87      		add  a,a          ; CS if different
870D: 3004    		jr   nc,__less_samesign
870F: 7A      		ld   a,d          ; different. set CS to sign of B
8710: 87      		add  a,a          ; if set (negative) B must be < A as A is +ve
8711: 1805    		jr   __less_returnc
8713:         	__less_samesign:
8713: D5      		push  de           ; save DE
8714: EB      		ex   de,hl          ; -1 if B < A
8715: ED52    		sbc  hl,de          ; calculate B - A , hencs CS if < (Carry clear by add a,a)
8717: D1      		pop  de           ; restore DE
8718:         	__less_returnc:
8718: 3E00    		ld   a,0          ; A 0
871A: DE00    		sbc  a,0          ; A $FF if CS.
871C: 6F      		ld   l,a          ; put in HL
871D: 67      		ld   h,a
871E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* = word *********
              	
871F:         	define_3d:
871F: CD2F89  		call COMPCompileSelf
8722: 7C      		ld   a,h          ; H = H ^ D
8723: AA      		xor  d
8724: 67      		ld   h,a
8725: 7D      		ld   a,l          ; A = (L ^ E) | (H ^ D)
8726: AB      		xor  e
8727: B4      		or   h           ; if A == 0 they are the same.
8728: 210000  		ld   hl,$0000         ; return 0 if different
872B: C0      		ret  nz
872C: 2B      		dec  hl           ; return -1
872D: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* - word *********
              	
872E:         	define_2d:
872E: CD2F89  		call COMPCompileSelf
8731: D5      		push  de           ; save DE
8732: EB      		ex   de,hl          ; HL = B, DE = A
8733: AF      		xor  a            ; clear carry
8734: ED52    		sbc  hl,de          ; calculate B-A
8736: D1      		pop  de           ; restore DE
8737: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* * word *********
              	
8738:         	define_2a:
8738: CD2F89  		call COMPCompileSelf
873B: C3AC86  		jp   MULTMultiply16
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* / word *********
              	
873E:         	define_2f:
873E: CD2F89  		call COMPCompileSelf
8741: D5      		push  de
8742: CD4E86  		call  DIVDivideMod16
8745: EB      		ex   de,hl
8746: D1      		pop  de
8747: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* + macro *********
              	
8748:         	define_2b:
8748: CD3A89  		call COMPMacroExpand
874B: 0601    		ld b,end_2b-start_2b
874D:         	start_2b:
874D: 19      		add  hl,de
874E:         	end_2b:
874E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* and word *********
              	
874F:         	define_61_6e_64:
874F: CD2F89  		call COMPCompileSelf
8752: 7C      		ld   a,h
8753: A2      		and  d
8754: 67      		ld   h,a
8755: 7D      		ld   a,l
8756: A3      		and  e
8757: 6F      		ld   l,a
8758: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* mod word *********
              	
8759:         	define_6d_6f_64:
8759: CD2F89  		call COMPCompileSelf
875C: D5      		push  de
875D: CD4E86  		call  DIVDivideMod16
8760: D1      		pop  de
8761: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* or word *********
              	
8762:         	define_6f_72:
8762: CD2F89  		call COMPCompileSelf
8765: 7C      		ld   a,h
8766: B2      		or   d
8767: 67      		ld   h,a
8768: 7D      		ld   a,l
8769: B3      		or   e
876A: 6F      		ld   l,a
876B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* xor word *********
              	
876C:         	define_78_6f_72:
876C: CD2F89  		call COMPCompileSelf
876F: 7C      		ld   a,h
8770: AA      		xor  d
8771: 67      		ld   h,a
8772: 7D      		ld   a,l
8773: AB      		xor  e
8774: 6F      		ld   l,a
8775: C9      		ret
              	
              		include "temp/console.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;  File:  console.src
              	;  Purpose: con.raw words.
              	;  Date :   28th January 2019
              	;  Author:  paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	
              	; ********* con.raw.setmode word *********
              	
8776:         	define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65:
8776: CD2F89  		call COMPCompileSelf
8779: C30785  		jp   GFXMode
              	
              	
              	
              	; ********* con.raw.char! word *********
              	
877C:         	define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21:
877C: CD2F89  		call COMPCompileSelf
877F: C33C85  		jp   GFXWriteCharacter
              	
              	
              	
              	; ********* con.raw.hex! word *********
              	
8782:         	define_63_6f_6e_2e_72_61_77_2e_68_65_78_21:
8782: CD2F89  		call COMPCompileSelf
8785: C34F85  		jp   GFXWriteHexWord
              	
              	
              	
              	; ********* con.raw.inkey word *********
              	
8788:         	define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79:
8788: CD2F89  		call COMPCompileSelf
878B: EB      		ex   de,hl
878C: CD8185  		call  IOScanKeyboard       ; read keyboard
878F: 6F      		ld   l,a
8790: 2600    		ld   h,$00
8792: C9      		ret
              		include "temp/memory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Memory operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ! macro *********
              	
8793:         	define_21:
8793: CD3A89  		call COMPMacroExpand
8796: 0604    		ld b,end_21-start_21
8798:         	start_21:
8798: 73      		ld   (hl),e
8799: 23      		inc  hl
879A: 72      		ld   (hl),d
879B: 2B      		dec  hl
879C:         	end_21:
879C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* @ macro *********
              	
879D:         	define_40:
879D: CD3A89  		call COMPMacroExpand
87A0: 0604    		ld b,end_40-start_40
87A2:         	start_40:
87A2: 7E      		ld   a,(hl)
87A3: 23      		inc  hl
87A4: 66      		ld  h,(hl)
87A5: 6F      		ld  l,a
87A6:         	end_40:
87A6: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +! word *********
              	
87A7:         	define_2b_21:
87A7: CD2F89  		call COMPCompileSelf
87AA: 7E      		ld   a,(hl)
87AB: 83      		add  a,e
87AC: 77      		ld   (hl),a
87AD: 23      		inc  hl
87AE: 7E      		ld   a,(hl)
87AF: 8A      		adc  a,d
87B0: 77      		ld   (hl),a
87B1: 2B      		dec  hl
87B2: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c! macro *********
              	
87B3:         	define_63_21:
87B3: CD3A89  		call COMPMacroExpand
87B6: 0601    		ld b,end_63_21-start_63_21
87B8:         	start_63_21:
87B8: 73      		ld   (hl),e
87B9:         	end_63_21:
87B9: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c@ macro *********
              	
87BA:         	define_63_40:
87BA: CD3A89  		call COMPMacroExpand
87BD: 0603    		ld b,end_63_40-start_63_40
87BF:         	start_63_40:
87BF: 6E      		ld   l,(hl)
87C0: 2600    		ld   h,0
87C2:         	end_63_40:
87C2: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p@ word *********
              	
87C3:         	define_70_40:
87C3: CD2F89  		call COMPCompileSelf
87C6: 42      		ld   b,d
87C7: 4B      		ld   c,e
87C8: ED68    		in   l,(c)
87CA: 2600    		ld   h,0
87CC: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p! macro *********
              	
87CD:         	define_70_21:
87CD: CD3A89  		call COMPMacroExpand
87D0: 0604    		ld b,end_70_21-start_70_21
87D2:         	start_70_21:
87D2: 42      		ld   b,d
87D3: 4B      		ld   c,e
87D4: ED69    		out  (c),l
87D6:         	end_70_21:
87D6: C9      		ret
              		include "temp/miscellany.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   miscellany.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* , word *********
              	
87D7:         	define_2c:
87D7: 00      		nop
87D8: CD2F89  		call COMPCompileSelf
87DB: C39186  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ; macro *********
              	
87DE:         	define_3b:
87DE: 00      		nop
87DF: CD3A89  		call COMPMacroExpand
87E2: 0601    		ld b,end_3b-start_3b
87E4:         	start_3b:
87E4: C9      		ret
87E5:         	end_3b:
87E5: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c, word *********
              	
87E6:         	define_63_2c:
87E6: 00      		nop
87E7: CD2F89  		call COMPCompileSelf
87EA: 7D      		ld   a,l
87EB: C39186  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* param! word *********
              	
87EE:         	define_70_61_72_61_6d_21:
87EE: CD2F89  		call COMPCompileSelf
87F1: 225689  		ld   (Parameter),hl
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* copy word *********
              	
87F4:         	define_63_6f_70_79:
87F4: CD2F89  		call COMPCompileSelf
87F7: ED4B5689		ld   bc,(Parameter)
87FB: 78      		ld   a,b
87FC: B1      		or   c
87FD: C8      		ret  z
              	
87FE: C5      		push  bc          ; BC count
87FF: D5      		push  de          ; DE target
8800: E5      		push  hl          ; HL source
              	
8801: AF      		xor  a          ; Clear C
8802: ED52    		sbc  hl,de         ; check overlap ?
8804: 300B    		jr   nc,__copy_gt_count      ; if source after target
8806: 19      		add  hl,de         ; undo subtract
              	
8807: 09      		add  hl,bc         ; add count to HL + DE
8808: EB      		ex   de,hl
8809: 09      		add  hl,bc
880A: EB      		ex   de,hl
880B: 1B      		dec  de          ; dec them, so now at the last byte to copy
880C: 2B      		dec  hl
880D: EDB8    		lddr           ; do it backwards
880F: 1803    		jr   __copy_exit
              	
8811:         	__copy_gt_count:
8811: 19      		add  hl,de         ; undo subtract
8812: EDB0    		ldir          ; do the copy
8814:         	__copy_exit:
8814: E1      		pop  hl          ; restore registers
8815: D1      		pop  de
8816: C1      		pop  bc
8817: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* fill word *********
              	
8818:         	define_66_69_6c_6c:
8818: CD2F89  		call COMPCompileSelf
881B: ED4B5689		ld   bc,(Parameter)
881F: 78      		ld   a,b         ; exit if C = 0
8820: B1      		or   c
8821: C8      		ret  z
              	
8822: C5      		push  bc          ; BC count
8823: D5      		push  de          ; DE target, L byte
8824:         	__fill_loop:
8824: 7D      		ld   a,l         ; copy a byte
8825: 12      		ld   (de),a
8826: 13      		inc  de          ; bump pointer
8827: 0B      		dec  bc          ; dec counter and loop
8828: 78      		ld   a,b
8829: B1      		or   c
882A: 20F8    		jr   nz,__fill_loop
882C: D1      		pop  de          ; restore
882D: C1      		pop  bc
882E: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* halt word *********
              	
882F:         	define_68_61_6c_74:
882F: 00      		nop
8830: CD2F89  		call COMPCompileSelf
8833:         	__halt_loop:
8833: F3      		di
8834: 76      		halt
8835: 18FC    		jr   __halt_loop
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* break macro *********
              	
8837:         	define_62_72_65_61_6b:
8837: 00      		nop
8838: CD3A89  		call COMPMacroExpand
883B: 0602    		ld b,end_62_72_65_61_6b-start_62_72_65_61_6b
883D:         	start_62_72_65_61_6b:
883D: DD01    		db   $DD,$01
883F:         	end_62_72_65_61_6b:
883F: C9      		ret
              	
              		include "temp/register.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Register manipulation
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* swap macro *********
              	
8840:         	define_73_77_61_70:
8840: CD3A89  		call COMPMacroExpand
8843: 0601    		ld b,end_73_77_61_70-start_73_77_61_70
8845:         	start_73_77_61_70:
8845: EB      		ex   de,hl
8846:         	end_73_77_61_70:
8846: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>b macro *********
              	
8847:         	define_61_3e_62:
8847: CD3A89  		call COMPMacroExpand
884A: 0602    		ld b,end_61_3e_62-start_61_3e_62
884C:         	start_61_3e_62:
884C: 54      		ld   d,h
884D: 5D      		ld   e,l
884E:         	end_61_3e_62:
884E: C9      		ret
              	
              	
              	
              	
              	; ********* b>a macro *********
              	
884F:         	define_62_3e_61:
884F: CD3A89  		call COMPMacroExpand
8852: 0602    		ld b,end_62_3e_61-start_62_3e_61
8854:         	start_62_3e_61:
8854: 62      		ld   h,d
8855: 6B      		ld   l,e
8856:         	end_62_3e_61:
8856: C9      		ret
              	
              		include "temp/stack.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Stack words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* push macro *********
              	
8857:         	define_70_75_73_68:
8857: 00      		nop
8858: CD3A89  		call COMPMacroExpand
885B: 0601    		ld b,end_70_75_73_68-start_70_75_73_68
885D:         	start_70_75_73_68:
885D: E5      		push  hl
885E:         	end_70_75_73_68:
885E: C9      		ret
              	
              	
              	
              	; ********* pop macro *********
              	
885F:         	define_70_6f_70:
885F: 00      		nop
8860: CD3A89  		call COMPMacroExpand
8863: 0602    		ld b,end_70_6f_70-start_70_6f_70
8865:         	start_70_6f_70:
8865: EB      		ex   de,hl
8866: E1      		pop  hl
8867:         	end_70_6f_70:
8867: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>r macro *********
              	
8868:         	define_61_3e_72:
8868: 00      		nop
8869: CD3A89  		call COMPMacroExpand
886C: 0601    		ld b,end_61_3e_72-start_61_3e_72
886E:         	start_61_3e_72:
886E: E5      		push  hl
886F:         	end_61_3e_72:
886F: C9      		ret
              	
              	
              	
              	; ********* r>a macro *********
              	
8870:         	define_72_3e_61:
8870: 00      		nop
8871: CD3A89  		call COMPMacroExpand
8874: 0601    		ld b,end_72_3e_61-start_72_3e_61
8876:         	start_72_3e_61:
8876: E1      		pop  hl
8877:         	end_72_3e_61:
8877: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* b>r macro *********
              	
8878:         	define_62_3e_72:
8878: 00      		nop
8879: CD3A89  		call COMPMacroExpand
887C: 0601    		ld b,end_62_3e_72-start_62_3e_72
887E:         	start_62_3e_72:
887E: D5      		push  de
887F:         	end_62_3e_72:
887F: C9      		ret
              	
              	
              	
              	; ********* r>b macro *********
              	
8880:         	define_72_3e_62:
8880: 00      		nop
8881: CD3A89  		call COMPMacroExpand
8884: 0601    		ld b,end_72_3e_62-start_72_3e_62
8886:         	start_72_3e_62:
8886: D1      		pop  de
8887:         	end_72_3e_62:
8887: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ab>r macro *********
              	
8888:         	define_61_62_3e_72:
8888: 00      		nop
8889: CD3A89  		call COMPMacroExpand
888C: 0602    		ld b,end_61_62_3e_72-start_61_62_3e_72
888E:         	start_61_62_3e_72:
888E: D5      		push  de
888F: E5      		push  hl
8890:         	end_61_62_3e_72:
8890: C9      		ret
              	
              	
              	
              	; ********* r>ab macro *********
              	
8891:         	define_72_3e_61_62:
8891: 00      		nop
8892: CD3A89  		call COMPMacroExpand
8895: 0602    		ld b,end_72_3e_61_62-start_72_3e_61_62
8897:         	start_72_3e_61_62:
8897: E1      		pop  hl
8898: D1      		pop  de
8899:         	end_72_3e_61_62:
8899: C9      		ret
              		include "temp/unary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Unary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* -- macro *********
              	
889A:         	define_2d_2d:
889A: CD3A89  		call COMPMacroExpand
889D: 0601    		ld b,end_2d_2d-start_2d_2d
889F:         	start_2d_2d:
889F: 2B      		dec  hl
88A0:         	end_2d_2d:
88A0: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* --- macro *********
              	
88A1:         	define_2d_2d_2d:
88A1: CD3A89  		call COMPMacroExpand
88A4: 0602    		ld b,end_2d_2d_2d-start_2d_2d_2d
88A6:         	start_2d_2d_2d:
88A6: 2B      		dec  hl
88A7: 2B      		dec  hl
88A8:         	end_2d_2d_2d:
88A8: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ++ macro *********
              	
88A9:         	define_2b_2b:
88A9: CD3A89  		call COMPMacroExpand
88AC: 0601    		ld b,end_2b_2b-start_2b_2b
88AE:         	start_2b_2b:
88AE: 23      		inc  hl
88AF:         	end_2b_2b:
88AF: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +++ macro *********
              	
88B0:         	define_2b_2b_2b:
88B0: CD3A89  		call COMPMacroExpand
88B3: 0602    		ld b,end_2b_2b_2b-start_2b_2b_2b
88B5:         	start_2b_2b_2b:
88B5: 23      		inc  hl
88B6: 23      		inc  hl
88B7:         	end_2b_2b_2b:
88B7: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0- word *********
              	
88B8:         	define_30_2d:
88B8: CD2F89  		call COMPCompileSelf
88BB:         	__negate:
88BB: 7C      		ld   a,h
88BC: 2F      		cpl
88BD: 67      		ld   h,a
88BE: 7D      		ld   a,l
88BF: 2F      		cpl
88C0: 6F      		ld   l,a
88C1: 23      		inc  hl
88C2: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0< word *********
              	
88C3:         	define_30_3c:
88C3: CD2F89  		call COMPCompileSelf
88C6: CB7C    		bit  7,h
88C8: 210000  		ld   hl,$0000
88CB: C8      		ret  z
88CC: 2B      		dec  hl
88CD: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0= word *********
              	
88CE:         	define_30_3d:
88CE: CD2F89  		call COMPCompileSelf
88D1: 7C      		ld   a,h
88D2: B5      		or   l
88D3: 210000  		ld   hl,$0000
88D6: C0      		ret  nz
88D7: 2B      		dec  hl
88D8: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2* macro *********
              	
88D9:         	define_32_2a:
88D9: CD3A89  		call COMPMacroExpand
88DC: 0601    		ld b,end_32_2a-start_32_2a
88DE:         	start_32_2a:
88DE: 29      		add  hl,hl
88DF:         	end_32_2a:
88DF: C9      		ret
              	
              	
              	
              	; ********* 4* macro *********
              	
88E0:         	define_34_2a:
88E0: CD3A89  		call COMPMacroExpand
88E3: 0602    		ld b,end_34_2a-start_34_2a
88E5:         	start_34_2a:
88E5: 29      		add  hl,hl
88E6: 29      		add  hl,hl
88E7:         	end_34_2a:
88E7: C9      		ret
              	
              	
              	
              	; ********* 8* macro *********
              	
88E8:         	define_38_2a:
88E8: CD3A89  		call COMPMacroExpand
88EB: 0603    		ld b,end_38_2a-start_38_2a
88ED:         	start_38_2a:
88ED: 29      		add  hl,hl
88EE: 29      		add  hl,hl
88EF: 29      		add  hl,hl
88F0:         	end_38_2a:
88F0: C9      		ret
              	
              	
              	
              	; ********* 16* macro *********
              	
88F1:         	define_31_36_2a:
88F1: CD3A89  		call COMPMacroExpand
88F4: 0604    		ld b,end_31_36_2a-start_31_36_2a
88F6:         	start_31_36_2a:
88F6: 29      		add  hl,hl
88F7: 29      		add  hl,hl
88F8: 29      		add  hl,hl
88F9: 29      		add  hl,hl
88FA:         	end_31_36_2a:
88FA: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2/ macro *********
              	
88FB:         	define_32_2f:
88FB: CD3A89  		call COMPMacroExpand
88FE: 0604    		ld b,end_32_2f-start_32_2f
8900:         	start_32_2f:
8900: CB2C    		sra  h
8902: CB1D    		rr   l
8904:         	end_32_2f:
8904: C9      		ret
              	
              	
              	
              	; ********* 4/ macro *********
              	
8905:         	define_34_2f:
8905: CD3A89  		call COMPMacroExpand
8908: 0608    		ld b,end_34_2f-start_34_2f
890A:         	start_34_2f:
890A: CB2C    		sra  h
890C: CB1D    		rr   l
890E: CB2C    		sra  h
8910: CB1D    		rr   l
8912:         	end_34_2f:
8912: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* abs word *********
              	
8913:         	define_61_62_73:
8913: CD2F89  		call COMPCompileSelf
8916: CB7C    		bit  7,h
8918: C8      		ret  z
8919: C3BB88  		jp   __negate
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* bswap macro *********
              	
891C:         	define_62_73_77_61_70:
891C: CD3A89  		call COMPMacroExpand
891F: 0603    		ld b,end_62_73_77_61_70-start_62_73_77_61_70
8921:         	start_62_73_77_61_70:
8921: 7D      		ld   a,l
8922: 6C      		ld   l,h
8923: 67      		ld   h,a
8924:         	end_62_73_77_61_70:
8924: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* not word *********
              	
8925:         	define_6e_6f_74:
8925: CD2F89  		call COMPCompileSelf
8928: 7C      		ld   a,h
8929: 2F      		cpl
892A: 67      		ld   h,a
892B: 7D      		ld   a,l
892C: 2F      		cpl
892D: 6F      		ld   l,a
892E: C9      		ret
              		include "temp/wordaction.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   wordaction.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   28th January 2019
              	;  Purpose : Routines that belong to word code
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;       Compile a reference to self.
              	;
              	; ***************************************************************************************
              	
892F:         	COMPCompileSelf:
892F: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8930: 3ECD    		ld  a,$CD         ; call opcode
8932: CD7986  		call  FARCompileByte       ; compile that
8935: CD9186  		call  FARCompileWord       ; compile the address
8938: E1      		pop  hl          ; restore old HL
8939: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;         Compile Macro Code
              	;
              	; ***************************************************************************************
              	
893A:         	COMPMacroExpand:
893A: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
893B: 23      		inc  hl          ; skip over the LD B,xx opcode
893C: 46      		ld   b,(hl)         ; read count
893D:         	__COMPMExLoop:
893D: 23      		inc  hl          ; get next byte to copy
893E: 7E      		ld   a,(hl)
893F: CD7986  		call  FARCompileByte       ; compile that
8942: 10F9    		djnz  __COMPMExLoop      ; do it B times.
8944: E1      		pop  hl          ; restore old HL
8945: C9      		ret
              	
              	
              	
              			include "data.asm"							; data area.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		28th January 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8946:         	SystemInformation:
              	
8946:         	Here:												; +0 	Here 
8946: 8089    			dw 		FreeMemory
8948:         	HerePage: 											; +2	Here.Page
8948: 2A00    			db 		FirstCodePage,0
894A:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
894A: 2C000000			db 		FirstCodePage+2,0,0,0
894E:         	DisplayInfo: 										; +8 	Display information
894E: 5A890000			dw 		DisplayInformation,0		
8952:         	BootAddress:										; +12 	Boot Address
8952: 2F80    			dw 		StopDefault
8954:         	BootPage:											; +14 	Boot Page
8954: 2A00    			db 		FirstCodePage,0
8956:         	Parameter:	 										; +16 	3rd Parameter
8956: 00000000			dw 		0,0		
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
895A:         	DisplayInformation:
              	
895A:         	SIScreenWidth: 										; +0 	screen width
895A: 00000000			db 		0,0,0,0	
895E:         	SIScreenHeight:										; +4 	screen height
895E: 00000000			db 		0,0,0,0
8962:         	SIScreenSize:										; +8 	char size of screen
8962: 00000000			dw 		0,0		
8966:         	SIScreenMode:										; +12 	current mode
8966: 00000000			db 		0,0,0,0
896A:         	SIFontBase:											; font in use
896A: 0782    			dw 		AlternateFont
896C:         	SIScreenDriver:										; Screen Driver
896C: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
896E:         	__PAGEStackPointer: 								; stack used for switching pages
896E: 0000    			dw 		0
8970:         	__PAGEStackBase:
8970: FFFFFFFF			ds 		16
8974: FF...   	
              	
8980:         	FreeMemory:		
              	
              	
8980: FFFFFFFF			org 	$C000
8984: FF...   	
              			include "dictionary.asm" 					; dictionary.
C000: 06      		db 1+5
C001: 20      		db $20
C002: 9387    		dw define_21
C004: 01      		db 1
C005: 21      		db "!"
              	
C006: 06      		db 1+5
C007: 20      		db $20
C008: 3887    		dw define_2a
C00A: 01      		db 1
C00B: 2A      		db "*"
              	
C00C: 06      		db 1+5
C00D: 20      		db $20
C00E: 4887    		dw define_2b
C010: 01      		db 1
C011: 2B      		db "+"
              	
C012: 07      		db 2+5
C013: 20      		db $20
C014: A787    		dw define_2b_21
C016: 02      		db 2
C017: 2B21    		db "+!"
              	
C019: 07      		db 2+5
C01A: 20      		db $20
C01B: A988    		dw define_2b_2b
C01D: 02      		db 2
C01E: 2B2B    		db "++"
              	
C020: 08      		db 3+5
C021: 20      		db $20
C022: B088    		dw define_2b_2b_2b
C024: 03      		db 3
C025: 2B2B2B  		db "+++"
              	
C028: 06      		db 1+5
C029: 20      		db $20
C02A: D787    		dw define_2c
C02C: 01      		db 1
C02D: 2C      		db ","
              	
C02E: 06      		db 1+5
C02F: 20      		db $20
C030: 2E87    		dw define_2d
C032: 01      		db 1
C033: 2D      		db "-"
              	
C034: 07      		db 2+5
C035: 20      		db $20
C036: 9A88    		dw define_2d_2d
C038: 02      		db 2
C039: 2D2D    		db "--"
              	
C03B: 08      		db 3+5
C03C: 20      		db $20
C03D: A188    		dw define_2d_2d_2d
C03F: 03      		db 3
C040: 2D2D2D  		db "---"
              	
C043: 06      		db 1+5
C044: 20      		db $20
C045: 3E87    		dw define_2f
C047: 01      		db 1
C048: 2F      		db "/"
              	
C049: 07      		db 2+5
C04A: 20      		db $20
C04B: B888    		dw define_30_2d
C04D: 02      		db 2
C04E: 302D    		db "0-"
              	
C050: 07      		db 2+5
C051: 20      		db $20
C052: C388    		dw define_30_3c
C054: 02      		db 2
C055: 303C    		db "0<"
              	
C057: 07      		db 2+5
C058: 20      		db $20
C059: CE88    		dw define_30_3d
C05B: 02      		db 2
C05C: 303D    		db "0="
              	
C05E: 08      		db 3+5
C05F: 20      		db $20
C060: F188    		dw define_31_36_2a
C062: 03      		db 3
C063: 31362A  		db "16*"
              	
C066: 07      		db 2+5
C067: 20      		db $20
C068: D988    		dw define_32_2a
C06A: 02      		db 2
C06B: 322A    		db "2*"
              	
C06D: 07      		db 2+5
C06E: 20      		db $20
C06F: FB88    		dw define_32_2f
C071: 02      		db 2
C072: 322F    		db "2/"
              	
C074: 07      		db 2+5
C075: 20      		db $20
C076: E088    		dw define_34_2a
C078: 02      		db 2
C079: 342A    		db "4*"
              	
C07B: 07      		db 2+5
C07C: 20      		db $20
C07D: 0589    		dw define_34_2f
C07F: 02      		db 2
C080: 342F    		db "4/"
              	
C082: 07      		db 2+5
C083: 20      		db $20
C084: E888    		dw define_38_2a
C086: 02      		db 2
C087: 382A    		db "8*"
              	
C089: 06      		db 1+5
C08A: 20      		db $20
C08B: DE87    		dw define_3b
C08D: 01      		db 1
C08E: 3B      		db ";"
              	
C08F: 06      		db 1+5
C090: 20      		db $20
C091: 0787    		dw define_3c
C093: 01      		db 1
C094: 3C      		db "<"
              	
C095: 06      		db 1+5
C096: 20      		db $20
C097: 1F87    		dw define_3d
C099: 01      		db 1
C09A: 3D      		db "="
              	
C09B: 06      		db 1+5
C09C: 20      		db $20
C09D: 9D87    		dw define_40
C09F: 01      		db 1
C0A0: 40      		db "@"
              	
C0A1: 08      		db 3+5
C0A2: 20      		db $20
C0A3: 4788    		dw define_61_3e_62
C0A5: 03      		db 3
C0A6: 613E62  		db "a>b"
              	
C0A9: 08      		db 3+5
C0AA: 20      		db $20
C0AB: 6888    		dw define_61_3e_72
C0AD: 03      		db 3
C0AE: 613E72  		db "a>r"
              	
C0B1: 09      		db 4+5
C0B2: 20      		db $20
C0B3: 8888    		dw define_61_62_3e_72
C0B5: 04      		db 4
C0B6: 61623E72		db "ab>r"
              	
C0BA: 08      		db 3+5
C0BB: 20      		db $20
C0BC: 1389    		dw define_61_62_73
C0BE: 03      		db 3
C0BF: 616273  		db "abs"
              	
C0C2: 08      		db 3+5
C0C3: 20      		db $20
C0C4: 4F87    		dw define_61_6e_64
C0C6: 03      		db 3
C0C7: 616E64  		db "and"
              	
C0CA: 08      		db 3+5
C0CB: 20      		db $20
C0CC: 4F88    		dw define_62_3e_61
C0CE: 03      		db 3
C0CF: 623E61  		db "b>a"
              	
C0D2: 08      		db 3+5
C0D3: 20      		db $20
C0D4: 7888    		dw define_62_3e_72
C0D6: 03      		db 3
C0D7: 623E72  		db "b>r"
              	
C0DA: 0A      		db 5+5
C0DB: 20      		db $20
C0DC: 3788    		dw define_62_72_65_61_6b
C0DE: 05      		db 5
C0DF: 62726561		db "break"
C0E3: 6B      	
              	
C0E4: 0A      		db 5+5
C0E5: 20      		db $20
C0E6: 1C89    		dw define_62_73_77_61_70
C0E8: 05      		db 5
C0E9: 62737761		db "bswap"
C0ED: 70      	
              	
C0EE: 07      		db 2+5
C0EF: 20      		db $20
C0F0: B387    		dw define_63_21
C0F2: 02      		db 2
C0F3: 6321    		db "c!"
              	
C0F5: 07      		db 2+5
C0F6: 20      		db $20
C0F7: E687    		dw define_63_2c
C0F9: 02      		db 2
C0FA: 632C    		db "c,"
              	
C0FC: 07      		db 2+5
C0FD: 20      		db $20
C0FE: BA87    		dw define_63_40
C100: 02      		db 2
C101: 6340    		db "c@"
              	
C103: 12      		db 13+5
C104: 20      		db $20
C105: 7C87    		dw define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21
C107: 0D      		db 13
C108: 636F6E2E		db "con.raw.char!"
C10C: 7261772E	
C110: 63686172	
C114: 21      	
              	
C115: 11      		db 12+5
C116: 20      		db $20
C117: 8287    		dw define_63_6f_6e_2e_72_61_77_2e_68_65_78_21
C119: 0C      		db 12
C11A: 636F6E2E		db "con.raw.hex!"
C11E: 7261772E	
C122: 68657821	
              	
C126: 12      		db 13+5
C127: 20      		db $20
C128: 8887    		dw define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79
C12A: 0D      		db 13
C12B: 636F6E2E		db "con.raw.inkey"
C12F: 7261772E	
C133: 696E6B65	
C137: 79      	
              	
C138: 14      		db 15+5
C139: 20      		db $20
C13A: 7687    		dw define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65
C13C: 0F      		db 15
C13D: 636F6E2E		db "con.raw.setmode"
C141: 7261772E	
C145: 7365746D	
C149: 6F6465  	
              	
C14C: 09      		db 4+5
C14D: 20      		db $20
C14E: F487    		dw define_63_6f_70_79
C150: 04      		db 4
C151: 636F7079		db "copy"
              	
C155: 09      		db 4+5
C156: 20      		db $20
C157: 1888    		dw define_66_69_6c_6c
C159: 04      		db 4
C15A: 66696C6C		db "fill"
              	
C15E: 09      		db 4+5
C15F: 20      		db $20
C160: 2F88    		dw define_68_61_6c_74
C162: 04      		db 4
C163: 68616C74		db "halt"
              	
C167: 08      		db 3+5
C168: 20      		db $20
C169: 5987    		dw define_6d_6f_64
C16B: 03      		db 3
C16C: 6D6F64  		db "mod"
              	
C16F: 08      		db 3+5
C170: 20      		db $20
C171: 2589    		dw define_6e_6f_74
C173: 03      		db 3
C174: 6E6F74  		db "not"
              	
C177: 07      		db 2+5
C178: 20      		db $20
C179: 6287    		dw define_6f_72
C17B: 02      		db 2
C17C: 6F72    		db "or"
              	
C17E: 07      		db 2+5
C17F: 20      		db $20
C180: CD87    		dw define_70_21
C182: 02      		db 2
C183: 7021    		db "p!"
              	
C185: 07      		db 2+5
C186: 20      		db $20
C187: C387    		dw define_70_40
C189: 02      		db 2
C18A: 7040    		db "p@"
              	
C18C: 0B      		db 6+5
C18D: 20      		db $20
C18E: EE87    		dw define_70_61_72_61_6d_21
C190: 06      		db 6
C191: 70617261		db "param!"
C195: 6D21    	
              	
C197: 08      		db 3+5
C198: 20      		db $20
C199: 5F88    		dw define_70_6f_70
C19B: 03      		db 3
C19C: 706F70  		db "pop"
              	
C19F: 09      		db 4+5
C1A0: 20      		db $20
C1A1: 5788    		dw define_70_75_73_68
C1A3: 04      		db 4
C1A4: 70757368		db "push"
              	
C1A8: 08      		db 3+5
C1A9: 20      		db $20
C1AA: 7088    		dw define_72_3e_61
C1AC: 03      		db 3
C1AD: 723E61  		db "r>a"
              	
C1B0: 09      		db 4+5
C1B1: 20      		db $20
C1B2: 9188    		dw define_72_3e_61_62
C1B4: 04      		db 4
C1B5: 723E6162		db "r>ab"
              	
C1B9: 08      		db 3+5
C1BA: 20      		db $20
C1BB: 8088    		dw define_72_3e_62
C1BD: 03      		db 3
C1BE: 723E62  		db "r>b"
              	
C1C1: 09      		db 4+5
C1C2: 20      		db $20
C1C3: 4088    		dw define_73_77_61_70
C1C5: 04      		db 4
C1C6: 73776170		db "swap"
              	
C1CA: 08      		db 3+5
C1CB: 20      		db $20
C1CC: 6C87    		dw define_78_6f_72
C1CE: 03      		db 3
C1CF: 786F72  		db "xor"
              	
C1D2: 00      		db 0
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $41D3 = 16851

; +++ global symbols +++

AlternateFont        = $8207 = 33287          font.asm:1
Boot                 = $8006 = 32774          kernel.asm:32
BootAddress          = $8952 = 35154          data.asm:28
BootPage             = $8954 = 35156          data.asm:30
COMPCompileSelf      = $892F = 35119          wordaction.asm:18
COMPMacroExpand      = $893A = 35130          wordaction.asm:32
DIVDivideMod16       = $864E = 34382          divide.asm:18
DictionaryPage       = $0020 =    32          kernel.asm:16 (unused)
DisplayInfo          = $894E = 35150          data.asm:26 (unused)
DisplayInformation   = $895A = 35162          data.asm:41
Div16_Loop1          = $8658 = 34392          divide.asm:27
Div16_Loop2          = $8669 = 34409          divide.asm:41
Div16_NoAdd1         = $8660 = 34400          divide.asm:33
Div16_NoAdd2         = $8671 = 34417          divide.asm:47
EditBuffer           = $7B08 = 31496          kernel.asm:24 (unused)
EditPageSize         = $0200 =   512          kernel.asm:19 (unused)
FARCompileByte       = $8679 = 34425          farmemory.asm:18
FARCompileWord       = $8691 = 34449          farmemory.asm:40
FirstCodePage        = $002A =    42          kernel.asm:20
FirstSourcePage      = $0022 =    34          kernel.asm:17 (unused)
FreeMemory           = $8980 = 35200          data.asm:67
GFXInitialise48k     = $8033 = 32819          screen48k.asm:19
GFXInitialiseLayer2  = $80AB = 32939          screen_layer2.asm:19
GFXInitialiseLowRes  = $8162 = 33122          screen_lores.asm:18
GFXMode              = $8507 = 34055          graphics.asm:18
GFXPrintCharacter48k = $805F = 32863          screen48k.asm:53
GFXPrintCharacterLayer2 = $80DB = 32987          screen_layer2.asm:55
GFXPrintCharacterLowRes = $818C = 33164          screen_lores.asm:50
GFXWriteCharacter    = $853C = 34108          graphics.asm:64
GFXWriteHexWord      = $854F = 34127          graphics.asm:87
GFXWriteHexWordA     = $8551 = 34129          graphics.asm:89 (unused)
Here                 = $8946 = 35142          data.asm:20
HerePage             = $8948 = 35144          data.asm:22
IOScanKeyboard       = $8581 = 34177          keyboard.asm:19
L2PClear             = $80B4 = 32948          screen_layer2.asm:26
L2PClearBank         = $80C3 = 32963          screen_layer2.asm:34
LowClearScreen       = $8175 = 33141          screen_lores.asm:30
MULTMultiply16       = $86AC = 34476          multiply.asm:18
NextFreePage         = $894A = 35146          data.asm:24 (unused)
PAGEInitialise       = $86C6 = 34502          paging.asm:18
PAGERestore          = $86F1 = 34545          paging.asm:64
PAGESwitch           = $86D8 = 34520          paging.asm:36
Parameter            = $8956 = 35158          data.asm:32
SIFontBase           = $896A = 35178          data.asm:51
SIScreenDriver       = $896C = 35180          data.asm:53
SIScreenHeight       = $895E = 35166          data.asm:45
SIScreenMode         = $8966 = 35174          data.asm:49
SIScreenSize         = $8962 = 35170          data.asm:47
SIScreenWidth        = $895A = 35162          data.asm:43
SourcePageCount      = $0004 =     4          kernel.asm:18
StackTop             = $7EFC = 32508          kernel.asm:25
StopDefault          = $802F = 32815          kernel.asm:52
SystemInformation    = $8946 = 35142          data.asm:18
__COMPMExLoop        = $893D = 35133          wordaction.asm:36
__Core__Mult_Loop    = $86B3 = 34483          multiply.asm:24
__Core__Mult_Shift   = $86B8 = 34488          multiply.asm:28
__GFXConfigure       = $8521 = 34081          graphics.asm:39
__GFXLayer2          = $8519 = 34073          graphics.asm:32
__GFXLowRes          = $851E = 34078          graphics.asm:36
__GFXWCExit          = $854A = 34122          graphics.asm:74
__GFXWHByte          = $8563 = 34147          graphics.asm:105
__GFXWHDigit         = $8579 = 34169          graphics.asm:119
__GFXWHNibble        = $8570 = 34160          graphics.asm:113
__L2Exit             = $815B = 33115          screen_layer2.asm:156
__L2Loop             = $814C = 33100          screen_layer2.asm:143
__L2Not1             = $80F7 = 33015          screen_layer2.asm:77
__L2Not2             = $80FD = 33021          screen_layer2.asm:81
__L2Not3             = $8103 = 33027          screen_layer2.asm:85
__L2NotCursor        = $810E = 33038          screen_layer2.asm:94
__L2NotSet           = $8152 = 33106          screen_layer2.asm:148
__L2Outer            = $8143 = 33091          screen_layer2.asm:137
__LPExit             = $8200 = 33280          screen_lores.asm:143
__LowLoop            = $81EC = 33260          screen_lores.asm:127
__LowNotLower2       = $81E1 = 33249          screen_lores.asm:119
__LowNotReverse      = $81AE = 33198          screen_lores.asm:79
__LowNotSet          = $81F2 = 33266          screen_lores.asm:132
__LowOuter           = $81E3 = 33251          screen_lores.asm:121
__PAGEStackBase      = $8970 = 35184          data.asm:64
__PAGEStackPointer   = $896E = 35182          data.asm:62
__ZXWCCopy           = $809F = 32927          screen48k.asm:115
__ZXWCExit           = $80A6 = 32934          screen48k.asm:122
___kr4               = $85B2 = 34226          keyboard.asm:50
__copy_exit          = $8814 = 34836          miscellany.asm:92
__copy_gt_count      = $8811 = 34833          miscellany.asm:89
__cs1                = $8043 = 32835          screen48k.asm:29
__cs2                = $804B = 32843          screen48k.asm:34
__fill_loop          = $8824 = 34852          miscellany.asm:113
__halt_loop          = $8833 = 34867          miscellany.asm:134
__kr1                = $8596 = 34198          keyboard.asm:33
__kr2                = $85A1 = 34209          keyboard.asm:39
__kr3                = $85A3 = 34211          keyboard.asm:42
__kr_exit            = $85D2 = 34258          keyboard.asm:80
__kr_keypressed      = $85CC = 34252          keyboard.asm:74
__kr_no_shift_table  = $85D6 = 34262          keyboard.asm:95
__kr_shift_table     = $85FE = 34302          keyboard.asm:101
__kr_symbol_shift_table = $8626 = 34342          keyboard.asm:107
__less_returnc       = $8718 = 34584          binary.asm:32
__less_samesign      = $8713 = 34579          binary.asm:27
__negate             = $88BB = 35003          unary.asm:76
_end                 = $C1D3 = 49619          kernel.asm:26 (unused)
_size                = $41D3 = 16851          kernel.asm:26 (unused)
define_21            = $8793 = 34707          memory.asm:16
define_2a            = $8738 = 34616          binary.asm:79
define_2b            = $8748 = 34632          binary.asm:103
define_2b_21         = $87A7 = 34727          memory.asm:50
define_2b_2b         = $88A9 = 34985          unary.asm:45
define_2b_2b_2b      = $88B0 = 34992          unary.asm:59
define_2c            = $87D7 = 34775          miscellany.asm:16
define_2d            = $872E = 34606          binary.asm:64
define_2d_2d         = $889A = 34970          unary.asm:16
define_2d_2d_2d      = $88A1 = 34977          unary.asm:30
define_2f            = $873E = 34622          binary.asm:89
define_30_2d         = $88B8 = 35000          unary.asm:74
define_30_3c         = $88C3 = 35011          unary.asm:92
define_30_3d         = $88CE = 35022          unary.asm:106
define_31_36_2a      = $88F1 = 35057          unary.asm:160
define_32_2a         = $88D9 = 35033          unary.asm:121
define_32_2f         = $88FB = 35067          unary.asm:177
define_34_2a         = $88E0 = 35040          unary.asm:133
define_34_2f         = $8905 = 35077          unary.asm:190
define_38_2a         = $88E8 = 35048          unary.asm:146
define_3b            = $87DE = 34782          miscellany.asm:27
define_3c            = $8707 = 34567          binary.asm:18
define_3d            = $871F = 34591          binary.asm:45
define_40            = $879D = 34717          memory.asm:33
define_61_3e_62      = $8847 = 34887          register.asm:30
define_61_3e_72      = $8868 = 34920          stack.asm:45
define_61_62_3e_72   = $8888 = 34952          stack.asm:101
define_61_62_73      = $8913 = 35091          unary.asm:207
define_61_6e_64      = $874F = 34639          binary.asm:117
define_62_3e_61      = $884F = 34895          register.asm:44
define_62_3e_72      = $8878 = 34936          stack.asm:73
define_62_72_65_61_6b = $8837 = 34871          miscellany.asm:145
define_62_73_77_61_70 = $891C = 35100          unary.asm:219
define_63_21         = $87B3 = 34739          memory.asm:68
define_63_2c         = $87E6 = 34790          miscellany.asm:42
define_63_40         = $87BA = 34746          memory.asm:82
define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21 = $877C = 34684          console.asm:24
define_63_6f_6e_2e_72_61_77_2e_68_65_78_21 = $8782 = 34690          console.asm:32
define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79 = $8788 = 34696          console.asm:40
define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65 = $8776 = 34678          console.asm:16
define_63_6f_70_79   = $87F4 = 34804          miscellany.asm:64
define_66_69_6c_6c   = $8818 = 34840          miscellany.asm:104
define_68_61_6c_74   = $882F = 34863          miscellany.asm:131
define_6d_6f_64      = $8759 = 34649          binary.asm:133
define_6e_6f_74      = $8925 = 35109          unary.asm:235
define_6f_72         = $8762 = 34658          binary.asm:146
define_70_21         = $87CD = 34765          memory.asm:111
define_70_40         = $87C3 = 34755          memory.asm:97
define_70_61_72_61_6d_21 = $87EE = 34798          miscellany.asm:54
define_70_6f_70      = $885F = 34911          stack.asm:29
define_70_75_73_68   = $8857 = 34903          stack.asm:16
define_72_3e_61      = $8870 = 34928          stack.asm:58
define_72_3e_61_62   = $8891 = 34961          stack.asm:115
define_72_3e_62      = $8880 = 34944          stack.asm:86
define_73_77_61_70   = $8840 = 34880          register.asm:16
define_78_6f_72      = $876C = 34668          binary.asm:162
end_21               = $879C = 34716          memory.asm:24
end_2b               = $874E = 34638          binary.asm:108
end_2b_2b            = $88AF = 34991          unary.asm:50
end_2b_2b_2b         = $88B7 = 34999          unary.asm:65
end_2d_2d            = $88A0 = 34976          unary.asm:21
end_2d_2d_2d         = $88A8 = 34984          unary.asm:36
end_31_36_2a         = $88FA = 35066          unary.asm:168
end_32_2a            = $88DF = 35039          unary.asm:126
end_32_2f            = $8904 = 35076          unary.asm:183
end_34_2a            = $88E7 = 35047          unary.asm:139
end_34_2f            = $8912 = 35090          unary.asm:198
end_38_2a            = $88F0 = 35056          unary.asm:153
end_3b               = $87E5 = 34789          miscellany.asm:33
end_40               = $87A6 = 34726          memory.asm:41
end_61_3e_62         = $884E = 34894          register.asm:36
end_61_3e_72         = $886F = 34927          stack.asm:51
end_61_62_3e_72      = $8890 = 34960          stack.asm:108
end_62_3e_61         = $8856 = 34902          register.asm:50
end_62_3e_72         = $887F = 34943          stack.asm:79
end_62_72_65_61_6b   = $883F = 34879          miscellany.asm:151
end_62_73_77_61_70   = $8924 = 35108          unary.asm:226
end_63_21            = $87B9 = 34745          memory.asm:73
end_63_40            = $87C2 = 34754          memory.asm:88
end_70_21            = $87D6 = 34774          memory.asm:118
end_70_6f_70         = $8867 = 34919          stack.asm:36
end_70_75_73_68      = $885E = 34910          stack.asm:22
end_72_3e_61         = $8877 = 34935          stack.asm:64
end_72_3e_61_62      = $8899 = 34969          stack.asm:122
end_72_3e_62         = $8887 = 34951          stack.asm:92
end_73_77_61_70      = $8846 = 34886          register.asm:21
start_21             = $8798 = 34712          memory.asm:19
start_2b             = $874D = 34637          binary.asm:106
start_2b_2b          = $88AE = 34990          unary.asm:48
start_2b_2b_2b       = $88B5 = 34997          unary.asm:62
start_2d_2d          = $889F = 34975          unary.asm:19
start_2d_2d_2d       = $88A6 = 34982          unary.asm:33
start_31_36_2a       = $88F6 = 35062          unary.asm:163
start_32_2a          = $88DE = 35038          unary.asm:124
start_32_2f          = $8900 = 35072          unary.asm:180
start_34_2a          = $88E5 = 35045          unary.asm:136
start_34_2f          = $890A = 35082          unary.asm:193
start_38_2a          = $88ED = 35053          unary.asm:149
start_3b             = $87E4 = 34788          miscellany.asm:31
start_40             = $87A2 = 34722          memory.asm:36
start_61_3e_62       = $884C = 34892          register.asm:33
start_61_3e_72       = $886E = 34926          stack.asm:49
start_61_62_3e_72    = $888E = 34958          stack.asm:105
start_62_3e_61       = $8854 = 34900          register.asm:47
start_62_3e_72       = $887E = 34942          stack.asm:77
start_62_72_65_61_6b = $883D = 34877          miscellany.asm:149
start_62_73_77_61_70 = $8921 = 35105          unary.asm:222
start_63_21          = $87B8 = 34744          memory.asm:71
start_63_40          = $87BF = 34751          memory.asm:85
start_70_21          = $87D2 = 34770          memory.asm:114
start_70_6f_70       = $8865 = 34917          stack.asm:33
start_70_75_73_68    = $885D = 34909          stack.asm:20
start_72_3e_61       = $8876 = 34934          stack.asm:62
start_72_3e_61_62    = $8897 = 34967          stack.asm:119
start_72_3e_62       = $8886 = 34950          stack.asm:90
start_73_77_61_70    = $8845 = 34885          register.asm:19


total time: 0.0087 sec.
no errors
