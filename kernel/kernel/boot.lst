              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-03-27 13:02:48
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th March 2019
              	;		Purpose :	Flat Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 0C8D    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800E: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8010: CDCA86  			call 	PAGEInitialise
              	
8013: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8015: CD0B85  			call 	GFXMode
              	
8018: 3A1A8D  			ld 		a,(BootPage)						; switch to boot page.
801B: CDCA86  			call 	PAGEInitialise
801E: DD2A188D			ld 		ix,(BootAddress)					; start address
8022: 210000  			ld 		hl,0								; zero AB registers
8025: 110000  			ld 		de,0
8028: 221C8D  			ld 		(Parameter),hl 						; clear parameter
802B: DDE9    			jp 		(ix) 								; and execute.
              	
802D:         	BootDefault:
802D: 210000  			ld 		hl,$0000 							; start from page 0
8030: CD198A  			call 	LOADLoadPages 						; load pages till we stop.
              	
8033:         	StopDefault:	
8033: C33380  			jp 		StopDefault
              	
8036: C9      			ret
              			
              			include "__includes.asm"					; the included sources picked up by processcore.py
              		include "components/console/drivers/screen48k.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8037:         	GFXInitialise48k:
8037: F5      			push 	af 									; save registers
8038: C5      			push 	bc
              	
8039: 013B12  			ld 		bc,$123B 							; Layer 2 access port
803C: 3E00    			ld 		a,0 								; disable Layer 2
803E: ED79    			out 	(c),a
8040: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8044: 210040  			ld 		hl,$4000 							; clear pixel memory
8047: 3600    	__cs1:	ld 		(hl),0
8049: 23      			inc 	hl
804A: 7C      			ld 		a,h
804B: FE58    			cp 		$58
804D: 20F8    			jr 		nz,__cs1
804F: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8051: 23      			inc 	hl
8052: 7C      			ld 		a,h
8053: FE5B    			cp 		$5B
8055: 20F8    			jr 		nz,__cs2	
8057: AF      			xor 	a 									; border off
8058: D3FE    			out 	($FE),a
805A: C1      			pop 	bc
805B: F1      			pop 	af
805C: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
805F: 116380  			ld 		de,GFXPrintCharacter48k
8062: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8063:         	GFXPrintCharacter48k:
8063: F5      			push 	af 									; save registers
8064: C5      			push 	bc
8065: D5      			push 	de
8066: E5      			push 	hl
              	
8067: 43      			ld 		b,e 								; character in B
8068: 7C      			ld 		a,h 								; check range.
8069: FE03    			cp 		3
806B: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
806D: E5      			push 	hl 									; save position.
806E: 7C      			ld 		a,h
806F: C658    			add 	$58
8071: 67      			ld 		h,a
              	
8072: 7A      			ld 		a,d 								; get current colour
8073: E607    			and 	7  									; mask 0..2
8075: F640    			or 		$40  								; make bright
8077: 77      			ld 		(hl),a 								; store it.	
8078: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8079: D5      			push 	de
807A: EB      			ex 		de,hl
807B: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
807C: 7A      			ld 		a,d
807D: E603    			and 	3
807F: 87      			add 	a,a
8080: 87      			add 	a,a
8081: 87      			add 	a,a
8082: F640    			or 		$40
8084: 67      			ld 		h,a
8085: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8086: E5      			push 	hl
8087: 78      			ld 		a,b 								; get character
8088: E67F    			and 	$7F 								; bits 0-6 only.
808A: D620    			sub 	32
808C: 6F      			ld 		l,a 								; put in HL
808D: 2600    			ld 		h,0
808F: 29      			add 	hl,hl 								; x 8
8090: 29      			add 	hl,hl
8091: 29      			add 	hl,hl
8092: ED5B308D			ld 		de,(SIFontBase) 					; add the font base.
8096: 19      			add 	hl,de
8097: EB      			ex 		de,hl 								; put in DE (font address)
8098: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8099: 78      			ld 		a,b
809A: 0608    			ld 		b,8 								; copy 8 characters
809C: 0E00    			ld 		c,0 								; XOR value 0
809E: CB7F    			bit 	7,a 								; is the character reversed
80A0: 2801    			jr 		z,__ZXWCCopy
80A2: 0D      			dec 	c 									; C is the XOR mask now $FF
80A3:         	__ZXWCCopy:
80A3: 1A      			ld 		a,(de)								; get font data
80A4: A9      			xor 	c 									; xor with reverse
80A5: 77      			ld 		(hl),a 								; write back
80A6: 24      			inc 	h 									; bump pointers
80A7: 13      			inc 	de
80A8: 10F9    			djnz 	__ZXWCCopy 							; do B times.
80AA:         	__ZXWCExit:
80AA: E1      			pop 	hl 									; restore and exit
80AB: D1      			pop 	de
80AC: C1      			pop 	bc
80AD: F1      			pop 	af
80AE: C9      			ret
              		include "components/console/drivers/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
80AF:         	GFXInitialiseLayer2:
80AF: F5      			push 	af
80B0: C5      			push 	bc
80B1: D5      			push 	de
80B2: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
80B6: 1E02    			ld 		e,2 								; 3 banks to erase
80B8:         	L2PClear:
80B8: 7B      			ld 		a,e 								; put bank number in bits 6/7
80B9: CB0F    			rrc 	a
80BB: CB0F    			rrc 	a
80BD: F603    			or 		2+1 								; shadow on, visible, enable write paging
80BF: 013B12  			ld 		bc,$123B 							; out to layer 2 port
80C2: ED79    			out 	(c),a
80C4: 210040  			ld 		hl,$4000 							; erase the bank to $00 
80C7:         	L2PClearBank: 										; assume default palette :)
80C7: 2B      			dec 	hl
80C8: 3600    			ld 		(hl),$00
80CA: 7C      			ld 		a,h
80CB: B5      			or 		l
80CC: 20F9    			jr		nz,L2PClearBank
80CE: 1D      			dec 	e
80CF: F2B880  			jp 		p,L2PClear
              	
80D2: AF      			xor 	a
80D3: D3FE    			out 	($FE),a
              	
80D5: D1      			pop 	de
80D6: C1      			pop 	bc
80D7: F1      			pop 	af
80D8: 212018  			ld 		hl,$1820 							; still 32 x 24 	
80DB: 11DF80  			ld 		de,GFXPrintCharacterLayer2
80DE: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
80DF:         	GFXPrintCharacterLayer2:
80DF: F5      			push 	af
80E0: C5      			push 	bc
80E1: D5      			push 	de
80E2: E5      			push 	hl
80E3: DDE5    			push 	ix
              	
80E5: 43      			ld 		b,e 								; save A temporarily
80E6: 78      			ld 		a,b
80E7: E67F    			and 	$7F
80E9: FE20    			cp 		32
80EB: 3872    			jr 		c,__L2Exit 							; check char in range
80ED: 7C      			ld 		a,h
80EE: FE03    			cp 		3
80F0: 306D    			jr 		nc,__L2Exit 						; check position in range
80F2: 78      			ld 		a,b
              	
80F3: F5      			push 	af 	
80F4: AF      			xor 	a 									; convert colour in C to palette index
80F5: CB42    			bit 	0,d 								; (assumes standard palette)
80F7: 2802    			jr 		z,__L2Not1
80F9: F603    			or 		$03
80FB:         	__L2Not1:
80FB: CB52    			bit 	2,d
80FD: 2802    			jr 		z,__L2Not2
80FF: F61C    			or 		$1C
8101:         	__L2Not2:
8101: CB4A    			bit 	1,d
8103: 2802    			jr 		z,__L2Not3
8105: F6C0    			or 		$C0
8107:         	__L2Not3:
8107: 4F      			ld 		c,a 								; C is foreground
8108: 0600    			ld 		b,0									; B is xor flipper, initially zero
810A: F1      			pop 	af 									; restore char
              	
810B: E5      			push 	hl
810C: CB7F    			bit 	7,a 								; adjust background bit on bit 7
810E: 2802    			jr 		z,__L2NotCursor
8110: 06FF    			ld 		b,$FF 								; light grey is cursor
8112:         	__L2NotCursor:
8112: E67F    			and 	$7F 								; offset from space
8114: D620    			sub 	$20
8116: 6F      			ld 		l,a 								; put into HL
8117: 2600    			ld 		h,0
8119: 29      			add 	hl,hl 								; x 8
811A: 29      			add 	hl,hl
811B: 29      			add 	hl,hl
              	
811C: E5      			push 	hl 									; transfer to IX
811D: DDE1    			pop 	ix
811F: E1      			pop 	hl
              	
8120: C5      			push 	bc 									; add the font base to it.
8121: ED4B308D			ld 		bc,(SIFontBase)
8125: DD09    			add 	ix,bc
8127: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8128: C5      			push 	bc
8129: 7C      			ld  	a,h 								; this is the page number.
812A: CB0F    			rrc 	a
812C: CB0F    			rrc 	a
812E: E6C0    			and 	$C0 								; in bits 6 & 7
8130: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8132: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8135: ED79    			out 	(c),a
8137: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8138: EB      			ex 		de,hl
8139: 6B      			ld 		l,e
813A: 2600    			ld 		h,0
813C: 29      			add 	hl,hl 								
813D: 29      			add 	hl,hl
813E: 29      			add 	hl,hl
813F: CB24    			sla 	h
8141: CB24    			sla 	h
8143: CB24    			sla 	h
              	
8145: 1E08    			ld 		e,8 								; do 8 rows
8147:         	__L2Outer:
8147: E5      			push 	hl 									; save start
8148: 1608    			ld 		d,8 								; do 8 columns
814A: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
814D: A8      			xor 	b 									; maybe flip it ?
814E: DD23    			inc 	ix
8150:         	__L2Loop:
8150: 3600    			ld 		(hl),0 								; background
8152: 87      			add 	a,a 								; shift pattern left
8153: 3001    			jr 		nc,__L2NotSet
8155: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8156:         	__L2NotSet:
8156: 23      			inc 	hl
8157: 15      			dec 	d 									; do a row
8158: 20F6    			jr 		nz,	__L2Loop
815A: E1      			pop 	hl 									; restore, go 256 bytes down.
815B: 24      			inc 	h
815C: 1D      			dec 	e 									; do 8 rows
815D: 20E8    			jr 		nz,__L2Outer	
815F:         	__L2Exit:
815F: DDE1    			pop 	ix
8161: E1      			pop 	hl
8162: D1      			pop 	de
8163: C1      			pop 	bc
8164: F1      			pop 	af
8165: C9      			ret
              		include "components/console/drivers/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8166:         	GFXInitialiseLowRes:
8166: F5      			push 	af
8167: C5      			push 	bc
8168: D5      			push 	de
              	
8169: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
816D: AF      			xor 	a 									; layer 2 off.
816E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8171: ED79    			out 	(c),a
              	
8173: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8176: 110060  			ld 		de,$6000
8179:         	LowClearScreen: 									; assume default palette :)
8179: AF      			xor 	a
817A: 77      			ld 		(hl),a
817B: 12      			ld 		(de),a
817C: 23      			inc 	hl
817D: 13      			inc 	de
817E: 7C      			ld 		a,h
817F: FE58    			cp 		$58
8181: 20F6    			jr		nz,LowClearScreen
8183: AF      			xor 	a
8184: D3FE    			out 	($FE),a
8186: D1      			pop 	de
8187: C1      			pop 	bc
8188: F1      			pop 	af
8189: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
818C: 119081  			ld 		de,GFXPrintCharacterLowRes
818F: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8190:         	GFXPrintCharacterLowRes:
8190: F5      			push 	af
8191: C5      			push 	bc
8192: D5      			push 	de
8193: E5      			push 	hl
8194: DDE5    			push 	ix
              	
8196: 43      			ld 		b,e 								; save character in B
8197: 7B      			ld 		a,e
8198: E67F    			and 	$7F
819A: FE20    			cp 		32
819C: 3866    			jr 		c,__LPExit
              	
819E: 29      			add 	hl,hl
819F: 29      			add 	hl,hl
81A0: 7C      			ld	 	a,h 								; check in range 192*4 = 768
81A1: FE03    			cp 		3
81A3: 305F    			jr 		nc,__LPExit
              	
81A5: 7A      			ld 		a,d 								; only lower 3 bits of colour
81A6: E607    			and 	7
81A8: 4F      			ld 		c,a 								; C is foreground
              	
81A9: E5      			push 	hl
81AA: 78      			ld 		a,b 								; get char back
81AB: 0600    			ld 		b,0 								; B = no flip colour.
81AD: CB7F    			bit 	7,a
81AF: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
81B1: 05      			dec 	b
81B2:         	__LowNotReverse:
81B2: E67F    			and 	$7F 								; offset from space
81B4: D620    			sub 	$20
81B6: 6F      			ld 		l,a 								; put into HL
81B7: 2600    			ld 		h,0
81B9: 29      			add 	hl,hl 								; x 8
81BA: 29      			add 	hl,hl
81BB: 29      			add 	hl,hl
              	
81BC: E5      			push 	hl 									; transfer to IX
81BD: DDE1    			pop 	ix
              	
81BF: C5      			push 	bc 									; add the font base to it.
81C0: ED4B308D			ld 		bc,(SIFontBase)
81C4: DD09    			add 	ix,bc
81C6: C1      			pop 	bc
81C7: E1      			pop 	hl
81C8: EB      			ex 		de,hl
81C9: 7B      			ld 		a,e 								; put DE => HL
81CA: E6C0    			and 	192 								; these are part of Y
81CC: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
81CD: 62      			ld 		h,d		
81CE: 29      			add 	hl,hl
81CF: 29      			add 	hl,hl
81D0: 29      			add 	hl,hl
81D1: 29      			add 	hl,hl
81D2: CBF4    			set 	6,h 								; put into $4000 range
              	
81D4: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
81D6: A3      			and 	e 									; and with E, gives X position
81D7: 87      			add 	a,a 								; now multiplied by 8.
81D8: 5F      			ld 		e,a 								; DE is x offset.
81D9: 1600    			ld 		d,0  
              	
81DB: 19      			add 	hl,de
81DC: 7C      			ld 		a,h
81DD: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
81DF: 3804    			jr 		c,__LowNotLower2
81E1: 110008  			ld 		de,$0800
81E4: 19      			add 	hl,de
81E5:         	__LowNotLower2:
81E5: 1E08    			ld 		e,8 								; do 8 rows
81E7:         	__LowOuter:
81E7: E5      			push 	hl 									; save start
81E8: 1608    			ld 		d,8 								; do 8 columns
81EA: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
81ED: A8      			xor 	b
81EE: DD23    			inc 	ix
81F0:         	__LowLoop:
81F0: 3600    			ld 		(hl),0 								; background
81F2: 87      			add 	a,a 								; shift pattern left
81F3: 3001    			jr 		nc,__LowNotSet
81F5: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
81F6:         	__LowNotSet:
81F6: 2C      			inc 	l
81F7: 15      			dec 	d 									; do a row
81F8: 20F6    			jr 		nz,	__LowLoop
81FA: E1      			pop 	hl 									; restore, go 256 bytes down.
81FB: D5      			push 	de
81FC: 118000  			ld 		de,128
81FF: 19      			add 	hl,de
8200: D1      			pop 	de
8201: 1D      			dec 	e 									; do 8 rows
8202: 20E3    			jr 		nz,__LowOuter	
8204:         	__LPExit:
8204: DDE1    			pop 	ix
8206: E1      			pop 	hl
8207: D1      			pop 	de
8208: C1      			pop 	bc
8209: F1      			pop 	af
820A: C9      			ret
              	
              		include "components/console/font.asm"
820B:         	AlternateFont:
820B: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
820F: 00000000	
8213: 0C1E1E0C	
8217: 0C000C00	
821B: 36360000	
821F: 00000000	
8223: 36367F36	
8227: 7F363600	
822B: 183E603C	
822F: 067C1800	
8233: 0063660C	
8237: 18336300	
823B: 1C361C3B	
823F: 6E663B00	
8243: 30306000	
8247: 00000000	
824B: 0C183030	
824F: 30180C00	
8253: 30180C0C	
8257: 0C183000	
825B: 00331E7F	
825F: 1E330000	
8263: 0018187E	
8267: 18180000	
826B: 00000000	
826F: 00181830	
8273: 0000007E	
8277: 00000000	
827B: 00000000	
827F: 00181800	
8283: 03060C18	
8287: 30604000	
828B: 3E63676F	
828F: 7B733E00	
8293: 18381818	
8297: 18187E00	
829B: 3C66061C	
829F: 30667E00	
82A3: 3C66061C	
82A7: 06663C00	
82AB: 0E1E3666	
82AF: 7F060F00	
82B3: 7E607C06	
82B7: 06663C00	
82BB: 1C30607C	
82BF: 66663C00	
82C3: 7E66060C	
82C7: 18181800	
82CB: 3C66663C	
82CF: 66663C00	
82D3: 3C66663E	
82D7: 060C3800	
82DB: 00181800	
82DF: 00181800	
82E3: 00181800	
82E7: 00181830	
82EB: 0C183060	
82EF: 30180C00	
82F3: 00007E00	
82F7: 007E0000	
82FB: 30180C06	
82FF: 0C183000	
8303: 3C66060C	
8307: 18001800	
830B: 3E636F6F	
830F: 6F603C00	
8313: 183C6666	
8317: 7E666600	
831B: 7E33333E	
831F: 33337E00	
8323: 1E336060	
8327: 60331E00	
832B: 7C363333	
832F: 33367C00	
8333: 7F31343C	
8337: 34317F00	
833B: 7F31343C	
833F: 34307800	
8343: 1E336060	
8347: 67331F00	
834B: 6666667E	
834F: 66666600	
8353: 3C181818	
8357: 18183C00	
835B: 0F060606	
835F: 66663C00	
8363: 7333363C	
8367: 36337300	
836B: 78303030	
836F: 31337F00	
8373: 63777F7F	
8377: 6B636300	
837B: 63737B6F	
837F: 67636300	
8383: 1C366363	
8387: 63361C00	
838B: 7E33333E	
838F: 30307800	
8393: 3C666666	
8397: 6E3C0E00	
839B: 7E33333E	
839F: 36337300	
83A3: 3C667038	
83A7: 0E663C00	
83AB: 7E5A1818	
83AF: 18183C00	
83B3: 66666666	
83B7: 66667E00	
83BB: 66666666	
83BF: 663C1800	
83C3: 6363636B	
83C7: 7F776300	
83CB: 6363361C	
83CF: 1C366300	
83D3: 6666663C	
83D7: 18183C00	
83DB: 7F63460C	
83DF: 19337F00	
83E3: 3C303030	
83E7: 30303C00	
83EB: 6030180C	
83EF: 06030100	
83F3: 3C0C0C0C	
83F7: 0C0C3C00	
83FB: 081C3663	
83FF: 00000000	
8403: 00000000	
8407: 0000007F	
840B: 18180C00	
840F: 00000000	
8413: 00003C06	
8417: 3E663B00	
841B: 7030303E	
841F: 33336E00	
8423: 00003C66	
8427: 60663C00	
842B: 0E06063E	
842F: 66663B00	
8433: 00003C66	
8437: 7E603C00	
843B: 1C363078	
843F: 30307800	
8443: 00003B66	
8447: 663E067C	
844B: 7030363B	
844F: 33337300	
8453: 18003818	
8457: 18183C00	
845B: 06000606	
845F: 0666663C	
8463: 70303336	
8467: 3C367300	
846B: 38181818	
846F: 18183C00	
8473: 0000667F	
8477: 7F6B6300	
847B: 00007C66	
847F: 66666600	
8483: 00003C66	
8487: 66663C00	
848B: 00006E33	
848F: 333E3078	
8493: 00003B66	
8497: 663E060F	
849B: 00006E3B	
849F: 33307800	
84A3: 00003E60	
84A7: 3C067C00	
84AB: 08183E18	
84AF: 181A0C00	
84B3: 00006666	
84B7: 66663B00	
84BB: 00006666	
84BF: 663C1800	
84C3: 0000636B	
84C7: 7F7F3600	
84CB: 00006336	
84CF: 1C366300	
84D3: 00006666	
84D7: 663E067C	
84DB: 00007E4C	
84DF: 18327E00	
84E3: 0E181870	
84E7: 18180E00	
84EB: 0C0C0C00	
84EF: 0C0C0C00	
84F3: 7018180E	
84F7: 18187000	
84FB: 3B6E0000	
84FF: 00000000	
8503: 00...   	
              	
              		include "components/console/graphics.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
850B:         	GFXMode:
850B: C5      			push 	bc
850C: D5      			push 	de
850D: E5      			push 	hl
850E: 7D      			ld 		a,l 								; save new mode.
850F: 322C8D  			ld 		(SIScreenMode),a
8512: 2D      			dec 	l 									; L = 1 mode layer2
8513: 2808    			jr 		z,__GFXLayer2
8515: 2D      			dec 	l
8516: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8518: CD3780  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
851B: 1808    			jr 		__GFXConfigure
              	
851D:         	__GFXLayer2:
851D: CDAF80  			call 	GFXInitialiseLayer2
8520: 1803    			jr 		__GFXConfigure
              	
8522:         	__GFXLowRes:
8522: CD6681  			call 	GFXInitialiseLowRes
              	
8525:         	__GFXConfigure:
8525: 7D      			ld 		a,l 								; save screen size
8526: 32208D  			ld 		(SIScreenWidth),a
8529: 7C      			ld 		a,h
852A: 32248D  			ld 		(SIScreenHeight),a
852D: EB      			ex 		de,hl 								; save driver
852E: 22328D  			ld 		(SIScreenDriver),hl
              	
8531: 6A      			ld 		l,d 								; put sizes in HL DE
8532: 2600    			ld 		h,0
8534: 1600    			ld 		d,0
8536: CDB086  			call 	MULTMultiply16 						; multiply to get size and store.
8539: 22288D  			ld 		(SIScreenSize),hl
              	
853C: E1      			pop 	hl
853D: D1      			pop 	de
853E: C1      			pop 	bc
853F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
8540:         	GFXWriteCharacter:
8540: F5      			push 	af
8541: C5      			push 	bc
8542: D5      			push 	de
8543: E5      			push 	hl
8544: 014E85  			ld 		bc,__GFXWCExit
8547: C5      			push 	bc
8548: ED4B328D			ld 		bc,(SIScreenDriver)
854C: C5      			push 	bc
854D: C9      			ret
854E:         	__GFXWCExit:
854E: E1      			pop 	hl
854F: D1      			pop 	de
8550: C1      			pop 	bc
8551: F1      			pop 	af
8552: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8553:         	GFXWriteHexWord:
8553: 3E05    			ld 		a,5
8555:         	GFXWriteHexWordA:
8555: C5      			push 	bc
8556: D5      			push 	de
8557: E5      			push 	hl
8558: 4F      			ld 		c,a
8559: 7A      			ld 		a,d
855A: D5      			push 	de
855B: CD6785  			call 	__GFXWHByte
855E: D1      			pop 	de
855F: 7B      			ld 		a,e
8560: CD6785  			call	__GFXWHByte
8563: E1      			pop 	hl
8564: D1      			pop 	de
8565: C1      			pop 	bc
8566: C9      			ret
              	
8567:         	__GFXWHByte:
8567: F5      			push 	af
8568: CB0F    			rrc 	a
856A: CB0F    			rrc		a
856C: CB0F    			rrc 	a
856E: CB0F    			rrc 	a
8570: CD7485  			call 	__GFXWHNibble
8573: F1      			pop 	af
8574:         	__GFXWHNibble:
8574: 51      			ld 		d,c
8575: E60F    			and 	15
8577: FE0A    			cp 		10
8579: 3802    			jr 		c,__GFXWHDigit
857B: C607    			add		a,7
857D:         	__GFXWHDigit:
857D: C630    			add 	a,48
857F: 5F      			ld 		e,a
8580: CD4085  			call 	GFXWriteCharacter
8583: 23      			inc 	hl
8584: C9      			ret
              		include "components/console/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8585:         	IOScanKeyboard:
8585: C5      			push 	bc
8586: D5      			push 	de
8587: E5      			push 	hl
              	
8588: 21DA85  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
858B: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
858D: 06FE    			ld 		b,$FE
858F: ED78    			in 		a,(c)
8591: CB47    			bit 	0,a
8593: 2005    			jr 		nz,__kr1
8595: 210286  			ld 		hl,__kr_shift_table
8598: 180B    			jr 		__kr2
859A:         	__kr1:
859A: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
859C: ED78    			in 		a,(c)
859E: CB4F    			bit 	1,a
85A0: 2003    			jr 		nz,__kr2
85A2: 212A86  			ld 		hl,__kr_symbol_shift_table
85A5:         	__kr2:
              	
85A5: 1EFE    			ld 		e,$FE 								; scan pattern.
85A7: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
85A8: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
85AA: FEFE    			cp 		$FE
85AC: 2808    			jr 		z,___kr4
85AE: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
85B0: FE7F    			cp 		$7F
85B2: 2802    			jr 		z,___kr4
85B4: 161F    			ld 		d,$01F 								; check all bits.
85B6:         	___kr4:
85B6: 43      			ld 		b,e 								; scan the keyboard
85B7: 0EFE    			ld 		c,$FE
85B9: ED78    			in 		a,(c)
85BB: 2F      			cpl 										; make that active high.
85BC: A2      			and 	d  									; and with check value.
85BD: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
85BF: 23      			inc 	hl 									; next set of keyboard characters
85C0: 23      			inc 	hl
85C1: 23      			inc 	hl
85C2: 23      			inc 	hl
85C3: 23      			inc 	hl
              	
85C4: 7B      			ld 		a,e 								; get pattern
85C5: 87      			add 	a,a 								; shift left
85C6: F601    			or 		1 									; set bit 1.
85C8: 5F      			ld 		e,a
              	
85C9: FEFF    			cp 		$FF 								; finished when all 1's.
85CB: 20DA    			jr 		nz,__kr3 
85CD: AF      			xor 	a
85CE: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
85D0:         	__kr_keypressed:
85D0: 23      			inc 	hl  								; shift right until carry set
85D1: 1F      			rra
85D2: 30FC    			jr 		nc,__kr_keypressed
85D4: 2B      			dec 	hl 									; undo the last inc hl
85D5: 7E      			ld 		a,(hl) 								; get the character number.
85D6:         	__kr_exit:
85D6: E1      			pop 	hl
85D7: D1      			pop 	de
85D8: C1      			pop 	bc
85D9: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
85DA:         	__kr_no_shift_table:
85DA: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
85DE: 76617364	
85E2: 6667    	
85E4: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
85E8: 74313233	
85EC: 3435    	
85EE: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
85F2: 36706F69	
85F6: 7579    	
85F8: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
85FC: 6820006D	
8600: 6E62    	
              	
8602:         	__kr_shift_table:
8602: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8606: 2F7E7C5C	
860A: 7B7D    	
860C: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
8610: 3E214023	
8614: 2425    	
8616: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
861A: 26223B00	
861E: 5D5B    	
8620: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8624: 5E20002E	
8628: 2C2A    	
              	
862A:         	__kr_symbol_shift_table:
862A: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
862E: 2F7E7C5C	
8632: 7B7D    	
8634: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8638: 3E101112	
863C: 1314    	
863E: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8642: 15223B00	
8646: 5D5B    	
8648: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
864C: 5E20002E	
8650: 2C2A    	
              		include "components/core/divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
8652:         	DIVDivideMod16:
              	
8652: C5      		push 	bc
8653: 42      		ld 		b,d 				; DE 
8654: 4B      		ld 		c,e
8655: EB      		ex 		de,hl
8656: 210000  		ld 		hl,0
8659: 78      		ld 		a,b
865A: 0608    		ld 		b,8
865C:         	Div16_Loop1:
865C: 17      		rla
865D: ED6A    		adc 	hl,hl
865F: ED52    		sbc 	hl,de
8661: 3001    		jr 		nc,Div16_NoAdd1
8663: 19      		add 	hl,de
8664:         	Div16_NoAdd1:
8664: 10F6    		djnz 	Div16_Loop1
8666: 17      		rla
8667: 2F      		cpl
8668: 47      		ld 		b,a
8669: 79      		ld 		a,c
866A: 48      		ld 		c,b
866B: 0608    		ld 		b,8
866D:         	Div16_Loop2:
866D: 17      		rla
866E: ED6A    		adc 	hl,hl
8670: ED52    		sbc 	hl,de
8672: 3001    		jr 		nc,Div16_NoAdd2
8674: 19      		add 	hl,de
8675:         	Div16_NoAdd2:
8675: 10F6    		djnz 	Div16_Loop2
8677: 17      		rla
8678: 2F      		cpl
8679: 51      		ld 		d,c
867A: 5F      		ld 		e,a
867B: C1      		pop 	bc
867C: C9      		ret
              			
              			
              		include "components/core/farmemory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th March 2019
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
867D:         	FARCompileByte:
867D: F5      			push 	af 									; save byte and HL
867E: E5      			push 	hl
867F: F5      			push 	af 									; save byte
8680: 3A0E8D  			ld		a,(HerePage) 						; switch to page
8683: CDDC86  			call 	PAGESwitch
8686: 2A0C8D  			ld 		hl,(Here) 							; write to memory location
8689: F1      			pop 	af
868A: 77      			ld 		(hl),a
868B: 23      			inc 	hl 									; bump memory location
868C: 220C8D  			ld 		(Here),hl 							; write back
868F: CDF586  			call 	PAGERestore
8692: E1      			pop 	hl 									; restore and exit
8693: F1      			pop 	af
8694: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8695:         	FARCompileWord:
8695: F5      			push 	af 									; save byte and HL
8696: D5      			push 	de
8697: E5      			push 	hl
8698: EB      			ex 		de,hl 								; word into DE
8699: 3A0E8D  			ld		a,(HerePage) 						; switch to page
869C: CDDC86  			call 	PAGESwitch
869F: 2A0C8D  			ld 		hl,(Here) 							; write to memory location
86A2: 73      			ld 		(hl),e
86A3: 23      			inc 	hl 	
86A4: 72      			ld 		(hl),d
86A5: 23      			inc 	hl
86A6: 220C8D  			ld 		(Here),hl 							; write back
86A9: CDF586  			call 	PAGERestore
86AC: E1      			pop 	hl
86AD: D1      			pop 	de 									; restore and exit
86AE: F1      			pop 	af
86AF: C9      			ret
              		include "components/core/multiply.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		12th March 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
86B0:         	MULTMultiply16:
86B0: C5      			push 	bc
86B1: D5      			push 	de
86B2: 44      			ld 		b,h 							; get multipliers in DE/BC
86B3: 4D      			ld 		c,l
86B4: 210000  			ld 		hl,0 							; zero total
86B7:         	__Core__Mult_Loop:
86B7: CB41    			bit 	0,c 							; lsb of shifter is non-zero
86B9: 2801    			jr 		z,__Core__Mult_Shift
86BB: 19      			add 	hl,de 							; add adder to total
86BC:         	__Core__Mult_Shift:
86BC: CB38    			srl 	b 								; shift BC right.
86BE: CB19    			rr 		c
86C0: EB      			ex 		de,hl 							; shift DE left
86C1: 29      			add 	hl,hl
86C2: EB      			ex 		de,hl
86C3: 78      			ld 		a,b 							; loop back if BC is nonzero
86C4: B1      			or 		c
86C5: 20F0    			jr 		nz,__Core__Mult_Loop
86C7: D1      			pop 	de
86C8: C1      			pop 	bc
86C9: C9      			ret
              	
              		include "components/core/paging.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		12th March 2019
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
86CA:         	PAGEInitialise:
86CA: E5      			push 	hl
86CB: ED9256  			db 		$ED,$92,$56							; switch to page A
86CE: 3C      			inc 	a
86CF: ED9257  			db 		$ED,$92,$57
86D2: 3D      			dec 	a
86D3: 08      			ex 		af,af' 								; put page in A'
86D4: 21368D  			ld 		hl,__PAGEStackBase 					; reset the page stack
86D7: 22348D  			ld 		(__PAGEStackPointer),hl
86DA: E1      			pop 	hl
86DB: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
86DC:         	PAGESwitch:
86DC: F5      			push 	af
86DD: E5      			push 	hl
              	
86DE: F5      			push 	af 									; save A on stack
86DF: 2A348D  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
86E2: 08      			ex 		af,af'
86E3: 77      			ld 		(hl),a
86E4: 23      			inc 	hl
86E5: 22348D  			ld 		(__PAGEStackPointer),hl
              	
86E8: F1      			pop 	af 									; restore new A
86E9: ED9256  			db 		$ED,$92,$56							; switch to page A
86EC: 3C      			inc 	a
86ED: ED9257  			db 		$ED,$92,$57
86F0: 3D      			dec 	a
86F1: 08      			ex 		af,af' 								; put page in A'
              	
86F2: E1      			pop 	hl
86F3: F1      			pop 	af
86F4: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
86F5:         	PAGERestore:
86F5: F5      			push 	af
86F6: E5      			push 	hl
86F7: 2A348D  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
86FA: 2B      			dec 	hl
86FB: 7E      			ld 		a,(hl)
86FC: 22348D  			ld 		(__PAGEStackPointer),hl
86FF: ED9256  			db 		$ED,$92,$56							; switch to page A
8702: 3C      			inc 	a
8703: ED9257  			db 		$ED,$92,$57
8706: 3D      			dec 	a
8707: 08      			ex 		af,af' 								; update A'
8708: E1      			pop 	hl
8709: F1      			pop 	af
870A: C9      			ret
              					
              		include "temp/binary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Binary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* < word *********
              	
870B:         	define_3c:
870B: CDE48C  		call COMPCompileSelf
870E: 7C      		ld   a,h           ; check if signs different.
870F: AA      		xor  d
8710: 87      		add  a,a          ; CS if different
8711: 3004    		jr   nc,__less_samesign
8713: 7A      		ld   a,d          ; different. set CS to sign of B
8714: 87      		add  a,a          ; if set (negative) B must be < A as A is +ve
8715: 1805    		jr   __less_returnc
8717:         	__less_samesign:
8717: D5      		push  de           ; save DE
8718: EB      		ex   de,hl          ; -1 if B < A
8719: ED52    		sbc  hl,de          ; calculate B - A , hencs CS if < (Carry clear by add a,a)
871B: D1      		pop  de           ; restore DE
871C:         	__less_returnc:
871C: 3E00    		ld   a,0          ; A 0
871E: DE00    		sbc  a,0          ; A $FF if CS.
8720: 6F      		ld   l,a          ; put in HL
8721: 67      		ld   h,a
8722: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* = word *********
              	
8723:         	define_3d:
8723: CDE48C  		call COMPCompileSelf
8726: 7C      		ld   a,h          ; H = H ^ D
8727: AA      		xor  d
8728: 67      		ld   h,a
8729: 7D      		ld   a,l          ; A = (L ^ E) | (H ^ D)
872A: AB      		xor  e
872B: B4      		or   h           ; if A == 0 they are the same.
872C: 210000  		ld   hl,$0000         ; return 0 if different
872F: C0      		ret  nz
8730: 2B      		dec  hl           ; return -1
8731: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* - word *********
              	
8732:         	define_2d:
8732: CDE48C  		call COMPCompileSelf
8735: D5      		push  de           ; save DE
8736: EB      		ex   de,hl          ; HL = B, DE = A
8737: AF      		xor  a            ; clear carry
8738: ED52    		sbc  hl,de          ; calculate B-A
873A: D1      		pop  de           ; restore DE
873B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* * word *********
              	
873C:         	define_2a:
873C: CDE48C  		call COMPCompileSelf
873F: C3B086  		jp   MULTMultiply16
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* / word *********
              	
8742:         	define_2f:
8742: CDE48C  		call COMPCompileSelf
8745: D5      		push  de
8746: CD5286  		call  DIVDivideMod16
8749: EB      		ex   de,hl
874A: D1      		pop  de
874B: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* + macro *********
              	
874C:         	define_2b:
874C: CDEF8C  		call COMPMacroExpand
874F: 0601    		ld b,end_2b-start_2b
8751:         	start_2b:
8751: 19      		add  hl,de
8752:         	end_2b:
8752: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* and word *********
              	
8753:         	define_61_6e_64:
8753: CDE48C  		call COMPCompileSelf
8756: 7C      		ld   a,h
8757: A2      		and  d
8758: 67      		ld   h,a
8759: 7D      		ld   a,l
875A: A3      		and  e
875B: 6F      		ld   l,a
875C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* mod word *********
              	
875D:         	define_6d_6f_64:
875D: CDE48C  		call COMPCompileSelf
8760: D5      		push  de
8761: CD5286  		call  DIVDivideMod16
8764: D1      		pop  de
8765: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* or word *********
              	
8766:         	define_6f_72:
8766: CDE48C  		call COMPCompileSelf
8769: 7C      		ld   a,h
876A: B2      		or   d
876B: 67      		ld   h,a
876C: 7D      		ld   a,l
876D: B3      		or   e
876E: 6F      		ld   l,a
876F: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* xor word *********
              	
8770:         	define_78_6f_72:
8770: CDE48C  		call COMPCompileSelf
8773: 7C      		ld   a,h
8774: AA      		xor  d
8775: 67      		ld   h,a
8776: 7D      		ld   a,l
8777: AB      		xor  e
8778: 6F      		ld   l,a
8779: C9      		ret
              	
              		include "temp/command.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;  File:  command.src
              	;  Date :   19th March 2019
              	;  Author:  paul@robsons.org.uk
              	;  Purpose: Command line code
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	
              	; ********* warm word *********
              	
877A:         	define_77_61_72_6d:
877A: CDE48C  		call COMPCompileSelf
877D: C39087  		jp   WarmStart
              	
8780:         	CommandLineStart:
8780: 210000  		ld   hl,$0000        ; reset registers here.
8783: 22468D  		ld   (__ARegister),hl
8786: 22488D  		ld   (__BRegister),hl
8789: 21FB8C  		ld   hl,__CLIWelcome
878C: 0E05    		ld   c,5
878E: 1809    		jr   WarmStartSetup
8790:         	WarmStart:
8790: 214588  		ld   hl,__CLIWarmStart
8793: 0E04    		ld   c,4
8795: 1802    		jr   WarmStartSetup
8797:         	ErrorHandler:          ; error routines.
8797: 0E02    		ld   c,2
8799:         	WarmStartSetup:
8799: 31FC7E  		ld   sp,StackTop       ; reset Z80 Stack
              	
879C: 3E2A    		ld   a,FirstCodePage      ; reset the paging system
879E: CDCA86  		call  PAGEInitialise
87A1: E5      		push  hl          ; save error message
              	
87A2: 2A288D  		ld   hl,(SIScreenSize)      ; clear the 2nd line
87A5: 11C0FF  		ld   de,-64
87A8: 19      		add  hl,de
87A9: 0620    		ld   b,32
87AB:         	__CLIClear:
87AB: 112001  		ld   de,$0120
87AE: CD4085  		call  GFXWriteCharacter
87B1: 23      		inc  hl
87B2: 10F7    		djnz  __CLIClear
              	
87B4: 2A288D  		ld   hl,(SIScreenSize)      ; half way down 2nd line.
87B7: 11D0FF  		ld   de,-48
87BA: 19      		add  hl,de
              	
87BB: 51      		ld   d,c         ; colour in D
87BC: C1      		pop  bc          ; text in BC
87BD:         	__CLIPrompt:           ; write prompt / message / etc.
87BD: 0A      		ld   a,(bc)
87BE: B7      		or   a
87BF: 280B    		jr   z,__CLIPromptExit
87C1: FACC87  		jp   m,__CLIPromptExit
87C4: 5F      		ld   e,a
87C5: CD4085  		call  GFXWriteCharacter
87C8: 03      		inc  bc
87C9: 23      		inc  hl
87CA: 18F1    		jr   __CLIPrompt
              	
87CC:         	__CLIPromptExit:
87CC: 2A468D  		ld   hl,(__ARegister)      ; load A/B in
87CF: ED5B488D		ld   de,(__BRegister)      ; update that part of the display.
87D3: CDAE88  		call  DEBUGShow
              	
87D6: 2A288D  		ld   hl,(SIScreenSize)     ; bakck to start of 2nd to last row
87D9: 11C0FF  		ld  de,-64
87DC: 19      		add  hl,de
87DD: DD214C8D		ld   ix,__CLIBuffer       ; IX points to buffer
87E1:         	__CLILoop:
87E1: 117F07  		ld   de,$077F        ; display prompt
87E4: CD4085  		call  GFXWriteCharacter
87E7: CD2E88  		call  __CLIGetKey       ; get key
87EA: FE0D    		cp   13          ; exec on CR
87EC: 281C    		jr   z,__CLIExecute
87EE: FE20    		cp   ' '         ; exec on space
87F0: 2818    		jr   z,__CLIExecute
87F2: DA9087  		jp   c,WarmStart       ; any other < ' ' warm start e.g. start again
              	
87F5: DD7700  		ld   (ix+0),a        ; save char in buffer
87F8: 1606    		ld   d,6         ; draw it
87FA: 5F      		ld   e,a
87FB: CD4085  		call  GFXWriteCharacter
              	
87FE: 7D      		ld   a,l         ; reached 15 chars, don't add
87FF: E60F    		and  15
8801: FE0F    		cp   15
8803: 28DC    		jr   z,__CLILoop
8805: 23      		inc  hl          ; move forward
8806: DD23    		inc  ix
8808: 18D7    		jr   __CLILoop
              	
880A:         	__CLIExecute:
880A: DD360080		ld   (ix+0),$80        ; mark end
              	
880E: DD214B8D		ld   ix,__CLIBuffer-1      ; get address of buffer into BC
8812: 7D      		ld   a,l         ; get length
8813: E60F    		and  $0F
8815: F680    		or   $80         ; 1 10 lllll
8817: DD7700  		ld   (ix+0),a        ; make that the tag/
              	
881A: 2A468D  		ld   hl,(__ARegister)      ; Execute as a yellow word in context.
881D: ED5B488D		ld   de,(__BRegister)
8821: CD568B  		call  PROProcessTaggedWord
8824: ED53488D		ld   (__BRegister),de
8828: 22468D  		ld   (__ARegister),hl
882B: C39087  		jp   WarmStart
              	
882E:         	__CLIGetKey:
882E: CD3588  		call  __CLIGetChange
8831: B7      		or   a
8832: 28FA    		jr   z,__CLIGetKey
8834: C9      		ret
8835:         	__CLIGetChange:
8835: C5      		push  bc
8836: 3A6C8D  		ld   a,(__CLICurrentKey)
8839: 47      		ld   b,a
883A:         	__CLIChangeLoop:
883A: CD8585  		call  IOScanKeyboard
883D: B8      		cp   b
883E: 28FA    		jr   z,__CLIChangeLoop
8840: 326C8D  		ld   (__CLICurrentKey),a
8843: C1      		pop  bc
8844: C9      		ret
              	
8845:         	__CLIWarmStart:
8845: 72656164		db   "ready",$00
8849: 7900    	
              		include "temp/console.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;  File:  console.src
              	;  Purpose: con.raw words.
              	;  Date :   12th March 2019
              	;  Author:  paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	
              	; ********* con.raw.setmode word *********
              	
884B:         	define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65:
884B: CDE48C  		call COMPCompileSelf
884E: C30B85  		jp   GFXMode
              	
              	
              	
              	; ********* con.raw.char! word *********
              	
8851:         	define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21:
8851: CDE48C  		call COMPCompileSelf
8854: C34085  		jp   GFXWriteCharacter
              	
              	
              	
              	; ********* con.raw.hex! word *********
              	
8857:         	define_63_6f_6e_2e_72_61_77_2e_68_65_78_21:
8857: CDE48C  		call COMPCompileSelf
885A: C35385  		jp   GFXWriteHexWord
              	
              	
              	
              	; ********* con.raw.inkey word *********
              	
885D:         	define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79:
885D: CDE48C  		call COMPCompileSelf
8860: EB      		ex   de,hl
8861: CD8585  		call  IOScanKeyboard       ; read keyboard
8864: 6F      		ld   l,a
8865: 2600    		ld   h,$00
8867: C9      		ret
              		include "temp/const.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   const.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   19th March 2019.
              	;  Purpose : ASCII -> Decimal.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;     Convert constant at BC to constant in BC, CC if okay.
              	;
              	; ***************************************************************************************
              	
8868:         	CONSTEvaluate:
8868: D5      		push  de          ; save registers
8869: E5      		push  hl
886A: DDE5    		push  ix
886C: 210000  		ld   hl,$0000        ; HL is the result.
886F: 0A      		ld   a,(bc)         ; get the tag
8870: E63F    		and  $3F         ; extract the length into E
8872: 5F      		ld   e,a
8873:         	__CONSTLoop:
8873: 03      		inc  bc          ; next character
8874: 0A      		ld   a,(bc)         ; read it.
8875: FE2D    		cp   '-'         ; negate ?
8877: 2009    		jr   nz,__CONSTCheckDigit     ; no, check digit.
              	
8879: 7C      		ld   a,h         ; negate the current result
887A: 2F      		cpl
887B: 67      		ld   h,a
887C: 7D      		ld   a,l
887D: 2F      		cpl
887E: 6F      		ld   l,a
887F: 23      		inc  hl
8880: 1818    		jr   __CONSTNextChar      ; and get the next character.
              	;
8882:         	__CONSTCheckDigit:
8882: FE30    		cp   '0'         ; check if ASCII digit
8884: 381C    		jr   c,__CONSTFail
8886: FE3A    		cp   '9'+1
8888: 3018    		jr   nc,__CONSTFail
888A: E60F    		and  15          ; make constant
888C: D5      		push  de          ; save DE
888D: F5      		push  af          ; save digit
888E: 5D      		ld   e,l         ; DE = HL
888F: 54      		ld   d,h
8890: 29      		add  hl,hl         ; x 2
8891: 29      		add  hl,hl         ; x 4
8892: 19      		add  hl,de         ; x 5
8893: 29      		add  hl,hl         ; x 10
8894: F1      		pop  af          ; restore digit
8895: 5F      		ld   e,a         ; into DE
8896: 1600    		ld   d,0
8898: 19      		add  hl,de         ; and add
8899: D1      		pop  de          ; restore DE.
              	;
889A:         	__CONSTNextChar:
889A: 1D      		dec  e          ; done all
889B: 20D6    		jr   nz,__CONSTLoop
889D: AF      		xor  a          ; clear carry.
889E: 44      		ld   b,h         ; result in BC
889F: 4D      		ld   c,l
88A0: 1801    		jr   __CONSTExit       ; and exit out.
              	
88A2:         	__CONSTFail:           ; return with CS
88A2: 37      		scf
88A3:         	__CONSTExit:
88A3: DDE1    		pop  ix
88A5: E1      		pop  hl
88A6: D1      		pop  de
88A7: C9      		ret
              		include "temp/debug.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   debug.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   19th March 2019
              	;  Purpose: Show A/B Registers on the screen.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* debug word *********
              	
88A8:         	define_64_65_62_75_67:
88A8: CDE48C  		call COMPCompileSelf
88AB: C3AE88  		jp   DEBUGShow
              	
88AE:         	DEBUGShow:
88AE: C5      		push  bc
88AF: D5      		push  de
88B0: E5      		push  hl
              	
88B1: D5      		push  de          ; save B then A
88B2: E5      		push  hl
              	
88B3: 2A288D  		ld   hl,(SIScreenSize)      ; clear bottom line.
88B6: 11E0FF  		ld   de,-32
88B9: 19      		add  hl,de
88BA: E5      		push  hl
88BB: 0620    		ld   b,32
88BD:         	__DEBUGShowClear:
88BD: 112006  		ld   de,$0620
88C0: CD4085  		call  GFXWriteCharacter
88C3: 23      		inc  hl
88C4: 10F7    		djnz  __DEBUGShowClear
              	
88C6: E1      		pop  hl          ; HL now points to start of bottom line
              	
88C7: 114105  		ld   de,$0500+'A'
88CA: CD4085  		call  GFXWriteCharacter
88CD: 23      		inc  hl
88CE: 113A05  		ld   de,$0500+':'
88D1: CD4085  		call  GFXWriteCharacter
88D4: 23      		inc  hl
88D5: D1      		pop  de          ; get pushed A
88D6: CDF088  		call  __DEBUGPrintDecimalInteger    ; print DE at position HL, C Chars remaining.
88D9: 23      		inc  hl          ; allow a space
              	
88DA: 114205  		ld   de,$0500+'B'
88DD: CD4085  		call  GFXWriteCharacter
88E0: 23      		inc  hl
88E1: 113A05  		ld   de,$0500+':'
88E4: CD4085  		call  GFXWriteCharacter
88E7: 23      		inc  hl
88E8: D1      		pop  de          ; get pushed B
88E9: CDF088  		call  __DEBUGPrintDecimalInteger    ; print DE at position HL, C Chars remaining.
              	
88EC: E1      		pop  hl
88ED: D1      		pop  de
88EE: C1      		pop  bc
88EF: C9      		ret
              	
88F0:         	__DEBUGPrintDecimalInteger:
88F0: D5      		push  de
88F1: CB7A    		bit  7,d         ; is it negative.
88F3: 2807    		jr   z,__DEBUGPrintDecNotNegative
88F5: 7A      		ld   a,d         ; if so, negate the value.
88F6: 2F      		cpl
88F7: 57      		ld   d,a
88F8: 7B      		ld   a,e
88F9: 2F      		cpl
88FA: 5F      		ld   e,a
88FB: 13      		inc  de
88FC:         	__DEBUGPrintDecNotNegative:
88FC: CD0B89  		call  __DEBUGPrintDERecursively
              	
88FF: D1      		pop  de
8900: CB7A    		bit  7,d         ; was it -VE
8902: C8      		ret  z
8903: 112D06  		ld   de,$0600+'-'      ; print a -ve sign
8906: CD4085  		call  GFXWriteCharacter
8909: 23      		inc  hl
890A: C9      		ret
              	
890B:         	__DEBUGPrintDERecursively:
890B: E5      		push  hl          ; save screen position
890C: 210A00  		ld   hl,10         ; divide by 10, DE is division, HL is remainder.
890F: CD5286  		call  DIVDivideMod16
8912: E3      		ex   (sp),hl        ; remainder on TOS, HL contains screen position
8913: 7A      		ld   a,d         ; if DE is non zero call Recursively
8914: B3      		or   e
8915: C40B89  		call  nz,__DEBUGPrintDERecursively
8918: D1      		pop  de          ; DE = remainder
8919: 7B      		ld   a,e         ; convert E to a character
891A: F630    		or   '0'
891C: 5F      		ld   e,a
891D: 1606    		ld   d,6         ; yellow
891F: CD4085  		call  GFXWriteCharacter      ; write digit.
8922: 23      		inc  hl
8923: C9      		ret
              		include "temp/dictionary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   dictionary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019.
              	;  Purpose : Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;  Add Dictionary Word. Name is a tagged string at BC ends in $80-$FF.
              	;  Uses the current page/pointer values.
              	;
              	; ***********************************************************************************************
              	
8924:         	DICTAddWord:
8924: F5      		push  af          ; registers to stack.
8925: C5      		push  bc
8926: D5      		push  de
8927: E5      		push hl
8928: DDE5    		push  ix
              	
892A: C5      		push  bc          ; put word address in HL
892B: E1      		pop  hl
              	
892C: 7E      		ld   a,(hl)         ; get length from tag into B
892D: E63F    		and  $3F
892F: 47      		ld   b,a
8930: 23      		inc  hl          ; HL = first character of word to be added.
              	
8931: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
8933: CDDC86  		call  PAGESwitch
              	
8936: DD2100C0		ld   ix,$C000       ; IX = Start of dictionary
              	
893A:         	__DICTFindEndDictionary:
893A: DD7E00  		ld   a,(ix+0)        ; follow down chain to the end
893D: B7      		or   a
893E: 2807    		jr   z,__DICTCreateEntry
8940: 5F      		ld   e,a         ; go to next.
8941: 1600    		ld   d,0
8943: DD19    		add  ix,de
8945: 18F3    		jr   __DICTFindEndDictionary
              	
8947:         	__DICTCreateEntry:         ; IX now points to the 0 which ends the dictionary.
8947: 78      		ld   a,b
8948: C605    		add  a,5
894A: DD7700  		ld   (ix+0),a        ; offset is length + 5
              	
894D: 3A0E8D  		ld   a,(HerePage)      ; code page
8950: DD7701  		ld   (ix+1),a
              	
8953: ED5B0C8D		ld   de,(Here)        ; code address
8957: DD7302  		ld   (ix+2),e
895A: DD7203  		ld   (ix+3),d
              	
895D: DD7004  		ld   (ix+4),b        ; put length in offset 4
              	
8960: EB      		ex   de,hl         ; put address of name in DE
8961:         	__DICTAddCopy:
8961: 1A      		ld   a,(de)         ; copy byte over as 7 bit ASCII.
8962: DD7705  		ld   (ix+5),a
8965: DD23    		inc  ix
8967: 13      		inc  de
8968: 10F7    		djnz __DICTAddCopy       ; until string is copied over, e.g. B bytes
              	
896A: DD360500		ld   (ix+5),0        ; write end of dictionary zero.
              	
896E: CDF586  		call  PAGERestore
              	
8971: DDE1    		pop  ix          ; restore and exit
8973: E1      		pop  hl
8974: D1      		pop  de
8975: C1      		pop  bc
8976: F1      		pop  af
8977: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;   Find word in dictionary. BC points to tagged string which is the name.
              	;
              	;   On exit, HL is the address and DE the page number with CC if found,
              	;   CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
8978:         	DICTFindWord:
8978: C5      		push  bc         ; save registers - return in DEHL Carry
8979: DDE5    		push  ix
              	
897B: 60      		ld   h,b        ; put address of name in HL.
897C: 69      		ld   l,c        ; this points to the length/type tag.
              	
897D: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
897F: CDDC86  		call  PAGESwitch
              	
8982: DD2100C0		ld   ix,$C000       ; dictionary start
8986:         	__DICTFindMainLoop:
8986: DD7E00  		ld   a,(ix+0)      ; examine offset, exit if zero as we have searched the lot.
8989: B7      		or   a
898A: 283A    		jr   z,__DICTFindFail
              	
898C: DD7E04  		ld   a,(ix+4)       ; length of the word being checked.
898F: AE      		xor  (hl)        ; xor with tag length
8990: E63F    		and  $3F        ; check lower 6 bits
8992: 2029    		jr   nz,__DICTFindNext     ; if different can't be this word as different lengths.
              	
8994: DDE5    		push  ix         ; save pointers on stack.
8996: E5      		push  hl
              	
8997: DD7E04  		ld   a,(ix+4)      ; get the word length to test into B
899A: E63F    		and  $3F
899C: 47      		ld   b,a
899D: 23      		inc  hl         ; skip over tag byte
899E:         	__DICTCheckName:
899E: DD7E05  		ld   a,(ix+5)       ; compare dictionary vs character.
89A1: BE      		cp   (hl)        ; compare vs the matching character.
89A2: 2016    		jr   nz,__DICTFindNoMatch    ; no, not the same word.
89A4: 23      		inc  hl         ; HL point to next character
89A5: DD23    		inc  ix
89A7: 10F5    		djnz  __DICTCheckName     ; do for B characters.
              	
89A9: E1      		pop  hl         ; Found a match. restore HL and IX
89AA: DDE1    		pop  ix
              	
89AC: 1600    		ld   d,0        ; D = 0
89AE: DD5E01  		ld   e,(ix+1)      ; E = page#
89B1: DD6E02  		ld   l,(ix+2)      ; HL = address
89B4: DD6603  		ld   h,(ix+3)
89B7: AF      		xor  a         ; clear the carry flag.
89B8: 1813    		jr   __DICTFindExit
              	
89BA:         	__DICTFindNoMatch:        ; this one doesn't match.
89BA: E1      		pop  hl         ; restore HL and IX
89BB: DDE1    		pop  ix
89BD:         	__DICTFindNext:
89BD: DD5E00  		ld   e,(ix+0)      ; DE = offset to next word
89C0: 1600    		ld   d,$00
89C2: DD19    		add  ix,de        ; IX now points to next word.
89C4: 18C0    		jr   __DICTFindMainLoop    ; and try the next one.
              	
89C6:         	__DICTFindFail:
89C6: 110000  		ld   de,$0000       ; return all zeros.
89C9: 210000  		ld   hl,$0000
89CC: 37      		scf          ; set carry flag
89CD:         	__DICTFindExit:
89CD: F5      		push  af         ; restore original page, preserving carry flag.
89CE: CDF586  		call  PAGERestore
89D1: F1      		pop  af
89D2: DDE1    		pop  ix         ; pop registers and return.
89D4: C1      		pop  bc
89D5: C9      		ret
              	
              	; ***********************************************************************************************
              	;
              	;      Remove underscore prefixed words from the dictionary.
              	;
              	; ***********************************************************************************************
              	
              	
              	
              	; ********* dict.crunch word *********
              	
89D6:         	define_64_69_63_74_2e_63_72_75_6e_63_68:
89D6: CDE48C  		call COMPCompileSelf
              	
89D9:         	DICTCrunchDictionary:
89D9: C5      		push  bc
89DA: D5      		push  de
89DB: E5      		push hl
89DC: DDE5    		push  ix
              	
89DE: 3E20    		ld   a,DictionaryPage     ; switch to dictionary page
89E0: CDDC86  		call  PAGESwitch
89E3: DD2100C0		ld   ix,$C000       ; dictionary start
89E7:         	__DICTCrunchNext:
89E7: DD7E00  		ld   a,(ix+0)
89EA: B7      		or   a
89EB: 2823    		jr   z,__DICTCrunchExit
89ED: DD7E05  		ld   a,(ix+5)       ; check first character
89F0: FE5F    		cp   '_'        ; if not _, try next
89F2: 2013    		jr   nz,__DICTCrunchAdvance
              	
89F4: DDE5    		push  ix
89F6: D1      		pop   de         ; DE = start position
89F7: DD6E00  		ld   l,(ix+0)      ; HL = start + offset
89FA: 2600    		ld   h,0
89FC: 19      		add  hl,de
89FD: 7C      		ld   a,h        ; BC = count
89FE: 2F      		cpl
89FF: 47      		ld   b,a
8A00: 7D      		ld   a,l
8A01: 2F      		cpl
8A02: 4F      		ld   c,a
8A03: EDB0    		ldir          ; copy it
8A05: 18E0    		jr   __DICTCrunchNext     ; retry from the same position.
              	
8A07:         	__DICTCrunchAdvance:       ; go to next slot.
8A07: DD5E00  		ld   e,(ix+0)      ; DE = offset
8A0A: 1600    		ld   d,0
8A0C: DD19    		add  ix,de        ; go gorward
8A0E: 18D7    		jr   __DICTCrunchNext
              	
8A10:         	__DICTCrunchExit:
8A10: DDE1    		pop  ix
8A12: E1      		pop  hl
8A13: D1      		pop  de
8A14: C1      		pop  bc
8A15: C9      		ret
              	
              	
              		include "temp/loader.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   loader.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   19th March 2019.
              	;  Purpose : Loads in source pages
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;      Load in Pages from A until stopped.
              	;
              	; ***************************************************************************************
              	
              	
              	
              	; ********* loadfrom word *********
              	
8A16:         	define_6c_6f_61_64_66_72_6f_6d:
8A16: CDE48C  		call COMPCompileSelf
              	
8A19:         	LOADLoadPages:
              	
8A19: D5      		push  de          ; save registers
8A1A: E5      		push  hl
8A1B: DDE5    		push  ix
8A1D: CD808A  		call  LOADGetPageAndAddress     ; convert to page and address
              	
8A20: 2101AA  		ld   hl,$AA01
8A23: 1102BB  		ld   de,$BB02
              	
8A26:         	__LOADPageLoop:
8A26: CD368A  		call  LOADProcessPage      ; process Page A from IX to End.
8A29: DD2100C0		ld   ix,$C000        ; reset IX to start of next buffer
8A2D: C602    		add  a,2         ; go to next 16k page pair.
8A2F: FE26    		cp   FirstSourcePage+SourcePageCount  ; reached the end.
8A31: 20F3    		jr   nz,__LOADPageLoop      ; go back.
8A33: C38087  		jp   CommandLineStart
              	
              	
              	; ***************************************************************************************
              	;
              	;       Process Page A from IX to End
              	;
              	; ***************************************************************************************
              	
8A36:         	LOADProcessPage:
8A36: F5      		push  af          ; save A IX
8A37: DDE5    		push  ix
8A39: CDDC86  		call  PAGESwitch        ; switch to that page
8A3C:         	__LOADPLoop:
8A3C: DD7E00  		ld   a,(ix+0)        ; look at first character on page
8A3F: FE80    		cp   $80         ; is there something here ?
8A41: 282F    		jr   z,__LOADPNext       ; if not, go to next.
8A43: DDE5    		push  ix          ; save current position
              	
8A45: D5      		push  de          ; save DE and HL
8A46: E5      		push  hl
8A47: 11087B  		ld   de,EditBuffer       ; copy IX into edit buffer
8A4A: DDE5    		push  ix
8A4C: E1      		pop  hl
8A4D: 010002  		ld   bc,EditPageSize
8A50: EDB0    		ldir
8A52: E1      		pop  hl          ; restore HL and DE
8A53: D1      		pop  de
8A54: DD21087B		ld   ix,EditBuffer       ; start processing from the edit buffer/
              	
8A58:         	__LOADPDoLoop:
8A58: DD7E00  		ld   a,(ix+0)       ; get first tag
8A5B: FE80    		cp   $80         ; end ?
8A5D: 2811    		jr   z,__LOADPDoExit      ; then exit
              	
8A5F: CD568B  		call  PROProcessTaggedWord     ; do - something with it.
              	
8A62: DD7E00  		ld   a,(ix+0)       ; get length into BC
8A65: E63F    		and  $3F
8A67: 4F      		ld   c,a
8A68: 0600    		ld   b,$00
8A6A: DD09    		add  ix,bc         ; go to next word
8A6C: DD23    		inc  ix          ; +1 for the tag byte
8A6E: 18E8    		jr   __LOADPDoLoop
              	
8A70:         	__LOADPDoExit:
8A70: DDE1    		pop  ix          ; restore current position
8A72:         	__LOADPNext:
8A72: 010002  		ld   bc,EditPageSize      ; go to next page
8A75: DD09    		add  ix,bc         ; until reached the end.
8A77: 30C3    		jr   nc,__LOADPLoop       ; until done the pages to $0000.
8A79: CDF586  		call  PAGERestore
8A7C: DDE1    		pop  ix          ; restore A IX
8A7E: F1      		pop  af
8A7F: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;     Convert a page number in HL to an address in IX, and page in A.
              	;
              	; ***************************************************************************************
              	
8A80:         	LOADGetPageAndAddress:
8A80: E5      		push  hl          ; save HL twice
8A81: E5      		push  hl
8A82: 7D      		ld   a,l         ; get offset in page (32 source pages/page)
8A83: E61F    		and  31
8A85: 87      		add  a,a         ; 2 x offset, x 512 by putting it in H
8A86: C6C0    		add  a,$C0         ; offset from $C000
8A88: 67      		ld   h,a
8A89: 2E00    		ld   l,$00
8A8B: E5      		push  hl          ; copy into IX.
8A8C: DDE1    		pop  ix
8A8E: E1      		pop  hl          ; this is the page number / 32 x 2
8A8F: CB3C    		srl  h
8A91: CB1D    		rr   l
8A93: CB3C    		srl  h
8A95: CB1D    		rr   l
8A97: CB3C    		srl  h
8A99: CB1D    		rr   l
8A9B: CB3C    		srl  h
8A9D: CB1D    		rr   l
8A9F: CB3C    		srl  h
8AA1: CB1D    		rr   l
8AA3: 29      		add  hl,hl         ; HL now contains the offset.
8AA4: 7D      		ld   a,l         ; get in A
8AA5: C622    		add  a,FirstSourcePage      ; offset from first source page
8AA7: E1      		pop  hl          ; restore HL
8AA8: C9      		ret           ; and exit
              	
              	
              		include "temp/memory.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Memory operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ! macro *********
              	
8AA9:         	define_21:
8AA9: CDEF8C  		call COMPMacroExpand
8AAC: 0604    		ld b,end_21-start_21
8AAE:         	start_21:
8AAE: 73      		ld   (hl),e
8AAF: 23      		inc  hl
8AB0: 72      		ld   (hl),d
8AB1: 2B      		dec  hl
8AB2:         	end_21:
8AB2: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* @ macro *********
              	
8AB3:         	define_40:
8AB3: CDEF8C  		call COMPMacroExpand
8AB6: 0604    		ld b,end_40-start_40
8AB8:         	start_40:
8AB8: 7E      		ld   a,(hl)
8AB9: 23      		inc  hl
8ABA: 66      		ld  h,(hl)
8ABB: 6F      		ld  l,a
8ABC:         	end_40:
8ABC: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +! word *********
              	
8ABD:         	define_2b_21:
8ABD: CDE48C  		call COMPCompileSelf
8AC0: 7E      		ld   a,(hl)
8AC1: 83      		add  a,e
8AC2: 77      		ld   (hl),a
8AC3: 23      		inc  hl
8AC4: 7E      		ld   a,(hl)
8AC5: 8A      		adc  a,d
8AC6: 77      		ld   (hl),a
8AC7: 2B      		dec  hl
8AC8: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c! macro *********
              	
8AC9:         	define_63_21:
8AC9: CDEF8C  		call COMPMacroExpand
8ACC: 0601    		ld b,end_63_21-start_63_21
8ACE:         	start_63_21:
8ACE: 73      		ld   (hl),e
8ACF:         	end_63_21:
8ACF: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c@ macro *********
              	
8AD0:         	define_63_40:
8AD0: CDEF8C  		call COMPMacroExpand
8AD3: 0603    		ld b,end_63_40-start_63_40
8AD5:         	start_63_40:
8AD5: 6E      		ld   l,(hl)
8AD6: 2600    		ld   h,0
8AD8:         	end_63_40:
8AD8: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p@ word *********
              	
8AD9:         	define_70_40:
8AD9: CDE48C  		call COMPCompileSelf
8ADC: 42      		ld   b,d
8ADD: 4B      		ld   c,e
8ADE: ED68    		in   l,(c)
8AE0: 2600    		ld   h,0
8AE2: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* p! macro *********
              	
8AE3:         	define_70_21:
8AE3: CDEF8C  		call COMPMacroExpand
8AE6: 0604    		ld b,end_70_21-start_70_21
8AE8:         	start_70_21:
8AE8: 44      		ld   b,h
8AE9: 4D      		ld   c,l
8AEA: ED59    		out  (c),e
8AEC:         	end_70_21:
8AEC: C9      		ret
              		include "temp/miscellany.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   miscellany.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* , word *********
              	
8AED:         	define_2c:
8AED: 00      		nop
8AEE: CDE48C  		call COMPCompileSelf
8AF1: C39586  		jp   FARCompileWord
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ; macro *********
              	
8AF4:         	define_3b:
8AF4: 00      		nop
8AF5: CDEF8C  		call COMPMacroExpand
8AF8: 0601    		ld b,end_3b-start_3b
8AFA:         	start_3b:
8AFA: C9      		ret
8AFB:         	end_3b:
8AFB: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* c, word *********
              	
8AFC:         	define_63_2c:
8AFC: 00      		nop
8AFD: CDE48C  		call COMPCompileSelf
8B00: 7D      		ld   a,l
8B01: C37D86  		jp   FARCompileByte
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* param! word *********
              	
8B04:         	define_70_61_72_61_6d_21:
8B04: CDE48C  		call COMPCompileSelf
8B07: 221C8D  		ld   (Parameter),hl
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* copy word *********
              	
8B0A:         	define_63_6f_70_79:
8B0A: CDE48C  		call COMPCompileSelf
8B0D: ED4B1C8D		ld   bc,(Parameter)
8B11: 78      		ld   a,b
8B12: B1      		or   c
8B13: C8      		ret  z
              	
8B14: C5      		push  bc          ; BC count
8B15: D5      		push  de          ; DE target
8B16: E5      		push  hl          ; HL source
              	
8B17: AF      		xor  a          ; Clear C
8B18: ED52    		sbc  hl,de         ; check overlap ?
8B1A: 300B    		jr   nc,__copy_gt_count      ; if source after target
8B1C: 19      		add  hl,de         ; undo subtract
              	
8B1D: 09      		add  hl,bc         ; add count to HL + DE
8B1E: EB      		ex   de,hl
8B1F: 09      		add  hl,bc
8B20: EB      		ex   de,hl
8B21: 1B      		dec  de          ; dec them, so now at the last byte to copy
8B22: 2B      		dec  hl
8B23: EDB8    		lddr           ; do it backwards
8B25: 1803    		jr   __copy_exit
              	
8B27:         	__copy_gt_count:
8B27: 19      		add  hl,de         ; undo subtract
8B28: EDB0    		ldir          ; do the copy
8B2A:         	__copy_exit:
8B2A: E1      		pop  hl          ; restore registers
8B2B: D1      		pop  de
8B2C: C1      		pop  bc
8B2D: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* fill word *********
              	
8B2E:         	define_66_69_6c_6c:
8B2E: CDE48C  		call COMPCompileSelf
8B31: ED4B1C8D		ld   bc,(Parameter)
8B35: 78      		ld   a,b         ; exit if C = 0
8B36: B1      		or   c
8B37: C8      		ret  z
              	
8B38: C5      		push  bc          ; BC count
8B39: D5      		push  de          ; DE target, L byte
8B3A:         	__fill_loop:
8B3A: 7D      		ld   a,l         ; copy a byte
8B3B: 12      		ld   (de),a
8B3C: 13      		inc  de          ; bump pointer
8B3D: 0B      		dec  bc          ; dec counter and loop
8B3E: 78      		ld   a,b
8B3F: B1      		or   c
8B40: 20F8    		jr   nz,__fill_loop
8B42: D1      		pop  de          ; restore
8B43: C1      		pop  bc
8B44: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* halt word *********
              	
8B45:         	define_68_61_6c_74:
8B45: 00      		nop
8B46: CDE48C  		call COMPCompileSelf
8B49:         	__halt_loop:
8B49: F3      		di
8B4A: 76      		halt
8B4B: 18FC    		jr   __halt_loop
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* break macro *********
              	
8B4D:         	define_62_72_65_61_6b:
8B4D: 00      		nop
8B4E: CDEF8C  		call COMPMacroExpand
8B51: 0602    		ld b,end_62_72_65_61_6b-start_62_72_65_61_6b
8B53:         	start_62_72_65_61_6b:
8B53: DD01    		db   $DD,$01
8B55:         	end_62_72_65_61_6b:
8B55: C9      		ret
              	
              		include "temp/process.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   process.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   19th March 2019.
              	;  Purpose : Process a word
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;    Process a word at IX, with A=HL B=DE as per usual.
              	;
              	; ***************************************************************************************
              	
8B56:         	PROProcessTaggedWord:
8B56: DD7E00  		ld   a,(ix+0)       ; Check type
8B59: E6C0    		and  $C0         ; strip off length leaving tag
8B5B: 2809    		jr   z,__PRODefinition      ; $00 is RED definition
8B5D: FE40    		cp   $40         ; $40 is GREEN compilation
8B5F: 2819    		jr   z,__PROCompilation
8B61: FE80    		cp   $80         ; $80 is YELLOW execution
8B63: 2839    		jr   z,__PROExecution
8B65: C9      		ret
              	;
              	;  Handle a RED word (definition), by adding a dictionary reference and a self-compile
              	;  call.
              	;
8B66:         	__PRODefinition:
8B66: DDE5    		push  ix          ; copy word address into BC
8B68: C1      		pop  bc
8B69: CD2489  		call  DICTAddWord       ; add the definition in
8B6C: 3ECD    		ld   a,$CD          ; Z80 call instruction.
8B6E: CD7D86  		call  FARCompileByte
8B71: E5      		push  hl
8B72: 21E48C  		ld   hl,COMPCompileSelf      ; compile self address.
8B75: CD9586  		call  FARCompileWord
8B78: E1      		pop  hl
8B79: C9      		ret
              	;
              	;  Handle a GREEN word, by calling it if it exists to self compile, otherwise try as a
              	;  constant, compiling load constant code.
              	;
8B7A:         	__PROCompilation:
8B7A: D9      		exx           ; temporarily put AB in alternate registers.
8B7B: DDE5    		push  ix          ; put the word address in BC
8B7D: C1      		pop  bc
8B7E: CD7889  		call  DICTFindWord       ; look it up.
8B81: 3805    		jr   c,__PROComTryConstant     ; not found, try as a constant.
              	;
8B83: CDC48B  		call  __PROExecuteEHL      ; Execute E:HL with the a values in the alternate register
8B86: D9      		exx           ; restore the AB values
8B87: C9      		ret
              	;
8B88:         	__PROComTryConstant:
8B88: CD6888  		call  CONSTEvaluate       ; evaluate as a constant.
8B8B: 3847    		jr   c,__PROCError      ; not evaluatable as a constant.
8B8D: 3EEB    		ld   a,$EB         ; compile EX DE,HL
8B8F: CD7D86  		call  FARCompileByte
8B92: 3E21    		ld   a,$21         ; compile LD HL,xxxx
8B94: CD7D86  		call  FARCompileByte
8B97: 60      		ld   h,b         ; compile constant in BC
8B98: 69      		ld   l,c
8B99: CD9586  		call  FARCompileWord
8B9C: D9      		exx           ; get AB back
8B9D: C9      		ret
              	;
              	;  Handle a YELLOW word, executing it directly.
              	;
8B9E:         	__PROExecution:
8B9E: D9      		exx           ; temporarily put AB in alternate registers.
8B9F: DDE5    		push  ix          ; put the word address in BC
8BA1: C1      		pop  bc
8BA2: CD7889  		call  DICTFindWord       ; look it up.
8BA5: 3813    		jr   c,__PROExeTryConstant     ; not found, try as a constant.
8BA7: 7B      		ld   a,e         ; switch to page
8BA8: CDDC86  		call  PAGESwitch
8BAB: 7E      		ld   a,(hl)         ; read first byte and switch back.
8BAC: CDF586  		call  PAGERestore
8BAF: B7      		or   a          ; if it is zero, (NOP) you cannot execute this.
8BB0: 2822    		jr   z,__PROCError       ; because it is verboten :)
8BB2: 23      		inc  hl          ; skip over the compile-caller to the actual code.
8BB3: 23      		inc  hl
8BB4: 23      		inc  hl
8BB5: CDC48B  		call  __PROExecuteEHL      ; and execute that.
8BB8: D9      		exx            ; restore A/B and exit.
8BB9: C9      		ret
              	;
8BBA:         	__PROExeTryConstant:
8BBA: CD6888  		call  CONSTEvaluate       ; evaluate as a constant.
8BBD: 3815    		jr   c,__PROCError      ; not evaluatable as a constant.
8BBF: C5      		push  bc          ; save result
8BC0: D9      		exx           ; get A B back
8BC1: EB      		ex   de,hl         ; put A into B
8BC2: E1      		pop  hl          ; copy new value into A
8BC3: C9      		ret
              	;
              	;  Execute E:HL using A/B values in HL' and DE'
              	;
8BC4:         	__PROExecuteEHL:
8BC4: 7B      		ld   a,e          ; switch to the correct page
8BC5: CDDC86  		call  PAGESwitch
8BC8: 01CF8B  		ld   bc,__PROExecuteContinue    ; return to here.
8BCB: C5      		push  bc
8BCC: E5      		push  hl          ; call here.
8BCD: D9      		exx           ; restore A/B from HL' DE'
8BCE: C9      		ret           ; call the routine.
8BCF:         	__PROExecuteContinue:
8BCF: D9      		exx           ; save A/B back in HL' DE'
8BD0: CDF586  		call  PAGERestore       ; back to the original page.
8BD3: C9      		ret
              	;
              	;  Error
              	;
8BD4:         	__PROCError:           ; can't process word.
8BD4: DDE5    		push  ix
8BD6: DD7E00  		ld   a,(ix+0)
8BD9: E63F    		and  $3F
8BDB: 4F      		ld   c,a
8BDC: 0600    		ld   b,0
8BDE: DD09    		add  ix,bc
8BE0: DD360120		ld   (ix+1),' '
8BE4: DD36023F		ld   (ix+2),'?'
8BE8: DD36033F		ld   (ix+3),'?'
8BEC: DD360480		ld   (ix+4),$80
8BF0: E1      		pop  hl
8BF1: 23      		inc  hl
8BF2: C39787  		jp   ErrorHandler
              		include "temp/register.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Register manipulation
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* swap macro *********
              	
8BF5:         	define_73_77_61_70:
8BF5: CDEF8C  		call COMPMacroExpand
8BF8: 0601    		ld b,end_73_77_61_70-start_73_77_61_70
8BFA:         	start_73_77_61_70:
8BFA: EB      		ex   de,hl
8BFB:         	end_73_77_61_70:
8BFB: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>b macro *********
              	
8BFC:         	define_61_3e_62:
8BFC: CDEF8C  		call COMPMacroExpand
8BFF: 0602    		ld b,end_61_3e_62-start_61_3e_62
8C01:         	start_61_3e_62:
8C01: 54      		ld   d,h
8C02: 5D      		ld   e,l
8C03:         	end_61_3e_62:
8C03: C9      		ret
              	
              	
              	
              	
              	; ********* b>a macro *********
              	
8C04:         	define_62_3e_61:
8C04: CDEF8C  		call COMPMacroExpand
8C07: 0602    		ld b,end_62_3e_61-start_62_3e_61
8C09:         	start_62_3e_61:
8C09: 62      		ld   h,d
8C0A: 6B      		ld   l,e
8C0B:         	end_62_3e_61:
8C0B: C9      		ret
              	
              		include "temp/stack.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Stack words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* push macro *********
              	
8C0C:         	define_70_75_73_68:
8C0C: 00      		nop
8C0D: CDEF8C  		call COMPMacroExpand
8C10: 0601    		ld b,end_70_75_73_68-start_70_75_73_68
8C12:         	start_70_75_73_68:
8C12: E5      		push  hl
8C13:         	end_70_75_73_68:
8C13: C9      		ret
              	
              	
              	
              	; ********* pop macro *********
              	
8C14:         	define_70_6f_70:
8C14: 00      		nop
8C15: CDEF8C  		call COMPMacroExpand
8C18: 0602    		ld b,end_70_6f_70-start_70_6f_70
8C1A:         	start_70_6f_70:
8C1A: EB      		ex   de,hl
8C1B: E1      		pop  hl
8C1C:         	end_70_6f_70:
8C1C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* a>r macro *********
              	
8C1D:         	define_61_3e_72:
8C1D: 00      		nop
8C1E: CDEF8C  		call COMPMacroExpand
8C21: 0601    		ld b,end_61_3e_72-start_61_3e_72
8C23:         	start_61_3e_72:
8C23: E5      		push  hl
8C24:         	end_61_3e_72:
8C24: C9      		ret
              	
              	
              	
              	; ********* r>a macro *********
              	
8C25:         	define_72_3e_61:
8C25: 00      		nop
8C26: CDEF8C  		call COMPMacroExpand
8C29: 0601    		ld b,end_72_3e_61-start_72_3e_61
8C2B:         	start_72_3e_61:
8C2B: E1      		pop  hl
8C2C:         	end_72_3e_61:
8C2C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* b>r macro *********
              	
8C2D:         	define_62_3e_72:
8C2D: 00      		nop
8C2E: CDEF8C  		call COMPMacroExpand
8C31: 0601    		ld b,end_62_3e_72-start_62_3e_72
8C33:         	start_62_3e_72:
8C33: D5      		push  de
8C34:         	end_62_3e_72:
8C34: C9      		ret
              	
              	
              	
              	; ********* r>b macro *********
              	
8C35:         	define_72_3e_62:
8C35: 00      		nop
8C36: CDEF8C  		call COMPMacroExpand
8C39: 0601    		ld b,end_72_3e_62-start_72_3e_62
8C3B:         	start_72_3e_62:
8C3B: D1      		pop  de
8C3C:         	end_72_3e_62:
8C3C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ab>r macro *********
              	
8C3D:         	define_61_62_3e_72:
8C3D: 00      		nop
8C3E: CDEF8C  		call COMPMacroExpand
8C41: 0602    		ld b,end_61_62_3e_72-start_61_62_3e_72
8C43:         	start_61_62_3e_72:
8C43: D5      		push  de
8C44: E5      		push  hl
8C45:         	end_61_62_3e_72:
8C45: C9      		ret
              	
              	
              	
              	; ********* r>ab macro *********
              	
8C46:         	define_72_3e_61_62:
8C46: 00      		nop
8C47: CDEF8C  		call COMPMacroExpand
8C4A: 0602    		ld b,end_72_3e_61_62-start_72_3e_61_62
8C4C:         	start_72_3e_61_62:
8C4C: E1      		pop  hl
8C4D: D1      		pop  de
8C4E:         	end_72_3e_61_62:
8C4E: C9      		ret
              		include "temp/unary.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Unary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
              	
              	; ********* -- macro *********
              	
8C4F:         	define_2d_2d:
8C4F: CDEF8C  		call COMPMacroExpand
8C52: 0601    		ld b,end_2d_2d-start_2d_2d
8C54:         	start_2d_2d:
8C54: 2B      		dec  hl
8C55:         	end_2d_2d:
8C55: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* --- macro *********
              	
8C56:         	define_2d_2d_2d:
8C56: CDEF8C  		call COMPMacroExpand
8C59: 0602    		ld b,end_2d_2d_2d-start_2d_2d_2d
8C5B:         	start_2d_2d_2d:
8C5B: 2B      		dec  hl
8C5C: 2B      		dec  hl
8C5D:         	end_2d_2d_2d:
8C5D: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* ++ macro *********
              	
8C5E:         	define_2b_2b:
8C5E: CDEF8C  		call COMPMacroExpand
8C61: 0601    		ld b,end_2b_2b-start_2b_2b
8C63:         	start_2b_2b:
8C63: 23      		inc  hl
8C64:         	end_2b_2b:
8C64: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* +++ macro *********
              	
8C65:         	define_2b_2b_2b:
8C65: CDEF8C  		call COMPMacroExpand
8C68: 0602    		ld b,end_2b_2b_2b-start_2b_2b_2b
8C6A:         	start_2b_2b_2b:
8C6A: 23      		inc  hl
8C6B: 23      		inc  hl
8C6C:         	end_2b_2b_2b:
8C6C: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0- word *********
              	
8C6D:         	define_30_2d:
8C6D: CDE48C  		call COMPCompileSelf
8C70:         	__negate:
8C70: 7C      		ld   a,h
8C71: 2F      		cpl
8C72: 67      		ld   h,a
8C73: 7D      		ld   a,l
8C74: 2F      		cpl
8C75: 6F      		ld   l,a
8C76: 23      		inc  hl
8C77: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0< word *********
              	
8C78:         	define_30_3c:
8C78: CDE48C  		call COMPCompileSelf
8C7B: CB7C    		bit  7,h
8C7D: 210000  		ld   hl,$0000
8C80: C8      		ret  z
8C81: 2B      		dec  hl
8C82: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 0= word *********
              	
8C83:         	define_30_3d:
8C83: CDE48C  		call COMPCompileSelf
8C86: 7C      		ld   a,h
8C87: B5      		or   l
8C88: 210000  		ld   hl,$0000
8C8B: C0      		ret  nz
8C8C: 2B      		dec  hl
8C8D: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2* macro *********
              	
8C8E:         	define_32_2a:
8C8E: CDEF8C  		call COMPMacroExpand
8C91: 0601    		ld b,end_32_2a-start_32_2a
8C93:         	start_32_2a:
8C93: 29      		add  hl,hl
8C94:         	end_32_2a:
8C94: C9      		ret
              	
              	
              	
              	; ********* 4* macro *********
              	
8C95:         	define_34_2a:
8C95: CDEF8C  		call COMPMacroExpand
8C98: 0602    		ld b,end_34_2a-start_34_2a
8C9A:         	start_34_2a:
8C9A: 29      		add  hl,hl
8C9B: 29      		add  hl,hl
8C9C:         	end_34_2a:
8C9C: C9      		ret
              	
              	
              	
              	; ********* 8* macro *********
              	
8C9D:         	define_38_2a:
8C9D: CDEF8C  		call COMPMacroExpand
8CA0: 0603    		ld b,end_38_2a-start_38_2a
8CA2:         	start_38_2a:
8CA2: 29      		add  hl,hl
8CA3: 29      		add  hl,hl
8CA4: 29      		add  hl,hl
8CA5:         	end_38_2a:
8CA5: C9      		ret
              	
              	
              	
              	; ********* 16* macro *********
              	
8CA6:         	define_31_36_2a:
8CA6: CDEF8C  		call COMPMacroExpand
8CA9: 0604    		ld b,end_31_36_2a-start_31_36_2a
8CAB:         	start_31_36_2a:
8CAB: 29      		add  hl,hl
8CAC: 29      		add  hl,hl
8CAD: 29      		add  hl,hl
8CAE: 29      		add  hl,hl
8CAF:         	end_31_36_2a:
8CAF: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* 2/ macro *********
              	
8CB0:         	define_32_2f:
8CB0: CDEF8C  		call COMPMacroExpand
8CB3: 0604    		ld b,end_32_2f-start_32_2f
8CB5:         	start_32_2f:
8CB5: CB2C    		sra  h
8CB7: CB1D    		rr   l
8CB9:         	end_32_2f:
8CB9: C9      		ret
              	
              	
              	
              	; ********* 4/ macro *********
              	
8CBA:         	define_34_2f:
8CBA: CDEF8C  		call COMPMacroExpand
8CBD: 0608    		ld b,end_34_2f-start_34_2f
8CBF:         	start_34_2f:
8CBF: CB2C    		sra  h
8CC1: CB1D    		rr   l
8CC3: CB2C    		sra  h
8CC5: CB1D    		rr   l
8CC7:         	end_34_2f:
8CC7: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* abs word *********
              	
8CC8:         	define_61_62_73:
8CC8: CDE48C  		call COMPCompileSelf
8CCB: CB7C    		bit  7,h
8CCD: C8      		ret  z
8CCE: C3708C  		jp   __negate
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* bswap macro *********
              	
8CD1:         	define_62_73_77_61_70:
8CD1: CDEF8C  		call COMPMacroExpand
8CD4: 0603    		ld b,end_62_73_77_61_70-start_62_73_77_61_70
8CD6:         	start_62_73_77_61_70:
8CD6: 7D      		ld   a,l
8CD7: 6C      		ld   l,h
8CD8: 67      		ld   h,a
8CD9:         	end_62_73_77_61_70:
8CD9: C9      		ret
              	
              	; ***************************************************************************************
              	
              	
              	
              	; ********* not word *********
              	
8CDA:         	define_6e_6f_74:
8CDA: CDE48C  		call COMPCompileSelf
8CDD: 7C      		ld   a,h
8CDE: 2F      		cpl
8CDF: 67      		ld   h,a
8CE0: 7D      		ld   a,l
8CE1: 2F      		cpl
8CE2: 6F      		ld   l,a
8CE3: C9      		ret
              		include "temp/wordaction.asm"
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   wordaction.src
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   12th March 2019
              	;  Purpose : Routines that belong to word code
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;       Compile a reference to self.
              	;
              	; ***************************************************************************************
              	
8CE4:         	COMPCompileSelf:
8CE4: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8CE5: 3ECD    		ld  a,$CD         ; call opcode
8CE7: CD7D86  		call  FARCompileByte       ; compile that
8CEA: CD9586  		call  FARCompileWord       ; compile the address
8CED: E1      		pop  hl          ; restore old HL
8CEE: C9      		ret
              	
              	; ***************************************************************************************
              	;
              	;         Compile Macro Code
              	;
              	; ***************************************************************************************
              	
8CEF:         	COMPMacroExpand:
8CEF: E3      		ex   (sp),hl        ; HL is the address, old HL on top of stack
8CF0: 23      		inc  hl          ; skip over the LD B,xx opcode
8CF1: 46      		ld   b,(hl)         ; read count
8CF2:         	__COMPMExLoop:
8CF2: 23      		inc  hl          ; get next byte to copy
8CF3: 7E      		ld   a,(hl)
8CF4: CD7D86  		call  FARCompileByte       ; compile that
8CF7: 10F9    		djnz  __COMPMExLoop      ; do it B times.
8CF9: E1      		pop  hl          ; restore old HL
8CFA: C9      		ret
              	
              	
              	
              			include "data.asm"							; data area.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		12th March 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
8CFB:         	__CLIWelcome:
8CFB: 666C6174			db 		"flat.code 190320",$00
8CFF: 2E636F64	
8D03: 65203139	
8D07: 30333230	
8D0B: 00      	
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8D0C:         	SystemInformation:
              	
8D0C:         	Here:												; +0 	Here 
8D0C: 6D8D    			dw 		FreeMemory
8D0E:         	HerePage: 											; +2	Here.Page
8D0E: 2A00    			db 		FirstCodePage,0
8D10:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
8D10: 2C000000			db 		FirstCodePage+2,0,0,0
8D14:         	DisplayInfo: 										; +8 	Display information
8D14: 208D0000			dw 		DisplayInformation,0		
8D18:         	BootAddress:										; +12 	Boot Address
8D18: 2D80    			dw 		BootDefault
8D1A:         	BootPage:											; +14 	Boot Page
8D1A: 2A00    			db 		FirstCodePage,0
8D1C:         	Parameter:	 										; +16 	3rd Parameter
8D1C: 00000000			dw 		0,0		
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8D20:         	DisplayInformation:
              	
8D20:         	SIScreenWidth: 										; +0 	screen width
8D20: 00000000			db 		0,0,0,0	
8D24:         	SIScreenHeight:										; +4 	screen height
8D24: 00000000			db 		0,0,0,0
8D28:         	SIScreenSize:										; +8 	char size of screen
8D28: 00000000			dw 		0,0		
8D2C:         	SIScreenMode:										; +12 	current mode
8D2C: 00000000			db 		0,0,0,0
8D30:         	SIFontBase:											; font in use
8D30: 0B82    			dw 		AlternateFont
8D32:         	SIScreenDriver:										; Screen Driver
8D32: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8D34:         	__PAGEStackPointer: 								; stack used for switching pages
8D34: 0000    			dw 		0
8D36:         	__PAGEStackBase:
8D36: FFFFFFFF			ds 		16
8D3A: FF...   	
              	
              	
8D46:         	__ARegister:										; register temp for command line
8D46: 0000    			dw 		0
8D48:         	__BRegister:
8D48: 0000    			dw 		0
              			
8D4A: 0000    			dw 		0
8D4C:         	__CLIBuffer:
8D4C: FFFFFFFF			ds 		32
8D50: FF...   	
8D6C:         	__CLICurrentKey:
8D6C: 00      			db 		0		
              	
8D6D:         	FreeMemory:											; free memory in $8000-$BFFF page.
              	
8D6D: FFFFFFFF			org 	$C000
8D71: FF...   	
              			include "temp/__dictionary.asm" 			; dictionary.
C000: 06      		db 1+5
C001: 20      		db $20
C002: A98A    		dw define_21
C004: 01      		db 1
C005: 21      		db "!"
              	
C006: 06      		db 1+5
C007: 20      		db $20
C008: 3C87    		dw define_2a
C00A: 01      		db 1
C00B: 2A      		db "*"
              	
C00C: 06      		db 1+5
C00D: 20      		db $20
C00E: 4C87    		dw define_2b
C010: 01      		db 1
C011: 2B      		db "+"
              	
C012: 07      		db 2+5
C013: 20      		db $20
C014: BD8A    		dw define_2b_21
C016: 02      		db 2
C017: 2B21    		db "+!"
              	
C019: 07      		db 2+5
C01A: 20      		db $20
C01B: 5E8C    		dw define_2b_2b
C01D: 02      		db 2
C01E: 2B2B    		db "++"
              	
C020: 08      		db 3+5
C021: 20      		db $20
C022: 658C    		dw define_2b_2b_2b
C024: 03      		db 3
C025: 2B2B2B  		db "+++"
              	
C028: 06      		db 1+5
C029: 20      		db $20
C02A: ED8A    		dw define_2c
C02C: 01      		db 1
C02D: 2C      		db ","
              	
C02E: 06      		db 1+5
C02F: 20      		db $20
C030: 3287    		dw define_2d
C032: 01      		db 1
C033: 2D      		db "-"
              	
C034: 07      		db 2+5
C035: 20      		db $20
C036: 4F8C    		dw define_2d_2d
C038: 02      		db 2
C039: 2D2D    		db "--"
              	
C03B: 08      		db 3+5
C03C: 20      		db $20
C03D: 568C    		dw define_2d_2d_2d
C03F: 03      		db 3
C040: 2D2D2D  		db "---"
              	
C043: 06      		db 1+5
C044: 20      		db $20
C045: 4287    		dw define_2f
C047: 01      		db 1
C048: 2F      		db "/"
              	
C049: 07      		db 2+5
C04A: 20      		db $20
C04B: 6D8C    		dw define_30_2d
C04D: 02      		db 2
C04E: 302D    		db "0-"
              	
C050: 07      		db 2+5
C051: 20      		db $20
C052: 788C    		dw define_30_3c
C054: 02      		db 2
C055: 303C    		db "0<"
              	
C057: 07      		db 2+5
C058: 20      		db $20
C059: 838C    		dw define_30_3d
C05B: 02      		db 2
C05C: 303D    		db "0="
              	
C05E: 08      		db 3+5
C05F: 20      		db $20
C060: A68C    		dw define_31_36_2a
C062: 03      		db 3
C063: 31362A  		db "16*"
              	
C066: 07      		db 2+5
C067: 20      		db $20
C068: 8E8C    		dw define_32_2a
C06A: 02      		db 2
C06B: 322A    		db "2*"
              	
C06D: 07      		db 2+5
C06E: 20      		db $20
C06F: B08C    		dw define_32_2f
C071: 02      		db 2
C072: 322F    		db "2/"
              	
C074: 07      		db 2+5
C075: 20      		db $20
C076: 958C    		dw define_34_2a
C078: 02      		db 2
C079: 342A    		db "4*"
              	
C07B: 07      		db 2+5
C07C: 20      		db $20
C07D: BA8C    		dw define_34_2f
C07F: 02      		db 2
C080: 342F    		db "4/"
              	
C082: 07      		db 2+5
C083: 20      		db $20
C084: 9D8C    		dw define_38_2a
C086: 02      		db 2
C087: 382A    		db "8*"
              	
C089: 06      		db 1+5
C08A: 20      		db $20
C08B: F48A    		dw define_3b
C08D: 01      		db 1
C08E: 3B      		db ";"
              	
C08F: 06      		db 1+5
C090: 20      		db $20
C091: 0B87    		dw define_3c
C093: 01      		db 1
C094: 3C      		db "<"
              	
C095: 06      		db 1+5
C096: 20      		db $20
C097: 2387    		dw define_3d
C099: 01      		db 1
C09A: 3D      		db "="
              	
C09B: 06      		db 1+5
C09C: 20      		db $20
C09D: B38A    		dw define_40
C09F: 01      		db 1
C0A0: 40      		db "@"
              	
C0A1: 08      		db 3+5
C0A2: 20      		db $20
C0A3: FC8B    		dw define_61_3e_62
C0A5: 03      		db 3
C0A6: 613E62  		db "a>b"
              	
C0A9: 08      		db 3+5
C0AA: 20      		db $20
C0AB: 1D8C    		dw define_61_3e_72
C0AD: 03      		db 3
C0AE: 613E72  		db "a>r"
              	
C0B1: 09      		db 4+5
C0B2: 20      		db $20
C0B3: 3D8C    		dw define_61_62_3e_72
C0B5: 04      		db 4
C0B6: 61623E72		db "ab>r"
              	
C0BA: 08      		db 3+5
C0BB: 20      		db $20
C0BC: C88C    		dw define_61_62_73
C0BE: 03      		db 3
C0BF: 616273  		db "abs"
              	
C0C2: 08      		db 3+5
C0C3: 20      		db $20
C0C4: 5387    		dw define_61_6e_64
C0C6: 03      		db 3
C0C7: 616E64  		db "and"
              	
C0CA: 08      		db 3+5
C0CB: 20      		db $20
C0CC: 048C    		dw define_62_3e_61
C0CE: 03      		db 3
C0CF: 623E61  		db "b>a"
              	
C0D2: 08      		db 3+5
C0D3: 20      		db $20
C0D4: 2D8C    		dw define_62_3e_72
C0D6: 03      		db 3
C0D7: 623E72  		db "b>r"
              	
C0DA: 0A      		db 5+5
C0DB: 20      		db $20
C0DC: 4D8B    		dw define_62_72_65_61_6b
C0DE: 05      		db 5
C0DF: 62726561		db "break"
C0E3: 6B      	
              	
C0E4: 0A      		db 5+5
C0E5: 20      		db $20
C0E6: D18C    		dw define_62_73_77_61_70
C0E8: 05      		db 5
C0E9: 62737761		db "bswap"
C0ED: 70      	
              	
C0EE: 07      		db 2+5
C0EF: 20      		db $20
C0F0: C98A    		dw define_63_21
C0F2: 02      		db 2
C0F3: 6321    		db "c!"
              	
C0F5: 07      		db 2+5
C0F6: 20      		db $20
C0F7: FC8A    		dw define_63_2c
C0F9: 02      		db 2
C0FA: 632C    		db "c,"
              	
C0FC: 07      		db 2+5
C0FD: 20      		db $20
C0FE: D08A    		dw define_63_40
C100: 02      		db 2
C101: 6340    		db "c@"
              	
C103: 12      		db 13+5
C104: 20      		db $20
C105: 5188    		dw define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21
C107: 0D      		db 13
C108: 636F6E2E		db "con.raw.char!"
C10C: 7261772E	
C110: 63686172	
C114: 21      	
              	
C115: 11      		db 12+5
C116: 20      		db $20
C117: 5788    		dw define_63_6f_6e_2e_72_61_77_2e_68_65_78_21
C119: 0C      		db 12
C11A: 636F6E2E		db "con.raw.hex!"
C11E: 7261772E	
C122: 68657821	
              	
C126: 12      		db 13+5
C127: 20      		db $20
C128: 5D88    		dw define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79
C12A: 0D      		db 13
C12B: 636F6E2E		db "con.raw.inkey"
C12F: 7261772E	
C133: 696E6B65	
C137: 79      	
              	
C138: 14      		db 15+5
C139: 20      		db $20
C13A: 4B88    		dw define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65
C13C: 0F      		db 15
C13D: 636F6E2E		db "con.raw.setmode"
C141: 7261772E	
C145: 7365746D	
C149: 6F6465  	
              	
C14C: 09      		db 4+5
C14D: 20      		db $20
C14E: 0A8B    		dw define_63_6f_70_79
C150: 04      		db 4
C151: 636F7079		db "copy"
              	
C155: 0A      		db 5+5
C156: 20      		db $20
C157: A888    		dw define_64_65_62_75_67
C159: 05      		db 5
C15A: 64656275		db "debug"
C15E: 67      	
              	
C15F: 10      		db 11+5
C160: 20      		db $20
C161: D689    		dw define_64_69_63_74_2e_63_72_75_6e_63_68
C163: 0B      		db 11
C164: 64696374		db "dict.crunch"
C168: 2E637275	
C16C: 6E6368  	
              	
C16F: 09      		db 4+5
C170: 20      		db $20
C171: 2E8B    		dw define_66_69_6c_6c
C173: 04      		db 4
C174: 66696C6C		db "fill"
              	
C178: 09      		db 4+5
C179: 20      		db $20
C17A: 458B    		dw define_68_61_6c_74
C17C: 04      		db 4
C17D: 68616C74		db "halt"
              	
C181: 0D      		db 8+5
C182: 20      		db $20
C183: 168A    		dw define_6c_6f_61_64_66_72_6f_6d
C185: 08      		db 8
C186: 6C6F6164		db "loadfrom"
C18A: 66726F6D	
              	
C18E: 08      		db 3+5
C18F: 20      		db $20
C190: 5D87    		dw define_6d_6f_64
C192: 03      		db 3
C193: 6D6F64  		db "mod"
              	
C196: 08      		db 3+5
C197: 20      		db $20
C198: DA8C    		dw define_6e_6f_74
C19A: 03      		db 3
C19B: 6E6F74  		db "not"
              	
C19E: 07      		db 2+5
C19F: 20      		db $20
C1A0: 6687    		dw define_6f_72
C1A2: 02      		db 2
C1A3: 6F72    		db "or"
              	
C1A5: 07      		db 2+5
C1A6: 20      		db $20
C1A7: E38A    		dw define_70_21
C1A9: 02      		db 2
C1AA: 7021    		db "p!"
              	
C1AC: 07      		db 2+5
C1AD: 20      		db $20
C1AE: D98A    		dw define_70_40
C1B0: 02      		db 2
C1B1: 7040    		db "p@"
              	
C1B3: 0B      		db 6+5
C1B4: 20      		db $20
C1B5: 048B    		dw define_70_61_72_61_6d_21
C1B7: 06      		db 6
C1B8: 70617261		db "param!"
C1BC: 6D21    	
              	
C1BE: 08      		db 3+5
C1BF: 20      		db $20
C1C0: 148C    		dw define_70_6f_70
C1C2: 03      		db 3
C1C3: 706F70  		db "pop"
              	
C1C6: 09      		db 4+5
C1C7: 20      		db $20
C1C8: 0C8C    		dw define_70_75_73_68
C1CA: 04      		db 4
C1CB: 70757368		db "push"
              	
C1CF: 08      		db 3+5
C1D0: 20      		db $20
C1D1: 258C    		dw define_72_3e_61
C1D3: 03      		db 3
C1D4: 723E61  		db "r>a"
              	
C1D7: 09      		db 4+5
C1D8: 20      		db $20
C1D9: 468C    		dw define_72_3e_61_62
C1DB: 04      		db 4
C1DC: 723E6162		db "r>ab"
              	
C1E0: 08      		db 3+5
C1E1: 20      		db $20
C1E2: 358C    		dw define_72_3e_62
C1E4: 03      		db 3
C1E5: 723E62  		db "r>b"
              	
C1E8: 09      		db 4+5
C1E9: 20      		db $20
C1EA: F58B    		dw define_73_77_61_70
C1EC: 04      		db 4
C1ED: 73776170		db "swap"
              	
C1F1: 09      		db 4+5
C1F2: 20      		db $20
C1F3: 7A87    		dw define_77_61_72_6d
C1F5: 04      		db 4
C1F6: 7761726D		db "warm"
              	
C1FA: 08      		db 3+5
C1FB: 20      		db $20
C1FC: 7087    		dw define_78_6f_72
C1FE: 03      		db 3
C1FF: 786F72  		db "xor"
              	
C202: 00      		db 0
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4203 = 16899

; +++ global symbols +++

AlternateFont         = $820B = 33291          font.asm:1
Boot                  = $8006 = 32774          kernel.asm:32
BootAddress           = $8D18 = 36120          data.asm:31
BootDefault           = $802D = 32813          kernel.asm:50
BootPage              = $8D1A = 36122          data.asm:33
COMPCompileSelf       = $8CE4 = 36068          wordaction.asm:18
COMPMacroExpand       = $8CEF = 36079          wordaction.asm:32
CONSTEvaluate         = $8868 = 34920          const.asm:18
CommandLineStart      = $8780 = 34688          command.asm:20
DEBUGShow             = $88AE = 34990          debug.asm:20
DICTAddWord           = $8924 = 35108          dictionary.asm:19
DICTCrunchDictionary  = $89D9 = 35289          dictionary.asm:170 (unused)
DICTFindWord          = $8978 = 35192          dictionary.asm:90
DIVDivideMod16        = $8652 = 34386          divide.asm:18
DictionaryPage        = $0020 =    32          kernel.asm:16
DisplayInfo           = $8D14 = 36116          data.asm:29 (unused)
DisplayInformation    = $8D20 = 36128          data.asm:44
Div16_Loop1           = $865C = 34396          divide.asm:27
Div16_Loop2           = $866D = 34413          divide.asm:41
Div16_NoAdd1          = $8664 = 34404          divide.asm:33
Div16_NoAdd2          = $8675 = 34421          divide.asm:47
EditBuffer            = $7B08 = 31496          kernel.asm:24
EditPageSize          = $0200 =   512          kernel.asm:19
ErrorHandler          = $8797 = 34711          command.asm:31
FARCompileByte        = $867D = 34429          farmemory.asm:18
FARCompileWord        = $8695 = 34453          farmemory.asm:40
FirstCodePage         = $002A =    42          kernel.asm:20
FirstSourcePage       = $0022 =    34          kernel.asm:17
FreeMemory            = $8D6D = 36205          kernel.asm:62
GFXInitialise48k      = $8037 = 32823          screen48k.asm:19
GFXInitialiseLayer2   = $80AF = 32943          screen_layer2.asm:19
GFXInitialiseLowRes   = $8166 = 33126          screen_lores.asm:18
GFXMode               = $850B = 34059          graphics.asm:18
GFXPrintCharacter48k  = $8063 = 32867          screen48k.asm:53
GFXPrintCharacterLayer2 = $80DF = 32991          screen_layer2.asm:55
GFXPrintCharacterLowRes = $8190 = 33168          screen_lores.asm:50
GFXWriteCharacter     = $8540 = 34112          graphics.asm:64
GFXWriteHexWord       = $8553 = 34131          graphics.asm:87
GFXWriteHexWordA      = $8555 = 34133          graphics.asm:89 (unused)
Here                  = $8D0C = 36108          data.asm:23
HerePage              = $8D0E = 36110          data.asm:25
IOScanKeyboard        = $8585 = 34181          keyboard.asm:19
L2PClear              = $80B8 = 32952          screen_layer2.asm:26
L2PClearBank          = $80C7 = 32967          screen_layer2.asm:34
LOADGetPageAndAddress = $8A80 = 35456          loader.asm:103
LOADLoadPages         = $8A19 = 35353          loader.asm:25
LOADProcessPage       = $8A36 = 35382          loader.asm:50
LowClearScreen        = $8179 = 33145          screen_lores.asm:30
MULTMultiply16        = $86B0 = 34480          multiply.asm:18
NextFreePage          = $8D10 = 36112          data.asm:27 (unused)
PAGEInitialise        = $86CA = 34506          paging.asm:18
PAGERestore           = $86F5 = 34549          paging.asm:64
PAGESwitch            = $86DC = 34524          paging.asm:36
PROProcessTaggedWord  = $8B56 = 35670          process.asm:18
Parameter             = $8D1C = 36124          data.asm:35
SIFontBase            = $8D30 = 36144          data.asm:54
SIScreenDriver        = $8D32 = 36146          data.asm:56
SIScreenHeight        = $8D24 = 36132          data.asm:48
SIScreenMode          = $8D2C = 36140          data.asm:52
SIScreenSize          = $8D28 = 36136          data.asm:50
SIScreenWidth         = $8D20 = 36128          data.asm:46
SourcePageCount       = $0004 =     4          kernel.asm:18
StackTop              = $7EFC = 32508          kernel.asm:25
StopDefault           = $8033 = 32819          kernel.asm:54
SystemInformation     = $8D0C = 36108          data.asm:21
WarmStart             = $8790 = 34704          command.asm:27
WarmStartSetup        = $8799 = 34713          command.asm:33
__ARegister           = $8D46 = 36166          data.asm:71
__BRegister           = $8D48 = 36168          data.asm:73
__CLIBuffer           = $8D4C = 36172          data.asm:77
__CLIChangeLoop       = $883A = 34874          command.asm:124
__CLIClear            = $87AB = 34731          command.asm:44
__CLICurrentKey       = $8D6C = 36204          data.asm:79
__CLIExecute          = $880A = 34826          command.asm:99
__CLIGetChange        = $8835 = 34869          command.asm:120
__CLIGetKey           = $882E = 34862          command.asm:115
__CLILoop             = $87E1 = 34785          command.asm:76
__CLIPrompt           = $87BD = 34749          command.asm:56
__CLIPromptExit       = $87CC = 34764          command.asm:67
__CLIWarmStart        = $8845 = 34885          command.asm:132
__CLIWelcome          = $8CFB = 36091          data.asm:12
__COMPMExLoop         = $8CF2 = 36082          wordaction.asm:36
__CONSTCheckDigit     = $8882 = 34946          const.asm:41
__CONSTExit           = $88A3 = 34979          const.asm:71
__CONSTFail           = $88A2 = 34978          const.asm:69
__CONSTLoop           = $8873 = 34931          const.asm:26
__CONSTNextChar       = $889A = 34970          const.asm:61
__Core__Mult_Loop     = $86B7 = 34487          multiply.asm:24
__Core__Mult_Shift    = $86BC = 34492          multiply.asm:28
__DEBUGPrintDERecursively = $890B = 35083          debug.asm:87
__DEBUGPrintDecNotNegative = $88FC = 35068          debug.asm:76
__DEBUGPrintDecimalInteger = $88F0 = 35056          debug.asm:65
__DEBUGShowClear      = $88BD = 35005          debug.asm:33
__DICTAddCopy         = $8961 = 35169          dictionary.asm:63
__DICTCheckName       = $899E = 35230          dictionary.asm:118
__DICTCreateEntry     = $8947 = 35143          dictionary.asm:48
__DICTCrunchAdvance   = $8A07 = 35335          dictionary.asm:201
__DICTCrunchExit      = $8A10 = 35344          dictionary.asm:207
__DICTCrunchNext      = $89E7 = 35303          dictionary.asm:179
__DICTFindEndDictionary = $893A = 35130          dictionary.asm:39
__DICTFindExit        = $89CD = 35277          dictionary.asm:149
__DICTFindFail        = $89C6 = 35270          dictionary.asm:145
__DICTFindMainLoop    = $8986 = 35206          dictionary.asm:101
__DICTFindNext        = $89BD = 35261          dictionary.asm:139
__DICTFindNoMatch     = $89BA = 35258          dictionary.asm:136
__GFXConfigure        = $8525 = 34085          graphics.asm:39
__GFXLayer2           = $851D = 34077          graphics.asm:32
__GFXLowRes           = $8522 = 34082          graphics.asm:36
__GFXWCExit           = $854E = 34126          graphics.asm:74
__GFXWHByte           = $8567 = 34151          graphics.asm:105
__GFXWHDigit          = $857D = 34173          graphics.asm:119
__GFXWHNibble         = $8574 = 34164          graphics.asm:113
__L2Exit              = $815F = 33119          screen_layer2.asm:156
__L2Loop              = $8150 = 33104          screen_layer2.asm:143
__L2Not1              = $80FB = 33019          screen_layer2.asm:77
__L2Not2              = $8101 = 33025          screen_layer2.asm:81
__L2Not3              = $8107 = 33031          screen_layer2.asm:85
__L2NotCursor         = $8112 = 33042          screen_layer2.asm:94
__L2NotSet            = $8156 = 33110          screen_layer2.asm:148
__L2Outer             = $8147 = 33095          screen_layer2.asm:137
__LOADPDoExit         = $8A70 = 35440          loader.asm:86
__LOADPDoLoop         = $8A58 = 35416          loader.asm:71
__LOADPLoop           = $8A3C = 35388          loader.asm:54
__LOADPNext           = $8A72 = 35442          loader.asm:88
__LOADPageLoop        = $8A26 = 35366          loader.asm:35
__LPExit              = $8204 = 33284          screen_lores.asm:143
__LowLoop             = $81F0 = 33264          screen_lores.asm:127
__LowNotLower2        = $81E5 = 33253          screen_lores.asm:119
__LowNotReverse       = $81B2 = 33202          screen_lores.asm:79
__LowNotSet           = $81F6 = 33270          screen_lores.asm:132
__LowOuter            = $81E7 = 33255          screen_lores.asm:121
__PAGEStackBase       = $8D36 = 36150          data.asm:67
__PAGEStackPointer    = $8D34 = 36148          data.asm:65
__PROCError           = $8BD4 = 35796          process.asm:117
__PROComTryConstant   = $8B88 = 35720          process.asm:57
__PROCompilation      = $8B7A = 35706          process.asm:46
__PRODefinition       = $8B66 = 35686          process.asm:31
__PROExeTryConstant   = $8BBA = 35770          process.asm:91
__PROExecuteContinue  = $8BCF = 35791          process.asm:110
__PROExecuteEHL       = $8BC4 = 35780          process.asm:102
__PROExecution        = $8B9E = 35742          process.asm:72
__ZXWCCopy            = $80A3 = 32931          screen48k.asm:115
__ZXWCExit            = $80AA = 32938          screen48k.asm:122
___kr4                = $85B6 = 34230          keyboard.asm:50
__copy_exit           = $8B2A = 35626          miscellany.asm:92
__copy_gt_count       = $8B27 = 35623          miscellany.asm:89
__cs1                 = $8047 = 32839          screen48k.asm:29
__cs2                 = $804F = 32847          screen48k.asm:34
__fill_loop           = $8B3A = 35642          miscellany.asm:113
__halt_loop           = $8B49 = 35657          miscellany.asm:134
__kr1                 = $859A = 34202          keyboard.asm:33
__kr2                 = $85A5 = 34213          keyboard.asm:39
__kr3                 = $85A7 = 34215          keyboard.asm:42
__kr_exit             = $85D6 = 34262          keyboard.asm:80
__kr_keypressed       = $85D0 = 34256          keyboard.asm:74
__kr_no_shift_table   = $85DA = 34266          keyboard.asm:95
__kr_shift_table      = $8602 = 34306          keyboard.asm:101
__kr_symbol_shift_table = $862A = 34346          keyboard.asm:107
__less_returnc        = $871C = 34588          binary.asm:32
__less_samesign       = $8717 = 34583          binary.asm:27
__negate              = $8C70 = 35952          unary.asm:76
_end                  = $C203 = 49667          kernel.asm:26 (unused)
_size                 = $4203 = 16899          kernel.asm:26 (unused)
define_21             = $8AA9 = 35497          memory.asm:16
define_2a             = $873C = 34620          binary.asm:79
define_2b             = $874C = 34636          binary.asm:103
define_2b_21          = $8ABD = 35517          memory.asm:50
define_2b_2b          = $8C5E = 35934          unary.asm:45
define_2b_2b_2b       = $8C65 = 35941          unary.asm:59
define_2c             = $8AED = 35565          miscellany.asm:16
define_2d             = $8732 = 34610          binary.asm:64
define_2d_2d          = $8C4F = 35919          unary.asm:16
define_2d_2d_2d       = $8C56 = 35926          unary.asm:30
define_2f             = $8742 = 34626          binary.asm:89
define_30_2d          = $8C6D = 35949          unary.asm:74
define_30_3c          = $8C78 = 35960          unary.asm:92
define_30_3d          = $8C83 = 35971          unary.asm:106
define_31_36_2a       = $8CA6 = 36006          unary.asm:160
define_32_2a          = $8C8E = 35982          unary.asm:121
define_32_2f          = $8CB0 = 36016          unary.asm:177
define_34_2a          = $8C95 = 35989          unary.asm:133
define_34_2f          = $8CBA = 36026          unary.asm:190
define_38_2a          = $8C9D = 35997          unary.asm:146
define_3b             = $8AF4 = 35572          miscellany.asm:27
define_3c             = $870B = 34571          binary.asm:18
define_3d             = $8723 = 34595          binary.asm:45
define_40             = $8AB3 = 35507          memory.asm:33
define_61_3e_62       = $8BFC = 35836          register.asm:30
define_61_3e_72       = $8C1D = 35869          stack.asm:45
define_61_62_3e_72    = $8C3D = 35901          stack.asm:101
define_61_62_73       = $8CC8 = 36040          unary.asm:207
define_61_6e_64       = $8753 = 34643          binary.asm:117
define_62_3e_61       = $8C04 = 35844          register.asm:44
define_62_3e_72       = $8C2D = 35885          stack.asm:73
define_62_72_65_61_6b = $8B4D = 35661          miscellany.asm:145
define_62_73_77_61_70 = $8CD1 = 36049          unary.asm:219
define_63_21          = $8AC9 = 35529          memory.asm:68
define_63_2c          = $8AFC = 35580          miscellany.asm:42
define_63_40          = $8AD0 = 35536          memory.asm:82
define_63_6f_6e_2e_72_61_77_2e_63_68_61_72_21 = $8851 = 34897          console.asm:24
define_63_6f_6e_2e_72_61_77_2e_68_65_78_21 = $8857 = 34903          console.asm:32
define_63_6f_6e_2e_72_61_77_2e_69_6e_6b_65_79 = $885D = 34909          console.asm:40
define_63_6f_6e_2e_72_61_77_2e_73_65_74_6d_6f_64_65 = $884B = 34891          console.asm:16
define_63_6f_70_79    = $8B0A = 35594          miscellany.asm:64
define_64_65_62_75_67 = $88A8 = 34984          debug.asm:16
define_64_69_63_74_2e_63_72_75_6e_63_68 = $89D6 = 35286          dictionary.asm:167
define_66_69_6c_6c    = $8B2E = 35630          miscellany.asm:104
define_68_61_6c_74    = $8B45 = 35653          miscellany.asm:131
define_6c_6f_61_64_66_72_6f_6d = $8A16 = 35350          loader.asm:22
define_6d_6f_64       = $875D = 34653          binary.asm:133
define_6e_6f_74       = $8CDA = 36058          unary.asm:235
define_6f_72          = $8766 = 34662          binary.asm:146
define_70_21          = $8AE3 = 35555          memory.asm:111
define_70_40          = $8AD9 = 35545          memory.asm:97
define_70_61_72_61_6d_21 = $8B04 = 35588          miscellany.asm:54
define_70_6f_70       = $8C14 = 35860          stack.asm:29
define_70_75_73_68    = $8C0C = 35852          stack.asm:16
define_72_3e_61       = $8C25 = 35877          stack.asm:58
define_72_3e_61_62    = $8C46 = 35910          stack.asm:115
define_72_3e_62       = $8C35 = 35893          stack.asm:86
define_73_77_61_70    = $8BF5 = 35829          register.asm:16
define_77_61_72_6d    = $877A = 34682          command.asm:16
define_78_6f_72       = $8770 = 34672          binary.asm:162
end_21                = $8AB2 = 35506          memory.asm:24
end_2b                = $8752 = 34642          binary.asm:108
end_2b_2b             = $8C64 = 35940          unary.asm:50
end_2b_2b_2b          = $8C6C = 35948          unary.asm:65
end_2d_2d             = $8C55 = 35925          unary.asm:21
end_2d_2d_2d          = $8C5D = 35933          unary.asm:36
end_31_36_2a          = $8CAF = 36015          unary.asm:168
end_32_2a             = $8C94 = 35988          unary.asm:126
end_32_2f             = $8CB9 = 36025          unary.asm:183
end_34_2a             = $8C9C = 35996          unary.asm:139
end_34_2f             = $8CC7 = 36039          unary.asm:198
end_38_2a             = $8CA5 = 36005          unary.asm:153
end_3b                = $8AFB = 35579          miscellany.asm:33
end_40                = $8ABC = 35516          memory.asm:41
end_61_3e_62          = $8C03 = 35843          register.asm:36
end_61_3e_72          = $8C24 = 35876          stack.asm:51
end_61_62_3e_72       = $8C45 = 35909          stack.asm:108
end_62_3e_61          = $8C0B = 35851          register.asm:50
end_62_3e_72          = $8C34 = 35892          stack.asm:79
end_62_72_65_61_6b    = $8B55 = 35669          miscellany.asm:151
end_62_73_77_61_70    = $8CD9 = 36057          unary.asm:226
end_63_21             = $8ACF = 35535          memory.asm:73
end_63_40             = $8AD8 = 35544          memory.asm:88
end_70_21             = $8AEC = 35564          memory.asm:118
end_70_6f_70          = $8C1C = 35868          stack.asm:36
end_70_75_73_68       = $8C13 = 35859          stack.asm:22
end_72_3e_61          = $8C2C = 35884          stack.asm:64
end_72_3e_61_62       = $8C4E = 35918          stack.asm:122
end_72_3e_62          = $8C3C = 35900          stack.asm:92
end_73_77_61_70       = $8BFB = 35835          register.asm:21
start_21              = $8AAE = 35502          memory.asm:19
start_2b              = $8751 = 34641          binary.asm:106
start_2b_2b           = $8C63 = 35939          unary.asm:48
start_2b_2b_2b        = $8C6A = 35946          unary.asm:62
start_2d_2d           = $8C54 = 35924          unary.asm:19
start_2d_2d_2d        = $8C5B = 35931          unary.asm:33
start_31_36_2a        = $8CAB = 36011          unary.asm:163
start_32_2a           = $8C93 = 35987          unary.asm:124
start_32_2f           = $8CB5 = 36021          unary.asm:180
start_34_2a           = $8C9A = 35994          unary.asm:136
start_34_2f           = $8CBF = 36031          unary.asm:193
start_38_2a           = $8CA2 = 36002          unary.asm:149
start_3b              = $8AFA = 35578          miscellany.asm:31
start_40              = $8AB8 = 35512          memory.asm:36
start_61_3e_62        = $8C01 = 35841          register.asm:33
start_61_3e_72        = $8C23 = 35875          stack.asm:49
start_61_62_3e_72     = $8C43 = 35907          stack.asm:105
start_62_3e_61        = $8C09 = 35849          register.asm:47
start_62_3e_72        = $8C33 = 35891          stack.asm:77
start_62_72_65_61_6b  = $8B53 = 35667          miscellany.asm:149
start_62_73_77_61_70  = $8CD6 = 36054          unary.asm:222
start_63_21           = $8ACE = 35534          memory.asm:71
start_63_40           = $8AD5 = 35541          memory.asm:85
start_70_21           = $8AE8 = 35560          memory.asm:114
start_70_6f_70        = $8C1A = 35866          stack.asm:33
start_70_75_73_68     = $8C12 = 35858          stack.asm:20
start_72_3e_61        = $8C2B = 35883          stack.asm:62
start_72_3e_61_62     = $8C4C = 35916          stack.asm:119
start_72_3e_62        = $8C3B = 35899          stack.asm:90
start_73_77_61_70     = $8BFA = 35834          register.asm:19


total time: 0.0107 sec.
no errors
