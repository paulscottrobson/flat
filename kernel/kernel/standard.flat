// ***************************************************************************************************************
// ***************************************************************************************************************
//
//		Name : 		standard.flat
//		Author :	Paul Robson (paul@robsons.org.uk)
//		Date : 		20th March 2019
//		Purpose :	Standard word support set for Flat
//
// ***************************************************************************************************************
// ***************************************************************************************************************

// *****************************************************************************************************
//
//								Get address of system.info area from $8004
//
// *****************************************************************************************************

:system.info a>r 32772 @ r>b ;

// *****************************************************************************************************
//			
//								  Address of display information
//
// *****************************************************************************************************

:display.info a>r system.info 8 + @ r>b ;

// *****************************************************************************************************
//
//											Address of here
//
// *****************************************************************************************************

:h system.info ; 		

// *****************************************************************************************************
//
//									Here value, current address of program
//
// *****************************************************************************************************

:here h @ ;

// *****************************************************************************************************
//
//	 Make a word "compiles". This means when compiled it executes rather than compiling a call to itself
//
// *****************************************************************************************************

:compiles
	[here] [3] [-] [h] [!]										// hack makes this compiles
	here 3 - h !												// what the word does.
;

// *****************************************************************************************************
//
//			Compiles code to get the code address of the preceeding word as a constant.
//
// *****************************************************************************************************

:get.address 
	compiles 													// executed compilesly.
	here 3 - h !  												// unpick the code.
	here ++ @ a>r												// address of the routine.
	235 c, 33 c, r>a ,
;

// *****************************************************************************************************
//
//			Code that is executed for variable <name> <variable> produces ex de,hl ; ld hl,xxxx
//
// *****************************************************************************************************

:__variable.compile 
	235 c, 														// compile ex de,hl
	33 c, r>a , 												// compile ld hl,<address at tos>
;

// *****************************************************************************************************
//
//								Converts a word definition into a variable
//
// *****************************************************************************************************

:variable 
	compiles 													// executed compilesly.
	here 3 - h ! 												// makes the current word compiles.
	0 c, 														// word is not executable.
	205 c, __variable.compile get.address , 					// code to call variable-compile executable.
	0 , 														// Storage.
;

// *****************************************************************************************************
//					
//									Optimisers for variable read/write
//
// *****************************************************************************************************

:@@ 
	compiles 													// operates compilesly
	here a>r  													// get here and save on stack
	3 - h ! 42 c, 												// convert to ex de,hl ; ld hl,(xxxx)
	r>a h ! 													// fix here back.
;

:!! 
	compiles 													// operates compilesly
	here a>r  													// get here and save on stack
	4 - h ! 0 c, 34 c, 											// convert to nop ; ld (xxxx),hl
	r>a h ! 													// fix here back.
;

// *****************************************************************************************************
//
//										If/-If/Then words
//
// *****************************************************************************************************

:__if.branch variable

:if 
	compiles
	124 c, 181 c, 												// Compiles LD A,H ; OR L
	202 c, 														// JZ xxxx
	here __if.branch !! 										// save the branch address.
	0 , 														// dummy branch.
;

:-if 
	compiles
	203 c, 124 c, 												// Compiles BIT 7,H
	202 c, 														// JZ xxxx
	here __if.branch !! 										// save the branch address.
	0 , 														// dummy branch.
;

:then 
	compiles
	here a>r 													// save current here 
	__if.branch @@ h ! r>a , 									// set position to branch address, compile here as address
	h ! 	 													// restore here
;

// *****************************************************************************************************
//
//									    Begin/Until/-Until/Again words
//
// *****************************************************************************************************

:__begin.loop variable

:begin 
	compiles
	here __begin.loop !! 										// save current posiion
;

:again 
	compiles
	195 c, __begin.loop @@ , 									// compile jump back
;

:until 
	compiles
	124 c, 181 c, 												// Compiles LD A,H ; OR L
	202 c, __begin.loop @@ , 									// JZ <back>

;

:-until 
	compiles
	203 c, 124 c, 												// Compiles BIT 7,H
	202 c, __begin.loop @@ , 									// JZ <back>

;

// *****************************************************************************************************
//
//											For/Next/I words
//
// *****************************************************************************************************

:__for.address variable 

:for 
	compiles
	here __for.address !! 										// Save loop address
	43 c, 229 c, 												// DEC HL, PUSH HL
;

:next 
	compiles
	225 c, 														// POP HL
	124 c, 181 c, 												// Compiles LD A,H ; OR L
	194 c, __for.address @@ , 									// JNZ <back>
;

:i  
	compiles
	235 c, 225 c, 229 c, 										// EX DE,HL ; POP HL ; PUSH HL
;

// *****************************************************************************************************
//
//												Min/Max words
//
// *****************************************************************************************************

:min ab>r < if r>ab b>a ; then r>ab ;
:max ab>r < if r>ab ; then r>ab b>a ;

