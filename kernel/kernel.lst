              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-20 21:22:11
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th November 2018
              	;		Purpose :	FlatColorForth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7EF0:         	StackTop   = 	$7EF0 								; Top of stack
7B08:         	EditBuffer = $7B08 									; 512 byte edit buffer (2 bytes either side)
7D10:         	ErrorMessageBuffer = $7D10
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	BootstrapPage = $22 								; bootstrap page
0024:         	FirstCodePage = $24 								; first page of actual code.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1813    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: F189    			dw 		SystemInformationTable
8006: FFFFFFFF			org 	$8010								; $8010 loads word into BC
800A: FF...   	
8010: ED4B1D8A			ld 		bc,(SIWord)
8014: C9      			ret
              	
8015: ED7B058A	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
8019: F3      			di											; disable interrupts
              		
801A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
801E: 2E01    			ld 		l,1 								; set graphics mode 0 (48k Spectrum)
8020: CD0C81  			call 	GFXMode
              	
8023: 3AFD89  			ld 		a,(SIBootCodePage) 					; get the page to start
8026: CD3080  			call 	PAGEInitialise
8029: 2AF989  			ld 		hl,(SIBootCodeAddress) 				; get boot address
802C: E9      			jp 		(hl) 								; and go there
              	
802D:         	ErrorHandler: 										; arrive here with message in ASCII with bit 7 set following
802D: 18FE    			jr 		ErrorHandler
              			
802F:         	COMCopyFollowingCode:
802F:         	COMCompileCallToFollowing:
802F: C9      			ret
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8030:         	PAGEInitialise:
8030: ED9256  			db 		$ED,$92,$56							; switch to page A
8033: 3C      			inc 	a
8034: ED9257  			db 		$ED,$92,$57
8037: 3D      			dec 	a
8038: 08      			ex 		af,af' 								; put page in A'
8039: 21238A  			ld 		hl,PAGEStackBase 					; reset the page stack
803C: 22218A  			ld 		(PAGEStackPointer),hl
803F: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8040:         	PAGESwitch:
8040: F5      			push 	af
8041: E5      			push 	hl
              	
8042: F5      			push 	af 									; save A on stack
8043: 2A218A  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
8046: 08      			ex 		af,af'
8047: 77      			ld 		(hl),a
8048: 23      			inc 	hl
8049: 22218A  			ld 		(PAGEStackPointer),hl
              	
804C: F1      			pop 	af 									; restore new A
804D: ED9256  			db 		$ED,$92,$56							; switch to page A
8050: 3C      			inc 	a
8051: ED9257  			db 		$ED,$92,$57
8054: 3D      			dec 	a
8055: 08      			ex 		af,af' 								; put page in A'
              	
8056: E1      			pop 	hl
8057: F1      			pop 	af
8058: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
8059:         	PAGERestore:
8059: F5      			push 	af
805A: E5      			push 	hl
805B: 2A218A  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
805E: 2B      			dec 	hl
805F: 7E      			ld 		a,(hl)
8060: 22218A  			ld 		(PAGEStackPointer),hl
8063: ED9256  			db 		$ED,$92,$56							; switch to page A
8066: 3C      			inc 	a
8067: ED9257  			db 		$ED,$92,$57
806A: 3D      			dec 	a
806B: E1      			pop 	hl
806C: F1      			pop 	af
806D: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
806E:         	FARCompileByteL:
806E: 7D      			ld 		a,l
              			
806F:         	FARCompileByte:
806F: F5      			push 	af 									; save byte and HL
8070: E5      			push 	hl
8071: F5      			push 	af 									; save byte
8072: 3AF589  			ld		a,(SINextFreeCodePage) 				; switch to page
8075: CD4080  			call 	PAGESwitch
8078: 2AF189  			ld 		hl,(SINextFreeCode) 				; write to memory location
807B: F1      			pop 	af
807C: 77      			ld 		(hl),a
807D: 23      			inc 	hl 									; bump memory location
807E: 22F189  			ld 		(SINextFreeCode),hl 				; write back
8081: CD5980  			call 	PAGERestore
8084: E1      			pop 	hl 									; restore and exit
8085: F1      			pop 	af
8086: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
8087:         	FARCompileWord:
8087: F5      			push 	af 									; save byte and HL
8088: D5      			push 	de
8089: E5      			push 	hl
808A: EB      			ex 		de,hl 								; word into DE
808B: 3AF589  			ld		a,(SINextFreeCodePage) 				; switch to page
808E: CD4080  			call 	PAGESwitch
8091: 2AF189  			ld 		hl,(SINextFreeCode) 				; write to memory location
8094: 73      			ld 		(hl),e
8095: 23      			inc 	hl 	
8096: 72      			ld 		(hl),d
8097: 23      			inc 	hl
8098: 22F189  			ld 		(SINextFreeCode),hl 				; write back
809B: CD5980  			call 	PAGERestore
809E: E1      			pop 	hl
809F: D1      			pop 	de 									; restore and exit
80A0: F1      			pop 	af
80A1: C9      			ret
              												
              	; ***********************************************************************************************
              	;
              	;									Far Read Byte at (SIWord):A
              	;
              	; ***********************************************************************************************
              	
80A2:         	FARRead:
80A2: 3A1D8A  			ld 		a,(SIWord)
80A5: CD4080  			call 	PAGESwitch
80A8: 6E      			ld 		l,(hl)
80A9: 2600    			ld 		h,0
80AB: CD5980  			call 	PAGERestore
80AE: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;									Far Write Byte B.0 at (SIWord):A
              	;
              	; ***********************************************************************************************
              	
80AF:         	FARWrite:
80AF: 3A1D8A  			ld 		a,(SIWord)
80B2: CD4080  			call 	PAGESwitch
80B5: 73      			ld 		(hl),e
80B6: CD5980  			call 	PAGERestore
80B9: C9      			ret
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Words used
              	;
              	; *********************************************************************************
              	
80BA:         	DIVDivide:
80BA: D5      		push 	de
80BB: CDC780  		call 	DIVDivideMod16
80BE: EB      		ex 		de,hl
80BF: D1      		pop 	de
80C0: C9      		ret
              	
80C1:         	DIVModulus:
80C1: D5      		push 	de
80C2: CDC780  		call 	DIVDivideMod16
80C5: D1      		pop 	de
80C6: C9      		ret
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
80C7:         	DIVDivideMod16:
              	
80C7: C5      		push 	bc
80C8: 42      		ld 		b,d 				; DE 
80C9: 4B      		ld 		c,e
80CA: EB      		ex 		de,hl
80CB: 210000  		ld 		hl,0
80CE: 78      		ld 		a,b
80CF: 0608    		ld 		b,8
80D1:         	Div16_Loop1:
80D1: 17      		rla
80D2: ED6A    		adc 	hl,hl
80D4: ED52    		sbc 	hl,de
80D6: 3001    		jr 		nc,Div16_NoAdd1
80D8: 19      		add 	hl,de
80D9:         	Div16_NoAdd1:
80D9: 10F6    		djnz 	Div16_Loop1
80DB: 17      		rla
80DC: 2F      		cpl
80DD: 47      		ld 		b,a
80DE: 79      		ld 		a,c
80DF: 48      		ld 		c,b
80E0: 0608    		ld 		b,8
80E2:         	Div16_Loop2:
80E2: 17      		rla
80E3: ED6A    		adc 	hl,hl
80E5: ED52    		sbc 	hl,de
80E7: 3001    		jr 		nc,Div16_NoAdd2
80E9: 19      		add 	hl,de
80EA:         	Div16_NoAdd2:
80EA: 10F6    		djnz 	Div16_Loop2
80EC: 17      		rla
80ED: 2F      		cpl
80EE: 51      		ld 		d,c
80EF: 5F      		ld 		e,a
80F0: C1      		pop 	bc
80F1: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
80F2:         	MULTMultiply16:
80F2: C5      			push 	bc
80F3: D5      			push 	de
80F4: 44      			ld 		b,h 							; get multipliers in DE/BC
80F5: 4D      			ld 		c,l
80F6: 210000  			ld 		hl,0 							; zero total
80F9:         	__Core__Mult_Loop:
80F9: CB41    			bit 	0,c 							; lsb of shifter is non-zero
80FB: 2801    			jr 		z,__Core__Mult_Shift
80FD: 19      			add 	hl,de 							; add adder to total
80FE:         	__Core__Mult_Shift:
80FE: CB38    			srl 	b 								; shift BC right.
8100: CB19    			rr 		c
8102: EB      			ex 		de,hl 							; shift DE left
8103: 29      			add 	hl,hl
8104: EB      			ex 		de,hl
8105: 78      			ld 		a,b 							; loop back if BC is nonzero
8106: B1      			or 		c
8107: 20F0    			jr 		nz,__Core__Mult_Loop
8109: D1      			pop 	de
810A: C1      			pop 	bc
810B: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
810C:         	GFXMode:
810C: C5      			push 	bc
810D: D5      			push 	de
810E: E5      			push 	hl
810F: 2D      			dec 	l 									; L = 1 mode layer2
8110: 2808    			jr 		z,__GFXLayer2
8112: 2D      			dec 	l
8113: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8115: CD4F82  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
8118: 1808    			jr 		__GFXConfigure
              	
811A:         	__GFXLayer2:
811A: CDC782  			call 	GFXInitialiseLayer2
811D: 1803    			jr 		__GFXConfigure
              	
811F:         	__GFXLowRes:
811F: CD7E83  			call 	GFXInitialiseLowRes
              	
8122:         	__GFXConfigure:
8122: 7D      			ld 		a,l 								; save screen size
8123: 32098A  			ld 		(SIScreenWidth),a
8126: 7C      			ld 		a,h
8127: 320D8A  			ld 		(SIScreenHeight),a
812A: EB      			ex 		de,hl 								; save driver
812B: 22158A  			ld 		(SIScreenDriver),hl
              	
812E: 6A      			ld 		l,d 								; put sizes in HL DE
812F: 2600    			ld 		h,0
8131: 1600    			ld 		d,0
8133: CDF280  			call 	MULTMultiply16 						; multiply to get size and store.
8136: 22118A  			ld 		(SIScreenSize),hl
              	
8139: E1      			pop 	hl
813A: D1      			pop 	de
813B: C1      			pop 	bc
813C: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
813D:         	GFXWriteCharacter:
813D: F5      			push 	af
813E: C5      			push 	bc
813F: D5      			push 	de
8140: E5      			push 	hl
8141: 014B81  			ld 		bc,__GFXWCExit
8144: C5      			push 	bc
8145: ED4B158A			ld 		bc,(SIScreenDriver)
8149: C5      			push 	bc
814A: C9      			ret
814B:         	__GFXWCExit:
814B: E1      			pop 	hl
814C: D1      			pop 	de
814D: C1      			pop 	bc
814E: F1      			pop 	af
814F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8150:         	GFXWriteHexWord:
8150: 3E05    			ld 		a,5
8152:         	GFXWriteHexWordA:
8152: C5      			push 	bc
8153: D5      			push 	de
8154: E5      			push 	hl
8155: 4F      			ld 		c,a
8156: 7A      			ld 		a,d
8157: D5      			push 	de
8158: CD6481  			call 	__GFXWHByte
815B: D1      			pop 	de
815C: 7B      			ld 		a,e
815D: CD6481  			call	__GFXWHByte
8160: E1      			pop 	hl
8161: D1      			pop 	de
8162: C1      			pop 	bc
8163: C9      			ret
              	
8164:         	__GFXWHByte:
8164: F5      			push 	af
8165: CB0F    			rrc 	a
8167: CB0F    			rrc		a
8169: CB0F    			rrc 	a
816B: CB0F    			rrc 	a
816D: CD7181  			call 	__GFXWHNibble
8170: F1      			pop 	af
8171:         	__GFXWHNibble:
8171: 51      			ld 		d,c
8172: E60F    			and 	15
8174: FE0A    			cp 		10
8176: 3802    			jr 		c,__GFXWHDigit
8178: C607    			add		a,7
817A:         	__GFXWHDigit:
817A: C630    			add 	a,48
817C: 5F      			ld 		e,a
817D: CD3D81  			call 	GFXWriteCharacter
8180: 23      			inc 	hl
8181: C9      			ret
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8182:         	IOScanKeyboard:
8182: C5      			push 	bc
8183: D5      			push 	de
8184: E5      			push 	hl
              	
8185: 21D781  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8188: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
818A: 06FE    			ld 		b,$FE
818C: ED78    			in 		a,(c)
818E: CB47    			bit 	0,a
8190: 2005    			jr 		nz,__kr1
8192: 212782  			ld 		hl,__kr_shift_table
8195: 180B    			jr 		__kr2
8197:         	__kr1:
8197: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8199: ED78    			in 		a,(c)
819B: CB4F    			bit 	1,a
819D: 2003    			jr 		nz,__kr2
819F: 21FF81  			ld 		hl,__kr_symbol_shift_table
81A2:         	__kr2:
              	
81A2: 1EFE    			ld 		e,$FE 								; scan pattern.
81A4: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
81A5: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
81A7: FEFE    			cp 		$FE
81A9: 2808    			jr 		z,___kr4
81AB: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
81AD: FE7F    			cp 		$7F
81AF: 2802    			jr 		z,___kr4
81B1: 161F    			ld 		d,$01F 								; check all bits.
81B3:         	___kr4:
81B3: 43      			ld 		b,e 								; scan the keyboard
81B4: 0EFE    			ld 		c,$FE
81B6: ED78    			in 		a,(c)
81B8: 2F      			cpl 										; make that active high.
81B9: A2      			and 	d  									; and with check value.
81BA: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81BC: 23      			inc 	hl 									; next set of keyboard characters
81BD: 23      			inc 	hl
81BE: 23      			inc 	hl
81BF: 23      			inc 	hl
81C0: 23      			inc 	hl
              	
81C1: 7B      			ld 		a,e 								; get pattern
81C2: 87      			add 	a,a 								; shift left
81C3: F601    			or 		1 									; set bit 1.
81C5: 5F      			ld 		e,a
              	
81C6: FEFF    			cp 		$FF 								; finished when all 1's.
81C8: 20DA    			jr 		nz,__kr3 
81CA: AF      			xor 	a
81CB: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81CD:         	__kr_keypressed:
81CD: 23      			inc 	hl  								; shift right until carry set
81CE: 1F      			rra
81CF: 30FC    			jr 		nc,__kr_keypressed
81D1: 2B      			dec 	hl 									; undo the last inc hl
81D2: 7E      			ld 		a,(hl) 								; get the character number.
81D3:         	__kr_exit:
81D3: E1      			pop 	hl
81D4: D1      			pop 	de
81D5: C1      			pop 	bc
81D6: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-95: Std ASCII
              	;
81D7:         	__kr_no_shift_table:
81D7: 005A5843			db 		0,  'Z','X','C','V',			'A','S','D','F','G'
81DB: 56415344	
81DF: 4647    	
81E1: 51574552			db 		'Q','W','E','R','T',			'1','2','3','4','5'
81E5: 54313233	
81E9: 3435    	
81EB: 30393837			db 		'0','9','8','7','6',			'P','O','I','U','Y'
81EF: 36504F49	
81F3: 5559    	
81F5: 0D4C4B4A			db 		13, 'L','K','J','H',			' ', 0, 'M','N','B'
81F9: 4820004D	
81FD: 4E42    	
              	
81FF:         	__kr_symbol_shift_table:
81FF: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8203: 2F7E7C5C	
8207: 7B7D    	
8209: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
820D: 3E214023	
8211: 2425    	
8213: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
8217: 26223B00	
821B: 5D5B    	
821D: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8221: 5E20002E	
8225: 2C2A    	
              	
8227:         	__kr_shift_table:
8227: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
822B: 2F7E7C5C	
822F: 7B7D    	
8231: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
8235: 3E214023	
8239: 2414    	
823B: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
823F: 15223B00	
8243: 5D5B    	
8245: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8249: 5E20002E	
824D: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
824F:         	GFXInitialise48k:
824F: F5      			push 	af 									; save registers
8250: C5      			push 	bc
              	
8251: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8254: 3E00    			ld 		a,0 								; disable Layer 2
8256: ED79    			out 	(c),a
8258: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
825C: 210040  			ld 		hl,$4000 							; clear pixel memory
825F: 3600    	__cs1:	ld 		(hl),0
8261: 23      			inc 	hl
8262: 7C      			ld 		a,h
8263: FE58    			cp 		$58
8265: 20F8    			jr 		nz,__cs1
8267: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8269: 23      			inc 	hl
826A: 7C      			ld 		a,h
826B: FE5B    			cp 		$5B
826D: 20F8    			jr 		nz,__cs2	
826F: AF      			xor 	a 									; border off
8270: D3FE    			out 	($FE),a
8272: C1      			pop 	bc
8273: F1      			pop 	af
8274: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
8277: 117B82  			ld 		de,GFXPrintCharacter48k
827A: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
827B:         	GFXPrintCharacter48k:
827B: F5      			push 	af 									; save registers
827C: C5      			push 	bc
827D: D5      			push 	de
827E: E5      			push 	hl
              	
827F: 43      			ld 		b,e 								; character in B
8280: 7C      			ld 		a,h 								; check range.
8281: FE03    			cp 		3
8283: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8285: E5      			push 	hl 									; save position.
8286: 7C      			ld 		a,h
8287: C658    			add 	$58
8289: 67      			ld 		h,a
              	
828A: 7A      			ld 		a,d 								; get current colour
828B: E607    			and 	7  									; mask 0..2
828D: F640    			or 		$40  								; make bright
828F: 77      			ld 		(hl),a 								; store it.	
8290: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8291: D5      			push 	de
8292: EB      			ex 		de,hl
8293: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8294: 7A      			ld 		a,d
8295: E603    			and 	3
8297: 87      			add 	a,a
8298: 87      			add 	a,a
8299: 87      			add 	a,a
829A: F640    			or 		$40
829C: 67      			ld 		h,a
829D: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
829E: E5      			push 	hl
829F: 78      			ld 		a,b 								; get character
82A0: E67F    			and 	$7F 								; bits 0-6 only.
82A2: D620    			sub 	32
82A4: 6F      			ld 		l,a 								; put in HL
82A5: 2600    			ld 		h,0
82A7: 29      			add 	hl,hl 								; x 8
82A8: 29      			add 	hl,hl
82A9: 29      			add 	hl,hl
82AA: ED5B198A			ld 		de,(SIFontBase) 					; add the font base.
82AE: 19      			add 	hl,de
82AF: EB      			ex 		de,hl 								; put in DE (font address)
82B0: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
82B1: 78      			ld 		a,b
82B2: 0608    			ld 		b,8 								; copy 8 characters
82B4: 0E00    			ld 		c,0 								; XOR value 0
82B6: CB7F    			bit 	7,a 								; is the character reversed
82B8: 2801    			jr 		z,__ZXWCCopy
82BA: 0D      			dec 	c 									; C is the XOR mask now $FF
82BB:         	__ZXWCCopy:
82BB: 1A      			ld 		a,(de)								; get font data
82BC: A9      			xor 	c 									; xor with reverse
82BD: 77      			ld 		(hl),a 								; write back
82BE: 24      			inc 	h 									; bump pointers
82BF: 13      			inc 	de
82C0: 10F9    			djnz 	__ZXWCCopy 							; do B times.
82C2:         	__ZXWCExit:
82C2: E1      			pop 	hl 									; restore and exit
82C3: D1      			pop 	de
82C4: C1      			pop 	bc
82C5: F1      			pop 	af
82C6: C9      			ret
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82C7:         	GFXInitialiseLayer2:
82C7: F5      			push 	af
82C8: C5      			push 	bc
82C9: D5      			push 	de
82CA: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82CE: 1E02    			ld 		e,2 								; 3 banks to erase
82D0:         	L2PClear:
82D0: 7B      			ld 		a,e 								; put bank number in bits 6/7
82D1: CB0F    			rrc 	a
82D3: CB0F    			rrc 	a
82D5: F603    			or 		2+1 								; shadow on, visible, enable write paging
82D7: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82DA: ED79    			out 	(c),a
82DC: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82DF:         	L2PClearBank: 										; assume default palette :)
82DF: 2B      			dec 	hl
82E0: 3600    			ld 		(hl),$00
82E2: 7C      			ld 		a,h
82E3: B5      			or 		l
82E4: 20F9    			jr		nz,L2PClearBank
82E6: 1D      			dec 	e
82E7: F2D082  			jp 		p,L2PClear
              	
82EA: AF      			xor 	a
82EB: D3FE    			out 	($FE),a
              	
82ED: D1      			pop 	de
82EE: C1      			pop 	bc
82EF: F1      			pop 	af
82F0: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82F3: 11F782  			ld 		de,GFXPrintCharacterLayer2
82F6: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82F7:         	GFXPrintCharacterLayer2:
82F7: F5      			push 	af
82F8: C5      			push 	bc
82F9: D5      			push 	de
82FA: E5      			push 	hl
82FB: DDE5    			push 	ix
              	
82FD: 43      			ld 		b,e 								; save A temporarily
82FE: 78      			ld 		a,b
82FF: E67F    			and 	$7F
8301: FE20    			cp 		32
8303: 3872    			jr 		c,__L2Exit 							; check char in range
8305: 7C      			ld 		a,h
8306: FE03    			cp 		3
8308: 306D    			jr 		nc,__L2Exit 						; check position in range
830A: 78      			ld 		a,b
              	
830B: F5      			push 	af 	
830C: AF      			xor 	a 									; convert colour in C to palette index
830D: CB42    			bit 	0,d 								; (assumes standard palette)
830F: 2802    			jr 		z,__L2Not1
8311: F603    			or 		$03
8313:         	__L2Not1:
8313: CB52    			bit 	2,d
8315: 2802    			jr 		z,__L2Not2
8317: F61C    			or 		$1C
8319:         	__L2Not2:
8319: CB4A    			bit 	1,d
831B: 2802    			jr 		z,__L2Not3
831D: F6C0    			or 		$C0
831F:         	__L2Not3:
831F: 4F      			ld 		c,a 								; C is foreground
8320: 0600    			ld 		b,0									; B is xor flipper, initially zero
8322: F1      			pop 	af 									; restore char
              	
8323: E5      			push 	hl
8324: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8326: 2802    			jr 		z,__L2NotCursor
8328: 06FF    			ld 		b,$FF 								; light grey is cursor
832A:         	__L2NotCursor:
832A: E67F    			and 	$7F 								; offset from space
832C: D620    			sub 	$20
832E: 6F      			ld 		l,a 								; put into HL
832F: 2600    			ld 		h,0
8331: 29      			add 	hl,hl 								; x 8
8332: 29      			add 	hl,hl
8333: 29      			add 	hl,hl
              	
8334: E5      			push 	hl 									; transfer to IX
8335: DDE1    			pop 	ix
8337: E1      			pop 	hl
              	
8338: C5      			push 	bc 									; add the font base to it.
8339: ED4B198A			ld 		bc,(SIFontBase)
833D: DD09    			add 	ix,bc
833F: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8340: C5      			push 	bc
8341: 7C      			ld  	a,h 								; this is the page number.
8342: CB0F    			rrc 	a
8344: CB0F    			rrc 	a
8346: E6C0    			and 	$C0 								; in bits 6 & 7
8348: F603    			or 		$03 								; shadow on, visible, enable write pagin.
834A: 013B12  			ld 		bc,$123B 							; out to layer 2 port
834D: ED79    			out 	(c),a
834F: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8350: EB      			ex 		de,hl
8351: 6B      			ld 		l,e
8352: 2600    			ld 		h,0
8354: 29      			add 	hl,hl 								
8355: 29      			add 	hl,hl
8356: 29      			add 	hl,hl
8357: CB24    			sla 	h
8359: CB24    			sla 	h
835B: CB24    			sla 	h
              	
835D: 1E08    			ld 		e,8 								; do 8 rows
835F:         	__L2Outer:
835F: E5      			push 	hl 									; save start
8360: 1608    			ld 		d,8 								; do 8 columns
8362: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8365: A8      			xor 	b 									; maybe flip it ?
8366: DD23    			inc 	ix
8368:         	__L2Loop:
8368: 3600    			ld 		(hl),0 								; background
836A: 87      			add 	a,a 								; shift pattern left
836B: 3001    			jr 		nc,__L2NotSet
836D: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
836E:         	__L2NotSet:
836E: 23      			inc 	hl
836F: 15      			dec 	d 									; do a row
8370: 20F6    			jr 		nz,	__L2Loop
8372: E1      			pop 	hl 									; restore, go 256 bytes down.
8373: 24      			inc 	h
8374: 1D      			dec 	e 									; do 8 rows
8375: 20E8    			jr 		nz,__L2Outer	
8377:         	__L2Exit:
8377: DDE1    			pop 	ix
8379: E1      			pop 	hl
837A: D1      			pop 	de
837B: C1      			pop 	bc
837C: F1      			pop 	af
837D: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
837E:         	GFXInitialiseLowRes:
837E: F5      			push 	af
837F: C5      			push 	bc
8380: D5      			push 	de
              	
8381: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8385: AF      			xor 	a 									; layer 2 off.
8386: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8389: ED79    			out 	(c),a
              	
838B: 210040  			ld 		hl,$4000 							; erase the bank to $00 
838E: 110060  			ld 		de,$6000
8391:         	LowClearScreen: 									; assume default palette :)
8391: AF      			xor 	a
8392: 77      			ld 		(hl),a
8393: 12      			ld 		(de),a
8394: 23      			inc 	hl
8395: 13      			inc 	de
8396: 7C      			ld 		a,h
8397: FE58    			cp 		$58
8399: 20F6    			jr		nz,LowClearScreen
839B: AF      			xor 	a
839C: D3FE    			out 	($FE),a
839E: D1      			pop 	de
839F: C1      			pop 	bc
83A0: F1      			pop 	af
83A1: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
83A4: 11A883  			ld 		de,GFXPrintCharacterLowRes
83A7: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
83A8:         	GFXPrintCharacterLowRes:
83A8: F5      			push 	af
83A9: C5      			push 	bc
83AA: D5      			push 	de
83AB: E5      			push 	hl
83AC: DDE5    			push 	ix
              	
83AE: 43      			ld 		b,e 								; save character in B
83AF: 7B      			ld 		a,e
83B0: E67F    			and 	$7F
83B2: FE20    			cp 		32
83B4: 3866    			jr 		c,__LPExit
              	
83B6: 29      			add 	hl,hl
83B7: 29      			add 	hl,hl
83B8: 7C      			ld	 	a,h 								; check in range 192*4 = 768
83B9: FE03    			cp 		3
83BB: 305F    			jr 		nc,__LPExit
              	
83BD: 7A      			ld 		a,d 								; only lower 3 bits of colour
83BE: E607    			and 	7
83C0: 4F      			ld 		c,a 								; C is foreground
              	
83C1: E5      			push 	hl
83C2: 78      			ld 		a,b 								; get char back
83C3: 0600    			ld 		b,0 								; B = no flip colour.
83C5: CB7F    			bit 	7,a
83C7: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
83C9: 05      			dec 	b
83CA:         	__LowNotReverse:
83CA: E67F    			and 	$7F 								; offset from space
83CC: D620    			sub 	$20
83CE: 6F      			ld 		l,a 								; put into HL
83CF: 2600    			ld 		h,0
83D1: 29      			add 	hl,hl 								; x 8
83D2: 29      			add 	hl,hl
83D3: 29      			add 	hl,hl
              	
83D4: E5      			push 	hl 									; transfer to IX
83D5: DDE1    			pop 	ix
              	
83D7: C5      			push 	bc 									; add the font base to it.
83D8: ED4B198A			ld 		bc,(SIFontBase)
83DC: DD09    			add 	ix,bc
83DE: C1      			pop 	bc
83DF: E1      			pop 	hl
83E0: EB      			ex 		de,hl
83E1: 7B      			ld 		a,e 								; put DE => HL
83E2: E6C0    			and 	192 								; these are part of Y
83E4: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83E5: 62      			ld 		h,d		
83E6: 29      			add 	hl,hl
83E7: 29      			add 	hl,hl
83E8: 29      			add 	hl,hl
83E9: 29      			add 	hl,hl
83EA: CBF4    			set 	6,h 								; put into $4000 range
              	
83EC: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83EE: A3      			and 	e 									; and with E, gives X position
83EF: 87      			add 	a,a 								; now multiplied by 8.
83F0: 5F      			ld 		e,a 								; DE is x offset.
83F1: 1600    			ld 		d,0  
              	
83F3: 19      			add 	hl,de
83F4: 7C      			ld 		a,h
83F5: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83F7: 3804    			jr 		c,__LowNotLower2
83F9: 110008  			ld 		de,$0800
83FC: 19      			add 	hl,de
83FD:         	__LowNotLower2:
83FD: 1E08    			ld 		e,8 								; do 8 rows
83FF:         	__LowOuter:
83FF: E5      			push 	hl 									; save start
8400: 1608    			ld 		d,8 								; do 8 columns
8402: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8405: A8      			xor 	b
8406: DD23    			inc 	ix
8408:         	__LowLoop:
8408: 3600    			ld 		(hl),0 								; background
840A: 87      			add 	a,a 								; shift pattern left
840B: 3001    			jr 		nc,__LowNotSet
840D: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
840E:         	__LowNotSet:
840E: 2C      			inc 	l
840F: 15      			dec 	d 									; do a row
8410: 20F6    			jr 		nz,	__LowLoop
8412: E1      			pop 	hl 									; restore, go 256 bytes down.
8413: D5      			push 	de
8414: 118000  			ld 		de,128
8417: 19      			add 	hl,de
8418: D1      			pop 	de
8419: 1D      			dec 	e 									; do 8 rows
841A: 20E3    			jr 		nz,__LowOuter	
841C:         	__LPExit:
841C: DDE1    			pop 	ix
841E: E1      			pop 	hl
841F: D1      			pop 	de
8420: C1      			pop 	bc
8421: F1      			pop 	af
8422: C9      			ret
              	
              	
              			include "compiler/loader.asm"				; loads in bootstrap code
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		loader.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Source loader
              	;		Date : 		19th November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;									Load the bootstrap page
              	;
              	; ********************************************************************************************************
              	
8423:         	LOADBootstrap:
8423: 3E22    			ld 		a,BootstrapPage 					; set the current page to bootstrap page.
8425: CD4080  			call 	PAGESwitch
8428: DD2100C0			ld 		ix,$C000 							; current section being loaded.
842C: 0E00    			ld 		c,0 								; used to display progress.
              	;
              	;		Once here for every 'chunk'. We copy the text to the editor buffer in 
              	;		chunks (currently 1024 bytes) until we've done all 16k of the page.
              	;
842E:         	__LOADBootLoop:
              	
842E: DDE5    			push 	ix 									; HL = Current Section
8430: E1      			pop 	hl
8431: C5      			push 	bc
8432: 11087B  			ld 		de,EditBuffer  						; Copy to edit buffer 1/2k (512 bytes) of code.
8435: 010002  			ld 		bc,512
8438: EDB0    			ldir 	
843A: C1      			pop 	bc
              	
843B: 2600    			ld 		h,0 								; Progress prompt.
843D: 69      			ld 		l,c
843E: 112A05  			ld 		de,$052A
8441: CD3D81  			call 	GFXWriteCharacter
8444: 0C      			inc 	c
              	
8445: 21087B  			ld 		hl,EditBuffer 						; now scan the edit buffer
8448: CD5B84  			call 	LOADScanBuffer 
              	
844B: 110002  			ld 		de,512 								; add 512 size to IX
844E: DD19    			add 	ix,de
8450: DDE5    			push 	ix									; until wrapped round to $0000
8452: E1      			pop 	hl
8453: CB7C    			bit 	7,h
8455: 20D7    			jr 		nz,__LOADBootLoop
              	
8457:         	__LOADEnds:
8457: F3      			di
8458: 76      			halt
8459: 18FC    			jr 		__LOADEnds
              	
              	; ********************************************************************************************************
              	;
              	;									Process (compiling) the text at HL. 
              	; 
              	; ********************************************************************************************************
              	
845B:         	LOADScanBuffer:
845B: F5      			push 	af
845C: C5      			push 	bc
845D: D5      			push 	de
845E: E5      			push 	hl
845F: DDE5    			push 	ix
              	
8461:         	__LOADScanLoop:
8461: 7E      			ld 		a,(hl) 								; look at tage
8462: FEFF    			cp 		$FF 								; was it $FF ?
8464: 280E    			jr 		z,__LOADScanExit 					; if so, we are done.
              	
8466: DD01    			db 		$DD,$01
              	;		call	PROCESSWord
8468: AF      			xor 	a
              	
8469: 23      			inc 	hl 									; skip tag to first character
846A: DA2D80  			jp 		c,ErrorHandler 						; report word as error if not done.
              	
846D:         	__LOADNextWord: 									; look for the next bit 7 high.
846D: 23      			inc 	hl
846E: CB7E    			bit 	7,(hl)
8470: 28FB    			jr 		z,__LOADNextWord
8472: 18ED    			jr 		__LOADScanLoop 
              	
8474:         	__LOADScanExit:
8474: DDE1    			pop 	ix
8476: E1      			pop 	hl
8477: D1      			pop 	de
8478: C1      			pop 	bc
8479: F1      			pop 	af
847A: C9      			ret
              	
              			include "compiler/dictionary.asm"			; dictionary add/update routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		19th November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at HL ends in $80-$FF, uses the current page/pointer
              	;		values. 
              	;
              	; ***********************************************************************************************
              	
847B:         	DICTAddWord:
847B: F5      			push 	af 									; registers to stack.
847C: C5      			push 	bc
847D: D5      			push 	de
847E: E5      			push	hl
847F: DDE5    			push 	ix
8481: E5      			push 	hl 									
8482: 06FF    			ld 		b,-1								; put length of string in B
8484:         	__DICTAddGetLength:
8484: 23      			inc 	hl
8485: 04      			inc 	b
8486: CB7E    			bit 	7,(hl)
8488: 28FA    			jr 		z,__DICTAddGetLength
848A: E1      			pop 	hl
              	
848B: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
848D: CD4080  			call 	PAGESwitch
              	
8490: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
8494:         	__DICTFindEndDictionary:
8494: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
8497: B7      			or 		a
8498: 2807    			jr 		z,__DICTCreateEntry
849A: 5F      			ld 		e,a
849B: 1600    			ld 		d,0
849D: DD19    			add 	ix,de
849F: 18F3    			jr 		__DICTFindEndDictionary
              	
84A1:         	__DICTCreateEntry:
84A1: 78      			ld 		a,b
84A2: C605    			add 	a,5
84A4: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
84A7: 3AF589  			ld 		a,(SINextFreeCodePage)				; code page
84AA: DD7701  			ld 		(ix+1),a
84AD: ED5BF189			ld 		de,(SINextFreeCode)					; code address
84B1: DD7302  			ld 		(ix+2),e
84B4: DD7203  			ld 		(ix+3),d 
              	
84B7: DD7004  			ld 		(ix+4),b 							; length (0..5)
              	
84BA: EB      			ex 		de,hl 								; put name in DE
84BB:         	__DICTAddCopy:
84BB: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
84BC: DD7705  			ld 		(ix+5),a
84BF: 13      			inc 	de
84C0: DD23    			inc 	ix 									
84C2: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
84C4: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
84C8: CD5980  			call 	PAGERestore
84CB: DDE1    			pop 	ix 									; restore and exit
84CD: E1      			pop 	hl
84CE: D1      			pop 	de
84CF: C1      			pop 	bc
84D0: F1      			pop 	af
84D1: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. HL points to name.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
84D2:         	DICTFindWord:
84D2: C5      			push 	bc 								; save registers - return in EHL Carry
84D3: DDE5    			push 	ix
              	
84D5: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
84D7: CD4080  			call 	PAGESwitch
              	
84DA: DD2100C0			ld 		ix,$C000 						; dictionary start			
84DE:         	__DICTFindMainLoop:
84DE: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
84E1: B7      			or 		a
84E2: 2836    			jr 		z,__DICTFindFail
              	
84E4: DDE5    			push 	ix 								; save pointers on stack.
84E6: E5      			push 	hl 
              	
84E7: DD7E04  			ld 		a,(ix+4) 						; characters to compare
84EA: E63F    			and 	$3F
84EC: 47      			ld 		b,a
84ED: 23      			inc 	hl 								; skip over tag
84EE:         	__DICTCheckName:
84EE: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
84F1: BE      			cp 		(hl) 							; compare vs the matching character.
84F2: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
84F4: 23      			inc 	hl 								; HL point to next character
84F5: DD23    			inc 	ix
84F7: 10F5    			djnz 	__DICTCheckName
              	
84F9: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
84FB: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
84FD: E1      			pop 	hl 								; Found a match. restore HL and IX
84FE: DDE1    			pop 	ix
8500: 1600    			ld 		d,0 							; D = 0 for neatness.
8502: DD5E01  			ld 		e,(ix+1)						; E = page
8505: DD6E02  			ld 		l,(ix+2)						; HL = address
8508: DD6603  			ld 		h,(ix+3)		
850B: AF      			xor 	a 								; clear the carry flag.
850C: 1813    			jr 		__DICTFindExit
              	
850E:         	__DICTFindNoMatch:								; this one doesn't match.
850E: E1      			pop 	hl 								; restore HL and IX
850F: DDE1    			pop 	ix
8511:         	__DICTFindNext:
8511: DD5E00  			ld 		e,(ix+0)						; DE = offset
8514: 1600    			ld 		d,$00
8516: DD19    			add 	ix,de 							; next word.
8518: 18C4    			jr 		__DICTFindMainLoop				; and try the next one.
              	
851A:         	__DICTFindFail:
851A: 110000  			ld 		de,$0000 						; return all zeros.
851D: 210000  			ld 		hl,$0000
8520: 37      			scf 									; set carry flag
8521:         	__DICTFindExit:
8521: F5      			push 	af
8522: CD5980  			call 	PAGERestore
8525: F1      			pop 	af
8526: DDE1    			pop 	ix 								; pop registers and return.
8528: C1      			pop 	bc
8529: C9      			ret
              	
              	
              			include "temp/__words.asm" 					; and the actual words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== + copies ===========
              	
852A:         	flatwordmarker_2b:
852A: 0601    	    ld  b,en_flat_2b-st_flat_2b
852C: CD2F80  	    call COMCopyFollowingCode
852F:         	st_flat_2b:
852F: 19      	  add  hl,de
8530:         	en_flat_2b:
              	
              	; ***************************************************************************************
              	
              	; =========== - copies ===========
              	
8530:         	flatwordmarker_2d:
8530: 0608    	    ld  b,en_flat_2d-st_flat_2d
8532: CD2F80  	    call COMCopyFollowingCode
8535:         	st_flat_2d:
8535: 42      	  ld   b,d
8536: 4B      	  ld   c,e
8537: EB      	  ex   de,hl
8538: AF      	  xor  a
8539: ED52    	  sbc  hl,de
853B: 50      	  ld   d,b
853C: 59      	  ld   e,c
853D:         	en_flat_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== * word ===========
              	
853D:         	flatwordmarker_2a:
853D: CD2F80  	    call COMCompileCallToFollowing
8540:         	st_flat_2a:
8540: C3F280  	  jp   MULTMultiply16
8543:         	en_flat_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== / word ===========
              	
8543:         	flatwordmarker_2f:
8543: CD2F80  	    call COMCompileCallToFollowing
8546:         	st_flat_2f:
8546: C3BA80  	  jp   DIVDivide
8549:         	en_flat_2f:
              	
              	; ***************************************************************************************
              	
              	; =========== mod word ===========
              	
8549:         	flatwordmarker_6d_6f_64:
8549: CD2F80  	    call COMCompileCallToFollowing
854C:         	st_flat_6d_6f_64:
854C: C3C180  	  jp   DIVModulus
854F:         	en_flat_6d_6f_64:
              	
              	; ***************************************************************************************
              	
              	; =========== and word ===========
              	
854F:         	flatwordmarker_61_6e_64:
854F: CD2F80  	    call COMCompileCallToFollowing
8552:         	st_flat_61_6e_64:
8552: 7C      	  ld   a,h
8553: A2      	  and  d
8554: 67      	  ld   h,a
8555: 7D      	  ld   a,l
8556: A3      	  and  e
8557: 6F      	  ld   l,a
8558: C9      	  ret
8559:         	en_flat_61_6e_64:
              	
              	; ***************************************************************************************
              	
              	; =========== xor word ===========
              	
8559:         	flatwordmarker_78_6f_72:
8559: CD2F80  	    call COMCompileCallToFollowing
855C:         	st_flat_78_6f_72:
855C: 7C      	  ld   a,h
855D: AA      	  xor   d
855E: 67      	  ld   h,a
855F: 7D      	  ld   a,l
8560: AB      	  xor  e
8561: 6F      	  ld   l,a
8562: C9      	  ret
8563:         	en_flat_78_6f_72:
              	
              	; ***************************************************************************************
              	
              	; =========== or word ===========
              	
8563:         	flatwordmarker_6f_72:
8563: CD2F80  	    call COMCompileCallToFollowing
8566:         	st_flat_6f_72:
8566: 7C      	  ld   a,h
8567: B2      	  or   d
8568: 67      	  ld   h,a
8569: 7D      	  ld   a,l
856A: B3      	  or   e
856B: 6F      	  ld   l,a
856C: C9      	  ret
856D:         	en_flat_6f_72:
              	
              	
              	; ***************************************************************************************
              	
              	; =========== = word ===========
              	
856D:         	flatwordmarker_3d:
856D: CD2F80  	    call COMCompileCallToFollowing
8570:         	st_flat_3d:
8570: 7B      	  ld   a,e
8571: BD      	  cp   l
8572: 2006    	  jr   nz,__EqualFail
8574: 7A      	  ld   a,d
8575: BC      	  cp   h
8576: 21FFFF  	  ld   hl,$FFFF
8579: C8      	  ret  z
857A:         	__EqualFail:
857A: 210000  	  ld   hl,0
857D: C9      	  ret
              	
857E:         	en_flat_3d:
              	
              	; ***************************************************************************************
              	
              	; =========== < word ===========
              	
857E:         	flatwordmarker_3c:
857E: CD2F80  	    call COMCompileCallToFollowing
8581:         	st_flat_3c:
8581: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
8582: AC      	  xor  h
8583: 87      	  add  a,a      ; if the signs are different, check those.
8584: 380B    	  jr   c,__LessDifferentSigns
              	
8586: D5      	  push  de
8587: EB      	  ex   de,hl      ; want to do B-A
8588: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
858A: D1      	  pop  de
858B: 3808    	  jr   c,__LessTrue
              	
858D:         	__LessFalse:
858D: 210000  	  ld   hl,$0000
8590: C9      	  ret
              	
8591:         	__LessDifferentSigns:
8591: CB78    	  bit  7,b      ; if B is +ve then B must be > A
8593: 28F8    	  jr   z,__LessFalse
              	
8595:         	__LessTrue:
8595: 21FFFF  	  ld   hl,$FFFF
8598: C9      	  ret
              	
8599:         	en_flat_3c:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphics.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Hardware I/O words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== screen! word ===========
              	
8599:         	flatwordmarker_73_63_72_65_65_6e_21:
8599: CD2F80  	    call COMCompileCallToFollowing
859C:         	st_flat_73_63_72_65_65_6e_21:
859C: C33D81  	 jp   GFXWriteCharacter
859F:         	en_flat_73_63_72_65_65_6e_21:
              	
              	; ***************************************************************************************
              	
              	; =========== screenmode word ===========
              	
859F:         	flatwordmarker_73_63_72_65_65_6e_6d_6f_64_65:
859F: CD2F80  	    call COMCompileCallToFollowing
85A2:         	st_flat_73_63_72_65_65_6e_6d_6f_64_65:
85A2: C30C81  	 jp   GFXMode
85A5:         	en_flat_73_63_72_65_65_6e_6d_6f_64_65:
              	
              	; ***************************************************************************************
              	
              	; =========== hex! word ===========
              	
85A5:         	flatwordmarker_68_65_78_21:
85A5: CD2F80  	    call COMCompileCallToFollowing
85A8:         	st_flat_68_65_78_21:
85A8: C35081  	 jp   GFXWriteHexWord
85AB:         	en_flat_68_65_78_21:
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== c@ copies ===========
              	
85AB:         	flatwordmarker_63_40:
85AB: 0603    	    ld  b,en_flat_63_40-st_flat_63_40
85AD: CD2F80  	    call COMCopyFollowingCode
85B0:         	st_flat_63_40:
85B0: 6E      	  ld   l,(hl)
85B1: 2600    	  ld   h,0
85B3:         	en_flat_63_40:
              	
              	; ***************************************************************************************
              	
              	; =========== @ copies ===========
              	
85B3:         	flatwordmarker_40:
85B3: 0604    	    ld  b,en_flat_40-st_flat_40
85B5: CD2F80  	    call COMCopyFollowingCode
85B8:         	st_flat_40:
85B8: 7E      	  ld   a,(hl)
85B9: 23      	  inc  hl
85BA: 66      	  ld   h,(hl)
85BB: 6F      	  ld   l,a
85BC:         	en_flat_40:
              	
              	; ***************************************************************************************
              	
              	; =========== c! copies ===========
              	
85BC:         	flatwordmarker_63_21:
85BC: 0601    	    ld  b,en_flat_63_21-st_flat_63_21
85BE: CD2F80  	    call COMCopyFollowingCode
85C1:         	st_flat_63_21:
85C1: 73      	  ld   (hl),e
85C2:         	en_flat_63_21:
              	
              	; ***************************************************************************************
              	
              	; =========== ! copies ===========
              	
85C2:         	flatwordmarker_21:
85C2: 0604    	    ld  b,en_flat_21-st_flat_21
85C4: CD2F80  	    call COMCopyFollowingCode
85C7:         	st_flat_21:
85C7: 73      	  ld   (hl),e
85C8: 23      	  inc  hl
85C9: 72      	  ld   (hl),d
85CA: 2B      	  dec  hl
85CB:         	en_flat_21:
              	
              	; ***************************************************************************************
              	
              	; =========== +! word ===========
              	
85CB:         	flatwordmarker_2b_21:
85CB: CD2F80  	    call COMCompileCallToFollowing
85CE:         	st_flat_2b_21:
85CE: 7E      	  ld   a,(hl)
85CF: 83      	  add  a,e
85D0: 77      	  ld   (hl),a
85D1: 23      	  inc  hl
              	
85D2: 7E      	  ld   a,(hl)
85D3: 8A      	  adc  a,d
85D4: 77      	  ld   (hl),a
85D5: 2B      	  dec  hl
85D6: C9      	  ret
85D7:         	en_flat_2b_21:
              	
              	; ***************************************************************************************
              	
              	; =========== p! copies ===========
              	
85D7:         	flatwordmarker_70_21:
85D7: 0604    	    ld  b,en_flat_70_21-st_flat_70_21
85D9: CD2F80  	    call COMCopyFollowingCode
85DC:         	st_flat_70_21:
85DC: 4D      	  ld   c,l
85DD: 44      	  ld   b,h
85DE: ED59    	  out  (c),e
85E0:         	en_flat_70_21:
              	
              	; ***************************************************************************************
              	
              	; =========== p@ word ===========
              	
85E0:         	flatwordmarker_70_40:
85E0: CD2F80  	    call COMCompileCallToFollowing
85E3:         	st_flat_70_40:
85E3: 4D      	  ld   c,l
85E4: 44      	  ld   b,h
85E5: ED68    	  in   l,(c)
85E7: 2600    	  ld   h,0
85E9: C9      	  ret
85EA:         	en_flat_70_40:
              	
              	; ***************************************************************************************
              	
              	; =========== far@ word ===========
              	
85EA:         	flatwordmarker_66_61_72_40:
85EA: CD2F80  	    call COMCompileCallToFollowing
85ED:         	st_flat_66_61_72_40:
85ED: C3A280  	  jp   FARRead
85F0:         	en_flat_66_61_72_40:
              	
              	; ***************************************************************************************
              	
              	; =========== far! word ===========
              	
85F0:         	flatwordmarker_66_61_72_21:
85F0: CD2F80  	    call COMCompileCallToFollowing
85F3:         	st_flat_66_61_72_21:
85F3: C3AF80  	  jp   FARWrite
85F6:         	en_flat_66_61_72_21:
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Register operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== swap copies ===========
              	
85F6:         	flatwordmarker_73_77_61_70:
85F6: 0601    	    ld  b,en_flat_73_77_61_70-st_flat_73_77_61_70
85F8: CD2F80  	    call COMCopyFollowingCode
85FB:         	st_flat_73_77_61_70:
85FB: EB      	 ex   de,hl
85FC:         	en_flat_73_77_61_70:
              	
              	; ***************************************************************************************
              	
              	; =========== a>b copies ===========
              	
85FC:         	flatwordmarker_61_3e_62:
85FC: 0602    	    ld  b,en_flat_61_3e_62-st_flat_61_3e_62
85FE: CD2F80  	    call COMCopyFollowingCode
8601:         	st_flat_61_3e_62:
8601: 54      	 ld   d,h
8602: 5D      	 ld   e,l
8603:         	en_flat_61_3e_62:
              	
              	; ***************************************************************************************
              	
              	; =========== b>a copies ===========
              	
8603:         	flatwordmarker_62_3e_61:
8603: 0602    	    ld  b,en_flat_62_3e_61-st_flat_62_3e_61
8605: CD2F80  	    call COMCopyFollowingCode
8608:         	st_flat_62_3e_61:
8608: 62      	 ld   h,d
8609: 6B      	 ld   l,e
860A:         	en_flat_62_3e_61:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== ab>r copies.only ===========
              	
860A:         	flatwordmarker_61_62_3e_72:
860A: 0682    	    ld  b,en_flat_61_62_3e_72-st_flat_61_62_3e_72+$80
860C: CD2F80  	    call COMCopyFollowingCode
860F:         	st_flat_61_62_3e_72:
860F: D5      	 push  de
8610: E5      	 push  hl
8611:         	en_flat_61_62_3e_72:
              	
              	; ***************************************************************************************
              	
              	; =========== r>ab copies.only ===========
              	
8611:         	flatwordmarker_72_3e_61_62:
8611: 0682    	    ld  b,en_flat_72_3e_61_62-st_flat_72_3e_61_62+$80
8613: CD2F80  	    call COMCopyFollowingCode
8616:         	st_flat_72_3e_61_62:
8616: E1      	 pop  hl
8617: D1      	 pop  de
8618:         	en_flat_72_3e_61_62:
              	
              	; ***************************************************************************************
              	
              	; =========== r>bb copies.only ===========
              	
8618:         	flatwordmarker_72_3e_62_62:
8618: 0682    	    ld  b,en_flat_72_3e_62_62-st_flat_72_3e_62_62+$80
861A: CD2F80  	    call COMCopyFollowingCode
861D:         	st_flat_72_3e_62_62:
861D: D1      	 pop  de
861E: D1      	 pop  de
861F:         	en_flat_72_3e_62_62:
              	
              	; ***************************************************************************************
              	
              	; =========== push copies.only ===========
              	
861F:         	flatwordmarker_70_75_73_68:
861F: 0681    	    ld  b,en_flat_70_75_73_68-st_flat_70_75_73_68+$80
8621: CD2F80  	    call COMCopyFollowingCode
8624:         	st_flat_70_75_73_68:
8624: E5      	 push  hl
8625:         	en_flat_70_75_73_68:
              	
              	; ***************************************************************************************
              	
              	; =========== pop copies.only ===========
              	
8625:         	flatwordmarker_70_6f_70:
8625: 0682    	    ld  b,en_flat_70_6f_70-st_flat_70_6f_70+$80
8627: CD2F80  	    call COMCopyFollowingCode
862A:         	st_flat_70_6f_70:
862A: EB      	 ex   de,hl
862B: E1      	 pop  hl
862C:         	en_flat_70_6f_70:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== 0= word ===========
              	
862C:         	flatwordmarker_30_3d:
862C: CD2F80  	    call COMCompileCallToFollowing
862F:         	st_flat_30_3d:
862F: 7C      	  ld  a,h
8630: B5      	  or  l
8631: 210000  	  ld  hl,$0000
8634: C0      	  ret nz
8635: 2B      	  dec hl
8636: C9      	  ret
8637:         	en_flat_30_3d:
              	
              	; ***************************************************************************************
              	
              	; =========== 0< word ===========
              	
8637:         	flatwordmarker_30_3c:
8637: CD2F80  	    call COMCompileCallToFollowing
863A:         	st_flat_30_3c:
863A: CB7C    	  bit 7,h
863C: 210000  	  ld  hl,$0000
863F: C8      	  ret z
8640: 2B      	  dec hl
8641: C9      	  ret
8642:         	en_flat_30_3c:
              	
              	; ***************************************************************************************
              	
              	; =========== 0- word ===========
              	
8642:         	flatwordmarker_30_2d:
8642: CD2F80  	    call COMCompileCallToFollowing
8645:         	st_flat_30_2d:
8645: 7C      	  ld  a,h
8646: 2F      	  cpl
8647: 67      	  ld  h,a
8648: 7D      	  ld  a,l
8649: 2F      	  cpl
864A: 6F      	  ld  l,a
864B: 23      	  inc hl
864C: C9      	  ret
864D:         	en_flat_30_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== not word ===========
              	
864D:         	flatwordmarker_6e_6f_74:
864D: CD2F80  	    call COMCompileCallToFollowing
8650:         	st_flat_6e_6f_74:
8650: 7C      	  ld  a,h
8651: 2F      	  cpl
8652: 67      	  ld  h,a
8653: 7D      	  ld  a,l
8654: 2F      	  cpl
8655: 6F      	  ld  l,a
8656: C9      	  ret
8657:         	en_flat_6e_6f_74:
              	
              	; ***************************************************************************************
              	
              	; =========== ++ copies ===========
              	
8657:         	flatwordmarker_2b_2b:
8657: 0601    	    ld  b,en_flat_2b_2b-st_flat_2b_2b
8659: CD2F80  	    call COMCopyFollowingCode
865C:         	st_flat_2b_2b:
865C: 23      	  inc hl
865D:         	en_flat_2b_2b:
              	
              	; ***************************************************************************************
              	
              	; =========== -- copies ===========
              	
865D:         	flatwordmarker_2d_2d:
865D: 0601    	    ld  b,en_flat_2d_2d-st_flat_2d_2d
865F: CD2F80  	    call COMCopyFollowingCode
8662:         	st_flat_2d_2d:
8662: 2B      	  dec hl
8663:         	en_flat_2d_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== 2* copies ===========
              	
8663:         	flatwordmarker_32_2a:
8663: 0601    	    ld  b,en_flat_32_2a-st_flat_32_2a
8665: CD2F80  	    call COMCopyFollowingCode
8668:         	st_flat_32_2a:
8668: 29      	  add  hl,hl
8669:         	en_flat_32_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== 2/ copies ===========
              	
8669:         	flatwordmarker_32_2f:
8669: 0604    	    ld  b,en_flat_32_2f-st_flat_32_2f
866B: CD2F80  	    call COMCopyFollowingCode
866E:         	st_flat_32_2f:
866E: CB2C    	  sra  h
8670: CB1D    	  rr   l
8672:         	en_flat_32_2f:
              	
              	; ***************************************************************************************
              	
              	; =========== 4* copies ===========
              	
8672:         	flatwordmarker_34_2a:
8672: 0602    	    ld  b,en_flat_34_2a-st_flat_34_2a
8674: CD2F80  	    call COMCopyFollowingCode
8677:         	st_flat_34_2a:
8677: 29      	  add  hl,hl
8678: 29      	  add  hl,hl
8679:         	en_flat_34_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== 16* copies ===========
              	
8679:         	flatwordmarker_31_36_2a:
8679: 0604    	    ld  b,en_flat_31_36_2a-st_flat_31_36_2a
867B: CD2F80  	    call COMCopyFollowingCode
867E:         	st_flat_31_36_2a:
867E: 29      	  add  hl,hl
867F: 29      	  add  hl,hl
8680: 29      	  add  hl,hl
8681: 29      	  add  hl,hl
8682:         	en_flat_31_36_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== bswap copies ===========
              	
8682:         	flatwordmarker_62_73_77_61_70:
8682: 0603    	    ld  b,en_flat_62_73_77_61_70-st_flat_62_73_77_61_70
8684: CD2F80  	    call COMCopyFollowingCode
8687:         	st_flat_62_73_77_61_70:
8687: 7C      	  ld   a,h
8688: 65      	  ld   h,l
8689: 6F      	  ld   l,a
868A:         	en_flat_62_73_77_61_70:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== break copies.only ===========
              	
868A:         	flatwordmarker_62_72_65_61_6b:
868A: 0682    	    ld  b,en_flat_62_72_65_61_6b-st_flat_62_72_65_61_6b+$80
868C: CD2F80  	    call COMCopyFollowingCode
868F:         	st_flat_62_72_65_61_6b:
868F: DD01    	  db   $DD,$01
8691:         	en_flat_62_72_65_61_6b:
              	
              	; ***************************************************************************************
              	
              	; =========== ; copies.only ===========
              	
8691:         	flatwordmarker_3b:
8691: 0681    	    ld  b,en_flat_3b-st_flat_3b+$80
8693: CD2F80  	    call COMCopyFollowingCode
8696:         	st_flat_3b:
8696: C9      	  ret
8697:         	en_flat_3b:
              	
              	; ***************************************************************************************
              	
              	; =========== halt word ===========
              	
8697:         	flatwordmarker_68_61_6c_74:
8697: CD2F80  	    call COMCompileCallToFollowing
869A:         	st_flat_68_61_6c_74:
869A:         	HaltZ80:
869A: F3      	  di
869B: 76      	  halt
869C: 18FC    	  jr   HaltZ80
869E:         	en_flat_68_61_6c_74:
              	
              	; ***************************************************************************************
              	
              	; =========== copy word ===========
              	
869E:         	flatwordmarker_63_6f_70_79:
869E: CD2F80  	    call COMCompileCallToFollowing
86A1:         	st_flat_63_6f_70_79:
86A1: CD1080  	  call  $8010         ; load work into BC
86A4: 78      	  ld   a,b         ; nothing to do.
86A5: B1      	  or   c
86A6: C8      	  ret  z
              	
86A7: C5      	  push  bc
86A8: D5      	  push  de
86A9: E5      	  push  hl
              	
86AA: AF      	  xor  a          ; find direction.
86AB: ED52    	  sbc  hl,de
86AD: 7C      	  ld   a,h
86AE: 19      	  add  hl,de
86AF: CB7F    	  bit  7,a         ; if +ve use LDDR
86B1: 2807    	  jr   z,__copy2
              	
86B3: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
86B4: EDB0    	  ldir
86B6:         	__copyExit:
86B6: E1      	  pop  hl
86B7: D1      	  pop  de
86B8: C1      	  pop  bc
86B9: C9      	  ret
              	
86BA:         	__copy2:
86BA: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
86BB: EB      	  ex   de,hl
86BC: 09      	  add  hl,bc
86BD: 1B      	  dec  de          ; -1 to point to last byte
86BE: 2B      	  dec  hl
86BF: EDB8    	  lddr
86C1: 18F3    	  jr   __copyExit
86C3:         	en_flat_63_6f_70_79:
              	
              	; ***************************************************************************************
              	
              	; =========== fill word ===========
              	
86C3:         	flatwordmarker_66_69_6c_6c:
86C3: CD2F80  	    call COMCompileCallToFollowing
86C6:         	st_flat_66_69_6c_6c:
86C6: CD1080  	  call  $8010         ; load work into BC
86C9: 78      	  ld   a,b         ; nothing to do.
86CA: B1      	  or   c
86CB: C8      	  ret  z
86CC: C5      	  push bc
86CD: E5      	  push  hl
              	
86CE: 73      	__fill1:ld   (hl),e
86CF: 23      	  inc  hl
86D0: 0B      	  dec  bc
86D1: 78      	  ld   a,b
86D2: B1      	  or   c
86D3: 20F9    	  jr   nz,__fill1
              	
86D5: E1      	  pop  hl
86D6: C1      	  pop  bc
86D7: C9      	  ret
86D8:         	en_flat_66_69_6c_6c:
              	
              	; ***************************************************************************************
              	
              	; =========== c, word ===========
              	
86D8:         	flatwordmarker_63_2c:
86D8: CD2F80  	    call COMCompileCallToFollowing
86DB:         	st_flat_63_2c:
86DB: 7D      	  ld   a,l
86DC: C36F80  	  jp   FARCompileByte
86DF:         	en_flat_63_2c:
              	
              	; ***************************************************************************************
              	
              	; =========== , word ===========
              	
86DF:         	flatwordmarker_2c:
86DF: CD2F80  	    call COMCompileCallToFollowing
86E2:         	st_flat_2c:
86E2: 7D      	  ld   a,l
86E3: C38780  	  jp   FARCompileWord
86E6:         	en_flat_2c:
              	
              	; ***************************************************************************************
              	
              	; =========== inkey word ===========
              	
86E6:         	flatwordmarker_69_6e_6b_65_79:
86E6: CD2F80  	    call COMCompileCallToFollowing
86E9:         	st_flat_69_6e_6b_65_79:
86E9: EB      	  ex   de,hl
86EA: CD8281  	  call  IOScanKeyboard
86ED: 6F      	  ld   l,a
86EE: 2600    	  ld   h,0
86F0: C9      	  ret
86F1:         	en_flat_69_6e_6b_65_79:
              	
              	
86F1:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
86F1: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
86F5: 00000000	
86F9: 0C1E1E0C	
86FD: 0C000C00	
8701: 36360000	
8705: 00000000	
8709: 36367F36	
870D: 7F363600	
8711: 183E603C	
8715: 067C1800	
8719: 0063660C	
871D: 18336300	
8721: 1C361C3B	
8725: 6E663B00	
8729: 30306000	
872D: 00000000	
8731: 0C183030	
8735: 30180C00	
8739: 30180C0C	
873D: 0C183000	
8741: 00331E7F	
8745: 1E330000	
8749: 0018187E	
874D: 18180000	
8751: 00000000	
8755: 00181830	
8759: 0000007E	
875D: 00000000	
8761: 00000000	
8765: 00181800	
8769: 03060C18	
876D: 30604000	
8771: 3E63676F	
8775: 7B733E00	
8779: 18381818	
877D: 18187E00	
8781: 3C66061C	
8785: 30667E00	
8789: 3C66061C	
878D: 06663C00	
8791: 0E1E3666	
8795: 7F060F00	
8799: 7E607C06	
879D: 06663C00	
87A1: 1C30607C	
87A5: 66663C00	
87A9: 7E66060C	
87AD: 18181800	
87B1: 3C66663C	
87B5: 66663C00	
87B9: 3C66663E	
87BD: 060C3800	
87C1: 00181800	
87C5: 00181800	
87C9: 00181800	
87CD: 00181830	
87D1: 0C183060	
87D5: 30180C00	
87D9: 00007E00	
87DD: 007E0000	
87E1: 30180C06	
87E5: 0C183000	
87E9: 3C66060C	
87ED: 18001800	
87F1: 3E636F6F	
87F5: 6F603C00	
87F9: 183C6666	
87FD: 7E666600	
8801: 7E33333E	
8805: 33337E00	
8809: 1E336060	
880D: 60331E00	
8811: 7C363333	
8815: 33367C00	
8819: 7F31343C	
881D: 34317F00	
8821: 7F31343C	
8825: 34307800	
8829: 1E336060	
882D: 67331F00	
8831: 6666667E	
8835: 66666600	
8839: 3C181818	
883D: 18183C00	
8841: 0F060606	
8845: 66663C00	
8849: 7333363C	
884D: 36337300	
8851: 78303030	
8855: 31337F00	
8859: 63777F7F	
885D: 6B636300	
8861: 63737B6F	
8865: 67636300	
8869: 1C366363	
886D: 63361C00	
8871: 7E33333E	
8875: 30307800	
8879: 3C666666	
887D: 6E3C0E00	
8881: 7E33333E	
8885: 36337300	
8889: 3C667038	
888D: 0E663C00	
8891: 7E5A1818	
8895: 18183C00	
8899: 66666666	
889D: 66667E00	
88A1: 66666666	
88A5: 663C1800	
88A9: 6363636B	
88AD: 7F776300	
88B1: 6363361C	
88B5: 1C366300	
88B9: 6666663C	
88BD: 18183C00	
88C1: 7F63460C	
88C5: 19337F00	
88C9: 3C303030	
88CD: 30303C00	
88D1: 6030180C	
88D5: 06030100	
88D9: 3C0C0C0C	
88DD: 0C0C3C00	
88E1: 081C3663	
88E5: 00000000	
88E9: 00000000	
88ED: 0000007F	
88F1: 18180C00	
88F5: 00000000	
88F9: 00003C06	
88FD: 3E663B00	
8901: 7030303E	
8905: 33336E00	
8909: 00003C66	
890D: 60663C00	
8911: 0E06063E	
8915: 66663B00	
8919: 00003C66	
891D: 7E603C00	
8921: 1C363078	
8925: 30307800	
8929: 00003B66	
892D: 663E067C	
8931: 7030363B	
8935: 33337300	
8939: 18003818	
893D: 18183C00	
8941: 06000606	
8945: 0666663C	
8949: 70303336	
894D: 3C367300	
8951: 38181818	
8955: 18183C00	
8959: 0000667F	
895D: 7F6B6300	
8961: 00007C66	
8965: 66666600	
8969: 00003C66	
896D: 66663C00	
8971: 00006E33	
8975: 333E3078	
8979: 00003B66	
897D: 663E060F	
8981: 00006E3B	
8985: 33307800	
8989: 00003E60	
898D: 3C067C00	
8991: 08183E18	
8995: 181A0C00	
8999: 00006666	
899D: 66663B00	
89A1: 00006666	
89A5: 663C1800	
89A9: 0000636B	
89AD: 7F7F3600	
89B1: 00006336	
89B5: 1C366300	
89B9: 00006666	
89BD: 663E067C	
89C1: 00007E4C	
89C5: 18327E00	
89C9: 0E181870	
89CD: 18180E00	
89D1: 0C0C0C00	
89D5: 0C0C0C00	
89D9: 7018180E	
89DD: 18187000	
89E1: 3B6E0000	
89E5: 00000000	
89E9: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
89F1:         	SystemInformationTable:
              	
89F1:         	SINextFreeCode: 									; +0 	Next Free Code Byte
89F1: 00A00000			dw 		FreeMemory,0
89F5:         	SINextFreeCodePage: 								; +4 	Next Free Code Byte Page
89F5: 24000000			dw 		FirstCodePage,0
89F9:         	SIBootCodeAddress:									; +8	Run from here
89F9: 23840000			dw 		LOADBootstrap,0
89FD:         	SIBootCodePage: 									; +12   Run page.
89FD: 24000000			db		FirstCodePage,0,0,0
8A01:         	SIPageUsage:										; +16 	Page Usage Table
8A01: 378A0000			dw 		PageUsage,0 			
8A05:         	SIStack:											; +20 	Initial Z80 stack value
8A05: F07E0000			dw 		StackTop,0							
8A09:         	SIScreenWidth:										; +24 	Screen Width
8A09: 00000000			dw 		0,0
8A0D:         	SIScreenHeight:										; +28 	Screen Height
8A0D: 00000000			dw 		0,0
8A11:         	SIScreenSize: 										; +32   Screen Size in Characters
8A11: 00000000			dw 		0,0
8A15:         	SIScreenDriver:										; +36 	Screen Driver
8A15: 00000000			dw 		0,0 								
8A19:         	SIFontBase:											; +40 	768 byte font, begins with space
8A19: F1860000			dw 		AlternateFont,0 							
8A1D:         	SIWord:												; +44 	Work word, used in fill/copy/etc
8A1D: 00000000			dw 		0,0 			
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8A21:         	PAGEStackPointer: 									; stack used for switching pages
8A21: 0000    			dw 		0
8A23:         	PAGEStackBase:
8A23: FFFFFFFF			ds 		16
8A27: FF...   	
8A33:         	ARegister:											; temp when doing things in the compiler.
8A33: 0000    			dw 		0
8A35:         	BRegister:
8A35: 0000    			dw 		0	
              			
8A37:         	PageUsage:
8A37: 01      			db 		1									; $20 (dictionary) [1 = system]
8A38: 01      			db 		1 									; $22 (bootstrap)  [2 = code]
8A39: 02      			db 		2									; $24 (first code)
8A3A: 00000000			db 		0,0,0,0,0 							; $26-$2E 		   [0 = unused]
8A3E: 00      	
8A3F: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
8A43: 00000000	
8A47: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8A4B: 00000000	
8A4F: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8A53: 00000000	
8A57: FF      			db 		$FF 								; end of page.
              	
8A58: FFFFFFFF			org 	$A000
8A5C: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

ARegister                  = $8A33 = 35379          data.asm:55 (unused)
AlternateFont              = $86F1 = 34545          kernel.asm:62
BRegister                  = $8A35 = 35381          data.asm:57 (unused)
Boot                       = $8015 = 32789          kernel.asm:28
BootstrapPage              = $0022 =    34          kernel.asm:17
COMCompileCallToFollowing  = $802F = 32815          kernel.asm:44
COMCopyFollowingCode       = $802F = 32815          kernel.asm:43
DICTAddWord                = $847B = 33915          dictionary.asm:19 (unused)
DICTFindWord               = $84D2 = 34002          dictionary.asm:86 (unused)
DIVDivide                  = $80BA = 32954          divide.asm:18
DIVDivideMod16             = $80C7 = 32967          divide.asm:37
DIVModulus                 = $80C1 = 32961          divide.asm:25
DictionaryPage             = $0020 =    32          kernel.asm:16
Div16_Loop1                = $80D1 = 32977          divide.asm:46
Div16_Loop2                = $80E2 = 32994          divide.asm:60
Div16_NoAdd1               = $80D9 = 32985          divide.asm:52
Div16_NoAdd2               = $80EA = 33002          divide.asm:66
EditBuffer                 = $7B08 = 31496          kernel.asm:13
ErrorHandler               = $802D = 32813          kernel.asm:40
ErrorMessageBuffer         = $7D10 = 32016          kernel.asm:14 (unused)
FARCompileByte             = $806F = 32879          farmemory.asm:21
FARCompileByteL            = $806E = 32878          farmemory.asm:18 (unused)
FARCompileWord             = $8087 = 32903          farmemory.asm:43
FARRead                    = $80A2 = 32930          farmemory.asm:68
FARWrite                   = $80AF = 32943          farmemory.asm:82
FirstCodePage              = $0024 =    36          kernel.asm:18
FreeMemory                 = $A000 = 40960          data.asm:71
GFXInitialise48k           = $824F = 33359          screen48k.asm:19
GFXInitialiseLayer2        = $82C7 = 33479          screen_layer2.asm:19
GFXInitialiseLowRes        = $837E = 33662          screen_lores.asm:18
GFXMode                    = $810C = 33036          graphics.asm:18
GFXPrintCharacter48k       = $827B = 33403          screen48k.asm:53
GFXPrintCharacterLayer2    = $82F7 = 33527          screen_layer2.asm:55
GFXPrintCharacterLowRes    = $83A8 = 33704          screen_lores.asm:50
GFXWriteCharacter          = $813D = 33085          graphics.asm:62
GFXWriteHexWord            = $8150 = 33104          graphics.asm:85
GFXWriteHexWordA           = $8152 = 33106          graphics.asm:87 (unused)
HaltZ80                    = $869A = 34458          __words.asm:640
IOScanKeyboard             = $8182 = 33154          keyboard.asm:18
L2PClear                   = $82D0 = 33488          screen_layer2.asm:26
L2PClearBank               = $82DF = 33503          screen_layer2.asm:34
LOADBootstrap              = $8423 = 33827          loader.asm:18
LOADScanBuffer             = $845B = 33883          loader.asm:64
LowClearScreen             = $8391 = 33681          screen_lores.asm:30
MULTMultiply16             = $80F2 = 33010          multiply.asm:18
PAGEInitialise             = $8030 = 32816          paging.asm:18
PAGERestore                = $8059 = 32857          paging.asm:62
PAGEStackBase              = $8A23 = 35363          data.asm:53
PAGEStackPointer           = $8A21 = 35361          data.asm:51
PAGESwitch                 = $8040 = 32832          paging.asm:34
PageUsage                  = $8A37 = 35383          data.asm:60
SIBootCodeAddress          = $89F9 = 35321          data.asm:24
SIBootCodePage             = $89FD = 35325          data.asm:26
SIFontBase                 = $8A19 = 35353          data.asm:40
SINextFreeCode             = $89F1 = 35313          data.asm:20
SINextFreeCodePage         = $89F5 = 35317          data.asm:22
SIPageUsage                = $8A01 = 35329          data.asm:28 (unused)
SIScreenDriver             = $8A15 = 35349          data.asm:38
SIScreenHeight             = $8A0D = 35341          data.asm:34
SIScreenSize               = $8A11 = 35345          data.asm:36
SIScreenWidth              = $8A09 = 35337          data.asm:32
SIStack                    = $8A05 = 35333          data.asm:30
SIWord                     = $8A1D = 35357          data.asm:42
StackTop                   = $7EF0 = 32496          kernel.asm:12
SystemInformationTable     = $89F1 = 35313          data.asm:18
__Core__Mult_Loop          = $80F9 = 33017          multiply.asm:24
__Core__Mult_Shift         = $80FE = 33022          multiply.asm:28
__DICTAddCopy              = $84BB = 33979          dictionary.asm:61
__DICTAddGetLength         = $8484 = 33924          dictionary.asm:27
__DICTCheckName            = $84EE = 34030          dictionary.asm:106
__DICTCreateEntry          = $84A1 = 33953          dictionary.asm:47
__DICTFindEndDictionary    = $8494 = 33940          dictionary.asm:38
__DICTFindExit             = $8521 = 34081          dictionary.asm:139
__DICTFindFail             = $851A = 34074          dictionary.asm:135
__DICTFindMainLoop         = $84DE = 34014          dictionary.asm:94
__DICTFindNext             = $8511 = 34065          dictionary.asm:129 (unused)
__DICTFindNoMatch          = $850E = 34062          dictionary.asm:126
__EqualFail                = $857A = 34170          __words.asm:134
__GFXConfigure             = $8122 = 33058          graphics.asm:37
__GFXLayer2                = $811A = 33050          graphics.asm:30
__GFXLowRes                = $811F = 33055          graphics.asm:34
__GFXWCExit                = $814B = 33099          graphics.asm:72
__GFXWHByte                = $8164 = 33124          graphics.asm:103
__GFXWHDigit               = $817A = 33146          graphics.asm:117
__GFXWHNibble              = $8171 = 33137          graphics.asm:111
__L2Exit                   = $8377 = 33655          screen_layer2.asm:156
__L2Loop                   = $8368 = 33640          screen_layer2.asm:143
__L2Not1                   = $8313 = 33555          screen_layer2.asm:77
__L2Not2                   = $8319 = 33561          screen_layer2.asm:81
__L2Not3                   = $831F = 33567          screen_layer2.asm:85
__L2NotCursor              = $832A = 33578          screen_layer2.asm:94
__L2NotSet                 = $836E = 33646          screen_layer2.asm:148
__L2Outer                  = $835F = 33631          screen_layer2.asm:137
__LOADBootLoop             = $842E = 33838          loader.asm:27
__LOADEnds                 = $8457 = 33879          loader.asm:53
__LOADNextWord             = $846D = 33901          loader.asm:83
__LOADScanExit             = $8474 = 33908          loader.asm:89
__LOADScanLoop             = $8461 = 33889          loader.asm:71
__LPExit                   = $841C = 33820          screen_lores.asm:143
__LessDifferentSigns       = $8591 = 34193          __words.asm:162
__LessFalse                = $858D = 34189          __words.asm:158
__LessTrue                 = $8595 = 34197          __words.asm:166
__LowLoop                  = $8408 = 33800          screen_lores.asm:127
__LowNotLower2             = $83FD = 33789          screen_lores.asm:119
__LowNotReverse            = $83CA = 33738          screen_lores.asm:79
__LowNotSet                = $840E = 33806          screen_lores.asm:132
__LowOuter                 = $83FF = 33791          screen_lores.asm:121
__ZXWCCopy                 = $82BB = 33467          screen48k.asm:115
__ZXWCExit                 = $82C2 = 33474          screen48k.asm:122
___kr4                     = $81B3 = 33203          keyboard.asm:49
__copy2                    = $86BA = 34490          __words.asm:677
__copyExit                 = $86B6 = 34486          __words.asm:671
__cs1                      = $825F = 33375          screen48k.asm:29
__cs2                      = $8267 = 33383          screen48k.asm:34
__fill1                    = $86CE = 34510          __words.asm:701
__kr1                      = $8197 = 33175          keyboard.asm:32
__kr2                      = $81A2 = 33186          keyboard.asm:38
__kr3                      = $81A4 = 33188          keyboard.asm:41
__kr_exit                  = $81D3 = 33235          keyboard.asm:79
__kr_keypressed            = $81CD = 33229          keyboard.asm:73
__kr_no_shift_table        = $81D7 = 33239          keyboard.asm:94
__kr_shift_table           = $8227 = 33319          keyboard.asm:106
__kr_symbol_shift_table    = $81FF = 33279          keyboard.asm:100
_end                       = $C001 = 49153          kernel.asm:19 (unused)
_size                      = $4001 = 16385          kernel.asm:19 (unused)
en_flat_21                 = $85CB = 34251          __words.asm:268
en_flat_2a                 = $8543 = 34115          __words.asm:49 (unused)
en_flat_2b                 = $8530 = 34096          __words.asm:22
en_flat_2b_21              = $85D7 = 34263          __words.asm:287 (unused)
en_flat_2b_2b              = $865D = 34397          __words.asm:527
en_flat_2c                 = $86E6 = 34534          __words.asm:733 (unused)
en_flat_2d                 = $853D = 34109          __words.asm:39
en_flat_2d_2d              = $8663 = 34403          __words.asm:538
en_flat_2f                 = $8549 = 34121          __words.asm:59 (unused)
en_flat_30_2d              = $864D = 34381          __words.asm:500 (unused)
en_flat_30_3c              = $8642 = 34370          __words.asm:483 (unused)
en_flat_30_3d              = $8637 = 34359          __words.asm:469 (unused)
en_flat_31_36_2a           = $8682 = 34434          __words.asm:587
en_flat_32_2a              = $8669 = 34409          __words.asm:549
en_flat_32_2f              = $8672 = 34418          __words.asm:561
en_flat_34_2a              = $8679 = 34425          __words.asm:573
en_flat_3b                 = $8697 = 34455          __words.asm:631
en_flat_3c                 = $8599 = 34201          __words.asm:170 (unused)
en_flat_3d                 = $857E = 34174          __words.asm:138 (unused)
en_flat_40                 = $85BC = 34236          __words.asm:243
en_flat_61_3e_62           = $8603 = 34307          __words.asm:365
en_flat_61_62_3e_72        = $8611 = 34321          __words.asm:398
en_flat_61_6e_64           = $8559 = 34137          __words.asm:85 (unused)
en_flat_62_3e_61           = $860A = 34314          __words.asm:377
en_flat_62_72_65_61_6b     = $8691 = 34449          __words.asm:620
en_flat_62_73_77_61_70     = $868A = 34442          __words.asm:600
en_flat_63_21              = $85C2 = 34242          __words.asm:254
en_flat_63_2c              = $86DF = 34527          __words.asm:722 (unused)
en_flat_63_40              = $85B3 = 34227          __words.asm:229
en_flat_63_6f_70_79        = $86C3 = 34499          __words.asm:685 (unused)
en_flat_66_61_72_21        = $85F6 = 34294          __words.asm:334 (unused)
en_flat_66_61_72_40        = $85F0 = 34288          __words.asm:324 (unused)
en_flat_66_69_6c_6c        = $86D8 = 34520          __words.asm:711 (unused)
en_flat_68_61_6c_74        = $869E = 34462          __words.asm:644 (unused)
en_flat_68_65_78_21        = $85AB = 34219          __words.asm:209 (unused)
en_flat_69_6e_6b_65_79     = $86F1 = 34545          __words.asm:747 (unused)
en_flat_6d_6f_64           = $854F = 34127          __words.asm:69 (unused)
en_flat_6e_6f_74           = $8657 = 34391          __words.asm:516 (unused)
en_flat_6f_72              = $856D = 34157          __words.asm:117 (unused)
en_flat_70_21              = $85E0 = 34272          __words.asm:300
en_flat_70_40              = $85EA = 34282          __words.asm:314 (unused)
en_flat_70_6f_70           = $862C = 34348          __words.asm:445
en_flat_70_75_73_68        = $8625 = 34341          __words.asm:433
en_flat_72_3e_61_62        = $8618 = 34328          __words.asm:410
en_flat_72_3e_62_62        = $861F = 34335          __words.asm:422
en_flat_73_63_72_65_65_6e_21 = $859F = 34207          __words.asm:189 (unused)
en_flat_73_63_72_65_65_6e_6d_6f_64_65 = $85A5 = 34213          __words.asm:199 (unused)
en_flat_73_77_61_70        = $85FC = 34300          __words.asm:353
en_flat_78_6f_72           = $8563 = 34147          __words.asm:101 (unused)
flatwordmarker_21          = $85C2 = 34242          __words.asm:260 (unused)
flatwordmarker_2a          = $853D = 34109          __words.asm:45 (unused)
flatwordmarker_2b          = $852A = 34090          __words.asm:17 (unused)
flatwordmarker_2b_21       = $85CB = 34251          __words.asm:274 (unused)
flatwordmarker_2b_2b       = $8657 = 34391          __words.asm:522 (unused)
flatwordmarker_2c          = $86DF = 34527          __words.asm:728 (unused)
flatwordmarker_2d          = $8530 = 34096          __words.asm:28 (unused)
flatwordmarker_2d_2d       = $865D = 34397          __words.asm:533 (unused)
flatwordmarker_2f          = $8543 = 34115          __words.asm:55 (unused)
flatwordmarker_30_2d       = $8642 = 34370          __words.asm:489 (unused)
flatwordmarker_30_3c       = $8637 = 34359          __words.asm:475 (unused)
flatwordmarker_30_3d       = $862C = 34348          __words.asm:460 (unused)
flatwordmarker_31_36_2a    = $8679 = 34425          __words.asm:579 (unused)
flatwordmarker_32_2a       = $8663 = 34403          __words.asm:544 (unused)
flatwordmarker_32_2f       = $8669 = 34409          __words.asm:555 (unused)
flatwordmarker_34_2a       = $8672 = 34418          __words.asm:567 (unused)
flatwordmarker_3b          = $8691 = 34449          __words.asm:626 (unused)
flatwordmarker_3c          = $857E = 34174          __words.asm:144 (unused)
flatwordmarker_3d          = $856D = 34157          __words.asm:124 (unused)
flatwordmarker_40          = $85B3 = 34227          __words.asm:235 (unused)
flatwordmarker_61_3e_62    = $85FC = 34300          __words.asm:359 (unused)
flatwordmarker_61_62_3e_72 = $860A = 34314          __words.asm:392 (unused)
flatwordmarker_61_6e_64    = $854F = 34127          __words.asm:75 (unused)
flatwordmarker_62_3e_61    = $8603 = 34307          __words.asm:371 (unused)
flatwordmarker_62_72_65_61_6b = $868A = 34442          __words.asm:615 (unused)
flatwordmarker_62_73_77_61_70 = $8682 = 34434          __words.asm:593 (unused)
flatwordmarker_63_21       = $85BC = 34236          __words.asm:249 (unused)
flatwordmarker_63_2c       = $86D8 = 34520          __words.asm:717 (unused)
flatwordmarker_63_40       = $85AB = 34219          __words.asm:223 (unused)
flatwordmarker_63_6f_70_79 = $869E = 34462          __words.asm:650 (unused)
flatwordmarker_66_61_72_21 = $85F0 = 34288          __words.asm:330 (unused)
flatwordmarker_66_61_72_40 = $85EA = 34282          __words.asm:320 (unused)
flatwordmarker_66_69_6c_6c = $86C3 = 34499          __words.asm:691 (unused)
flatwordmarker_68_61_6c_74 = $8697 = 34455          __words.asm:637 (unused)
flatwordmarker_68_65_78_21 = $85A5 = 34213          __words.asm:205 (unused)
flatwordmarker_69_6e_6b_65_79 = $86E6 = 34534          __words.asm:739 (unused)
flatwordmarker_6d_6f_64    = $8549 = 34121          __words.asm:65 (unused)
flatwordmarker_6e_6f_74    = $864D = 34381          __words.asm:506 (unused)
flatwordmarker_6f_72       = $8563 = 34147          __words.asm:107 (unused)
flatwordmarker_70_21       = $85D7 = 34263          __words.asm:293 (unused)
flatwordmarker_70_40       = $85E0 = 34272          __words.asm:306 (unused)
flatwordmarker_70_6f_70    = $8625 = 34341          __words.asm:439 (unused)
flatwordmarker_70_75_73_68 = $861F = 34335          __words.asm:428 (unused)
flatwordmarker_72_3e_61_62 = $8611 = 34321          __words.asm:404 (unused)
flatwordmarker_72_3e_62_62 = $8618 = 34328          __words.asm:416 (unused)
flatwordmarker_73_63_72_65_65_6e_21 = $8599 = 34201          __words.asm:185 (unused)
flatwordmarker_73_63_72_65_65_6e_6d_6f_64_65 = $859F = 34207          __words.asm:195 (unused)
flatwordmarker_73_77_61_70 = $85F6 = 34294          __words.asm:348 (unused)
flatwordmarker_78_6f_72    = $8559 = 34137          __words.asm:91 (unused)
st_flat_21                 = $85C7 = 34247          __words.asm:263
st_flat_2a                 = $8540 = 34112          __words.asm:47 (unused)
st_flat_2b                 = $852F = 34095          __words.asm:20
st_flat_2b_21              = $85CE = 34254          __words.asm:276 (unused)
st_flat_2b_2b              = $865C = 34396          __words.asm:525
st_flat_2c                 = $86E2 = 34530          __words.asm:730 (unused)
st_flat_2d                 = $8535 = 34101          __words.asm:31
st_flat_2d_2d              = $8662 = 34402          __words.asm:536
st_flat_2f                 = $8546 = 34118          __words.asm:57 (unused)
st_flat_30_2d              = $8645 = 34373          __words.asm:491 (unused)
st_flat_30_3c              = $863A = 34362          __words.asm:477 (unused)
st_flat_30_3d              = $862F = 34351          __words.asm:462 (unused)
st_flat_31_36_2a           = $867E = 34430          __words.asm:582
st_flat_32_2a              = $8668 = 34408          __words.asm:547
st_flat_32_2f              = $866E = 34414          __words.asm:558
st_flat_34_2a              = $8677 = 34423          __words.asm:570
st_flat_3b                 = $8696 = 34454          __words.asm:629
st_flat_3c                 = $8581 = 34177          __words.asm:146 (unused)
st_flat_3d                 = $8570 = 34160          __words.asm:126 (unused)
st_flat_40                 = $85B8 = 34232          __words.asm:238
st_flat_61_3e_62           = $8601 = 34305          __words.asm:362
st_flat_61_62_3e_72        = $860F = 34319          __words.asm:395
st_flat_61_6e_64           = $8552 = 34130          __words.asm:77 (unused)
st_flat_62_3e_61           = $8608 = 34312          __words.asm:374
st_flat_62_72_65_61_6b     = $868F = 34447          __words.asm:618
st_flat_62_73_77_61_70     = $8687 = 34439          __words.asm:596
st_flat_63_21              = $85C1 = 34241          __words.asm:252
st_flat_63_2c              = $86DB = 34523          __words.asm:719 (unused)
st_flat_63_40              = $85B0 = 34224          __words.asm:226
st_flat_63_6f_70_79        = $86A1 = 34465          __words.asm:652 (unused)
st_flat_66_61_72_21        = $85F3 = 34291          __words.asm:332 (unused)
st_flat_66_61_72_40        = $85ED = 34285          __words.asm:322 (unused)
st_flat_66_69_6c_6c        = $86C6 = 34502          __words.asm:693 (unused)
st_flat_68_61_6c_74        = $869A = 34458          __words.asm:639 (unused)
st_flat_68_65_78_21        = $85A8 = 34216          __words.asm:207 (unused)
st_flat_69_6e_6b_65_79     = $86E9 = 34537          __words.asm:741 (unused)
st_flat_6d_6f_64           = $854C = 34124          __words.asm:67 (unused)
st_flat_6e_6f_74           = $8650 = 34384          __words.asm:508 (unused)
st_flat_6f_72              = $8566 = 34150          __words.asm:109 (unused)
st_flat_70_21              = $85DC = 34268          __words.asm:296
st_flat_70_40              = $85E3 = 34275          __words.asm:308 (unused)
st_flat_70_6f_70           = $862A = 34346          __words.asm:442
st_flat_70_75_73_68        = $8624 = 34340          __words.asm:431
st_flat_72_3e_61_62        = $8616 = 34326          __words.asm:407
st_flat_72_3e_62_62        = $861D = 34333          __words.asm:419
st_flat_73_63_72_65_65_6e_21 = $859C = 34204          __words.asm:187 (unused)
st_flat_73_63_72_65_65_6e_6d_6f_64_65 = $85A2 = 34210          __words.asm:197 (unused)
st_flat_73_77_61_70        = $85FB = 34299          __words.asm:351
st_flat_78_6f_72           = $855C = 34140          __words.asm:93 (unused)


total time: 0.0097 sec.
no errors
