              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-23 23:33:40
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th November 2018
              	;		Purpose :	FlatColorForth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	SourceFirstPage = $22 								; bootstrap page
0040:         	SourcePages = 64
0026:         	FirstCodePage = SourceFirstPage + SourcePages/16	; first page of actual code.
              	
7B08:         	EditBuffer = $7B08 									; $7B00-$7D20 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 478A    			dw 		SystemInformationTable
              	
8006: ED7B5F8A	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
800A: F3      			di											; disable interrupts
              		
800B: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800F: 2E00    			ld 		l,0 								; set graphics mode 0 (48k Spectrum)
8011: CDFA80  			call 	GFXMode
              	
8014: 3A538A  			ld 		a,(SIBootCodePage) 					; get the page to start
8017: CD2080  			call 	PAGEInitialise
801A: 2A4F8A  			ld 		hl,(SIBootCodeAddress) 				; get boot address
801D: E9      			jp 		(hl) 								; and go there
              	
801E:         	ErrorHandler:
801E: 18FE    			jr 		ErrorHandler
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8020:         	PAGEInitialise:
8020: ED9256  			db 		$ED,$92,$56							; switch to page A
8023: 3C      			inc 	a
8024: ED9257  			db 		$ED,$92,$57
8027: 3D      			dec 	a
8028: 08      			ex 		af,af' 								; put page in A'
8029: 21658A  			ld 		hl,PAGEStackBase 					; reset the page stack
802C: 22638A  			ld 		(PAGEStackPointer),hl
802F: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8030:         	PAGESwitch:
8030: F5      			push 	af
8031: E5      			push 	hl
              	
8032: F5      			push 	af 									; save A on stack
8033: 2A638A  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
8036: 08      			ex 		af,af'
8037: 77      			ld 		(hl),a
8038: 23      			inc 	hl
8039: 22638A  			ld 		(PAGEStackPointer),hl
              	
803C: F1      			pop 	af 									; restore new A
803D: ED9256  			db 		$ED,$92,$56							; switch to page A
8040: 3C      			inc 	a
8041: ED9257  			db 		$ED,$92,$57
8044: 3D      			dec 	a
8045: 08      			ex 		af,af' 								; put page in A'
              	
8046: E1      			pop 	hl
8047: F1      			pop 	af
8048: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
8049:         	PAGERestore:
8049: F5      			push 	af
804A: E5      			push 	hl
804B: 2A638A  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
804E: 2B      			dec 	hl
804F: 7E      			ld 		a,(hl)
8050: 22638A  			ld 		(PAGEStackPointer),hl
8053: ED9256  			db 		$ED,$92,$56							; switch to page A
8056: 3C      			inc 	a
8057: ED9257  			db 		$ED,$92,$57
805A: 3D      			dec 	a
805B: 08      			ex 		af,af' 								; update A'
805C: E1      			pop 	hl
805D: F1      			pop 	af
805E: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
805F:         	FARCompileByteL:
805F: 7D      			ld 		a,l
              			
8060:         	FARCompileByte:
8060: F5      			push 	af 									; save byte and HL
8061: E5      			push 	hl
8062: F5      			push 	af 									; save byte
8063: 3A4B8A  			ld		a,(SINextFreeCodePage) 				; switch to page
8066: CD3080  			call 	PAGESwitch
8069: 2A478A  			ld 		hl,(SINextFreeCode) 				; write to memory location
806C: F1      			pop 	af
806D: 77      			ld 		(hl),a
806E: 23      			inc 	hl 									; bump memory location
806F: 22478A  			ld 		(SINextFreeCode),hl 				; write back
8072: CD4980  			call 	PAGERestore
8075: E1      			pop 	hl 									; restore and exit
8076: F1      			pop 	af
8077: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
8078:         	FARCompileWord:
8078: F5      			push 	af 									; save byte and HL
8079: D5      			push 	de
807A: E5      			push 	hl
807B: EB      			ex 		de,hl 								; word into DE
807C: 3A4B8A  			ld		a,(SINextFreeCodePage) 				; switch to page
807F: CD3080  			call 	PAGESwitch
8082: 2A478A  			ld 		hl,(SINextFreeCode) 				; write to memory location
8085: 73      			ld 		(hl),e
8086: 23      			inc 	hl 	
8087: 72      			ld 		(hl),d
8088: 23      			inc 	hl
8089: 22478A  			ld 		(SINextFreeCode),hl 				; write back
808C: CD4980  			call 	PAGERestore
808F: E1      			pop 	hl
8090: D1      			pop 	de 									; restore and exit
8091: F1      			pop 	af
8092: C9      			ret
              												
              	; ***********************************************************************************************
              	;
              	;									Far Read Byte at (SIWord):A
              	;
              	; ***********************************************************************************************
              	
8093:         	FARRead:
8093: 3A578A  			ld 		a,(SIWord)
8096: CD3080  			call 	PAGESwitch
8099: 6E      			ld 		l,(hl)
809A: 2600    			ld 		h,0
809C: CD4980  			call 	PAGERestore
809F: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;									Far Write Byte B.0 at (SIWord):A
              	;
              	; ***********************************************************************************************
              	
80A0:         	FARWrite:
80A0: 3A578A  			ld 		a,(SIWord)
80A3: CD3080  			call 	PAGESwitch
80A6: 73      			ld 		(hl),e
80A7: CD4980  			call 	PAGERestore
80AA: C9      			ret
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
80AB:         	DIVDivideMod16:
              	
80AB: C5      		push 	bc
80AC: 42      		ld 		b,d 				; DE 
80AD: 4B      		ld 		c,e
80AE: EB      		ex 		de,hl
80AF: 210000  		ld 		hl,0
80B2: 78      		ld 		a,b
80B3: 0608    		ld 		b,8
80B5:         	Div16_Loop1:
80B5: 17      		rla
80B6: ED6A    		adc 	hl,hl
80B8: ED52    		sbc 	hl,de
80BA: 3001    		jr 		nc,Div16_NoAdd1
80BC: 19      		add 	hl,de
80BD:         	Div16_NoAdd1:
80BD: 10F6    		djnz 	Div16_Loop1
80BF: 17      		rla
80C0: 2F      		cpl
80C1: 47      		ld 		b,a
80C2: 79      		ld 		a,c
80C3: 48      		ld 		c,b
80C4: 0608    		ld 		b,8
80C6:         	Div16_Loop2:
80C6: 17      		rla
80C7: ED6A    		adc 	hl,hl
80C9: ED52    		sbc 	hl,de
80CB: 3001    		jr 		nc,Div16_NoAdd2
80CD: 19      		add 	hl,de
80CE:         	Div16_NoAdd2:
80CE: 10F6    		djnz 	Div16_Loop2
80D0: 17      		rla
80D1: 2F      		cpl
80D2: 51      		ld 		d,c
80D3: 5F      		ld 		e,a
80D4: C1      		pop 	bc
80D5: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
80D6:         	MULTMultiply16:
80D6: C5      			push 	bc
80D7: D5      			push 	de
80D8: 44      			ld 		b,h 							; get multipliers in DE/BC
80D9: 4D      			ld 		c,l
80DA: 210000  			ld 		hl,0 							; zero total
80DD:         	__Core__Mult_Loop:
80DD: CB41    			bit 	0,c 							; lsb of shifter is non-zero
80DF: 2801    			jr 		z,__Core__Mult_Shift
80E1: 19      			add 	hl,de 							; add adder to total
80E2:         	__Core__Mult_Shift:
80E2: CB38    			srl 	b 								; shift BC right.
80E4: CB19    			rr 		c
80E6: EB      			ex 		de,hl 							; shift DE left
80E7: 29      			add 	hl,hl
80E8: EB      			ex 		de,hl
80E9: 78      			ld 		a,b 							; loop back if BC is nonzero
80EA: B1      			or 		c
80EB: 20F0    			jr 		nz,__Core__Mult_Loop
80ED: D1      			pop 	de
80EE: C1      			pop 	bc
80EF: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
80F0:         	GFXClearScreen:
80F0: E5      			push 	hl 									; clear screen by reinitialising
80F1: 3A898A  			ld 		a,(DIScreenMode)
80F4: 6F      			ld 		l,a
80F5: CDFA80  			call 	GFXMode
80F8: E1      			pop 	hl
80F9: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80FA:         	GFXMode:
80FA: C5      			push 	bc
80FB: D5      			push 	de
80FC: E5      			push 	hl
80FD: 7D      			ld 		a,l 								; save current mode
80FE: 32898A  			ld 		(DIScreenMode),a
8101: 2D      			dec 	l 									; L = 1 mode layer2
8102: 2808    			jr 		z,__GFXLayer2
8104: 2D      			dec 	l
8105: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8107: CD6482  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
810A: 1808    			jr 		__GFXConfigure
              	
810C:         	__GFXLayer2:
810C: CDC782  			call 	GFXInitialiseLayer2
810F: 1803    			jr 		__GFXConfigure
              	
8111:         	__GFXLowRes:
8111: CD5E83  			call 	GFXInitialiseLowRes
              	
8114:         	__GFXConfigure:
8114: 7D      			ld 		a,l 								; save screen size
8115: 32758A  			ld 		(DIScreenWidth),a
8118: 7C      			ld 		a,h
8119: 32798A  			ld 		(DIScreenHeight),a
811C: EB      			ex 		de,hl 								; save driver
811D: 22818A  			ld 		(DIScreenDriver),hl
              	
8120: 6A      			ld 		l,d 								; put sizes in HL DE
8121: 2600    			ld 		h,0
8123: 1600    			ld 		d,0
8125: CDD680  			call 	MULTMultiply16 						; multiply to get size and store.
8128: 227D8A  			ld 		(DIScreenSize),hl
              	
812B: E1      			pop 	hl
812C: D1      			pop 	de
812D: C1      			pop 	bc
812E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
812F:         	GFXWriteCharacter:
812F: F5      			push 	af
8130: C5      			push 	bc
8131: D5      			push 	de
8132: E5      			push 	hl
8133: 013D81  			ld 		bc,__GFXWCExit
8136: C5      			push 	bc
8137: ED4B818A			ld 		bc,(DIScreenDriver)
813B: C5      			push 	bc
813C: C9      			ret
813D:         	__GFXWCExit:
813D: E1      			pop 	hl
813E: D1      			pop 	de
813F: C1      			pop 	bc
8140: F1      			pop 	af
8141: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8142:         	GFXWriteHexWord:
8142: 3E06    			ld 		a,6 
8144:         	GFXWriteHexWordA:
8144: C5      			push 	bc
8145: D5      			push 	de
8146: E5      			push 	hl
8147: 4F      			ld 		c,a
8148: 7A      			ld 		a,d
8149: D5      			push 	de
814A: CD5681  			call 	__GFXWHByte
814D: D1      			pop 	de
814E: 7B      			ld 		a,e
814F: CD5681  			call	__GFXWHByte
8152: E1      			pop 	hl
8153: D1      			pop 	de
8154: C1      			pop 	bc
8155: C9      			ret
              	
8156:         	__GFXWHByte:
8156: F5      			push 	af
8157: CB0F    			rrc 	a
8159: CB0F    			rrc		a
815B: CB0F    			rrc 	a
815D: CB0F    			rrc 	a
815F: CD6381  			call 	__GFXWHNibble
8162: F1      			pop 	af
8163:         	__GFXWHNibble:
8163: 51      			ld 		d,c
8164: E60F    			and 	15
8166: FE0A    			cp 		10
8168: 3802    			jr 		c,__GFXWHDigit
816A: C607    			add		a,7
816C:         	__GFXWHDigit:
816C: C630    			add 	a,48
816E: 5F      			ld 		e,a
816F: CD2F81  			call 	GFXWriteCharacter
8172: 23      			inc 	hl
8173: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
8174:         	GFXGetFontGraphicDE:
8174: F5      			push 	af
8175: E5      			push 	hl
8176: E67F    			and 	$7F 								; bits 0-6 only.
8178: D620    			sub 	32
817A: 6F      			ld 		l,a 								; put in HL
817B: 2600    			ld 		h,0
817D: 29      			add 	hl,hl 								; x 8
817E: 29      			add 	hl,hl
817F: 29      			add 	hl,hl
8180: ED5B858A			ld 		de,(DIFontBase) 					; add the font base.
8184: 19      			add 	hl,de
8185: EB      			ex 		de,hl 								; put in DE (font address)
              	
8186: E1      			pop 	hl
8187: F1      			pop 	af
8188: FE7F    			cp 		$7F 								; map $7F to the prompt character
818A: C0      			ret 	nz
818B: 118F81  			ld 		de,__GFXPromptCharacter
818E: C9      			ret
              	
818F:         	__GFXPromptCharacter:
818F: FC7E3F1F			db 		$FC,$7E,$3F,$1F
8193: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8197:         	IOScanKeyboard:
8197: C5      			push 	bc
8198: D5      			push 	de
8199: E5      			push 	hl
              	
819A: 21EC81  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
819D: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
819F: 06FE    			ld 		b,$FE
81A1: ED78    			in 		a,(c)
81A3: CB47    			bit 	0,a
81A5: 2005    			jr 		nz,__kr1
81A7: 213C82  			ld 		hl,__kr_shift_table
81AA: 180B    			jr 		__kr2
81AC:         	__kr1:
81AC: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
81AE: ED78    			in 		a,(c)
81B0: CB4F    			bit 	1,a
81B2: 2003    			jr 		nz,__kr2
81B4: 211482  			ld 		hl,__kr_symbol_shift_table
81B7:         	__kr2:
              	
81B7: 1EFE    			ld 		e,$FE 								; scan pattern.
81B9: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
81BA: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
81BC: FEFE    			cp 		$FE
81BE: 2808    			jr 		z,___kr4
81C0: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
81C2: FE7F    			cp 		$7F
81C4: 2802    			jr 		z,___kr4
81C6: 161F    			ld 		d,$01F 								; check all bits.
81C8:         	___kr4:
81C8: 43      			ld 		b,e 								; scan the keyboard
81C9: 0EFE    			ld 		c,$FE
81CB: ED78    			in 		a,(c)
81CD: 2F      			cpl 										; make that active high.
81CE: A2      			and 	d  									; and with check value.
81CF: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81D1: 23      			inc 	hl 									; next set of keyboard characters
81D2: 23      			inc 	hl
81D3: 23      			inc 	hl
81D4: 23      			inc 	hl
81D5: 23      			inc 	hl
              	
81D6: 7B      			ld 		a,e 								; get pattern
81D7: 87      			add 	a,a 								; shift left
81D8: F601    			or 		1 									; set bit 1.
81DA: 5F      			ld 		e,a
              	
81DB: FEFF    			cp 		$FF 								; finished when all 1's.
81DD: 20DA    			jr 		nz,__kr3 
81DF: AF      			xor 	a
81E0: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81E2:         	__kr_keypressed:
81E2: 23      			inc 	hl  								; shift right until carry set
81E3: 1F      			rra
81E4: 30FC    			jr 		nc,__kr_keypressed
81E6: 2B      			dec 	hl 									; undo the last inc hl
81E7: 7E      			ld 		a,(hl) 								; get the character number.
81E8:         	__kr_exit:
81E8: E1      			pop 	hl
81E9: D1      			pop 	de
81EA: C1      			pop 	bc
81EB: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
81EC:         	__kr_no_shift_table:
81EC: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81F0: 76617364	
81F4: 6667    	
81F6: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
81FA: 74313233	
81FE: 3435    	
8200: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
8204: 36706F69	
8208: 7579    	
820A: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
820E: 6820006D	
8212: 6E62    	
              	
8214:         	__kr_symbol_shift_table:
8214: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8218: 2F7E7C5C	
821C: 7B7D    	
821E: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
8222: 3E214023	
8226: 2425    	
8228: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
822C: 26223B00	
8230: 5D5B    	
8232: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8236: 5E20002E	
823A: 2C2A    	
              	
823C:         	__kr_shift_table:
823C: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8240: 2F7E7C5C	
8244: 7B7D    	
8246: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
824A: 3E214023	
824E: 2414    	
8250: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8254: 15223B00	
8258: 5D5B    	
825A: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
825E: 5E20002E	
8262: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8264:         	GFXInitialise48k:
8264: F5      			push 	af 									; save registers
8265: C5      			push 	bc
              	
8266: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8269: 3E00    			ld 		a,0 								; disable Layer 2
826B: ED79    			out 	(c),a
826D: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8271: 210040  			ld 		hl,$4000 							; clear pixel memory
8274: 3600    	__cs1:	ld 		(hl),0
8276: 23      			inc 	hl
8277: 7C      			ld 		a,h
8278: FE58    			cp 		$58
827A: 20F8    			jr 		nz,__cs1
827C: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
827E: 23      			inc 	hl
827F: 7C      			ld 		a,h
8280: FE5B    			cp 		$5B
8282: 20F8    			jr 		nz,__cs2	
8284: AF      			xor 	a 									; border off
8285: D3FE    			out 	($FE),a
8287: C1      			pop 	bc
8288: F1      			pop 	af
8289: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
828C: 119082  			ld 		de,GFXPrintCharacter48k
828F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8290:         	GFXPrintCharacter48k:
8290: F5      			push 	af 									; save registers
8291: C5      			push 	bc
8292: D5      			push 	de
8293: E5      			push 	hl
              	
8294: 43      			ld 		b,e 								; character in B
8295: 7C      			ld 		a,h 								; check range.
8296: FE03    			cp 		3
8298: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
829A: E5      			push 	hl 									; save position.
829B: 7C      			ld 		a,h
829C: C658    			add 	$58
829E: 67      			ld 		h,a
              	
829F: 7A      			ld 		a,d 								; get current colour
82A0: E607    			and 	7  									; mask 0..2
82A2: F640    			or 		$40  								; make bright
82A4: 77      			ld 		(hl),a 								; store it.	
82A5: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
82A6: D5      			push 	de
82A7: EB      			ex 		de,hl
82A8: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
82A9: 7A      			ld 		a,d
82AA: E603    			and 	3
82AC: 87      			add 	a,a
82AD: 87      			add 	a,a
82AE: 87      			add 	a,a
82AF: F640    			or 		$40
82B1: 67      			ld 		h,a
82B2: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
82B3: 78      			ld 		a,b 								; get character
82B4: CD7481  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
82B7: 78      			ld 		a,b
82B8: 0608    			ld 		b,8 								; copy 8 characters
82BA: 0E00    			ld 		c,0 								; XOR value 0
82BC:         	__ZXWCCopy:
82BC: 1A      			ld 		a,(de)								; get font data
82BD: 77      			ld 		(hl),a 								; write back
82BE: 24      			inc 	h 									; bump pointers
82BF: 13      			inc 	de
82C0: 10FA    			djnz 	__ZXWCCopy 							; do B times.
82C2:         	__ZXWCExit:
82C2: E1      			pop 	hl 									; restore and exit
82C3: D1      			pop 	de
82C4: C1      			pop 	bc
82C5: F1      			pop 	af
82C6: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82C7:         	GFXInitialiseLayer2:
82C7: F5      			push 	af
82C8: C5      			push 	bc
82C9: D5      			push 	de
82CA: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82CE: 1E02    			ld 		e,2 								; 3 banks to erase
82D0:         	L2PClear:
82D0: 7B      			ld 		a,e 								; put bank number in bits 6/7
82D1: CB0F    			rrc 	a
82D3: CB0F    			rrc 	a
82D5: F603    			or 		2+1 								; shadow on, visible, enable write paging
82D7: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82DA: ED79    			out 	(c),a
82DC: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82DF: 55      			ld 		d,l 								; D = 0, slightly quicker.
82E0:         	L2PClearBank: 										; assume default palette :)
82E0: 2B      			dec 	hl
82E1: 72      			ld 		(hl),d
82E2: 7C      			ld 		a,h
82E3: B5      			or 		l
82E4: 20FA    			jr		nz,L2PClearBank
82E6: 1D      			dec 	e
82E7: F2D082  			jp 		p,L2PClear
              	
82EA: AF      			xor 	a
82EB: D3FE    			out 	($FE),a
              	
82ED: D1      			pop 	de
82EE: C1      			pop 	bc
82EF: F1      			pop 	af
82F0: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82F3: 11F782  			ld 		de,GFXPrintCharacterLayer2
82F6: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82F7:         	GFXPrintCharacterLayer2:
82F7: F5      			push 	af
82F8: C5      			push 	bc
82F9: D5      			push 	de
82FA: E5      			push 	hl
82FB: DDE5    			push 	ix
              	
82FD: 43      			ld 		b,e 								; save A temporarily
82FE: 78      			ld 		a,b
              	
82FF: 7C      			ld 		a,h
8300: FE03    			cp 		3
8302: 3053    			jr 		nc,__L2Exit 						; check position in range
8304: 78      			ld 		a,b
              	
8305: F5      			push 	af 	
8306: AF      			xor 	a 									; convert colour in C to palette index
8307: CB42    			bit 	0,d 								; (assumes standard palette)
8309: 2802    			jr 		z,__L2Not1
830B: F603    			or 		$03
830D:         	__L2Not1:
830D: CB52    			bit 	2,d
830F: 2802    			jr 		z,__L2Not2
8311: F61C    			or 		$1C
8313:         	__L2Not2:
8313: CB4A    			bit 	1,d
8315: 2802    			jr 		z,__L2Not3
8317: F6C0    			or 		$C0
8319:         	__L2Not3:
8319: 4F      			ld 		c,a 								; C is foreground
831A: F1      			pop 	af 									; restore char
              	
831B: CD7481  			call 	GFXGetFontGraphicDE 				; font offset in DE
831E: D5      			push 	de 									; transfer to IX
831F: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
8321: C5      			push 	bc
8322: 7C      			ld  	a,h 								; this is the page number.
8323: CB0F    			rrc 	a
8325: CB0F    			rrc 	a
8327: E6C0    			and 	$C0 								; in bits 6 & 7
8329: F603    			or 		$03 								; shadow on, visible, enable write pagin.
832B: 013B12  			ld 		bc,$123B 							; out to layer 2 port
832E: ED79    			out 	(c),a
8330: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8331: EB      			ex 		de,hl
8332: 6B      			ld 		l,e
8333: 2600    			ld 		h,0
8335: 29      			add 	hl,hl 								
8336: 29      			add 	hl,hl
8337: 29      			add 	hl,hl
8338: CB24    			sla 	h
833A: CB24    			sla 	h
833C: CB24    			sla 	h
              	
833E: 1E08    			ld 		e,8 								; do 8 rows
8340:         	__L2Outer:
8340: E5      			push 	hl 									; save start
8341: 1608    			ld 		d,8 								; do 8 columns
8343: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8346: DD23    			inc 	ix
8348:         	__L2Loop:
8348: 3600    			ld 		(hl),0 								; background
834A: 87      			add 	a,a 								; shift pattern left
834B: 3001    			jr 		nc,__L2NotSet
834D: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
834E:         	__L2NotSet:
834E: 23      			inc 	hl
834F: 15      			dec 	d 									; do a row
8350: 20F6    			jr 		nz,	__L2Loop
8352: E1      			pop 	hl 									; restore, go 256 bytes down.
8353: 24      			inc 	h
8354: 1D      			dec 	e 									; do 8 rows
8355: 20E9    			jr 		nz,__L2Outer	
8357:         	__L2Exit:
8357: DDE1    			pop 	ix
8359: E1      			pop 	hl
835A: D1      			pop 	de
835B: C1      			pop 	bc
835C: F1      			pop 	af
835D: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
835E:         	GFXInitialiseLowRes:
835E: F5      			push 	af
835F: C5      			push 	bc
8360: D5      			push 	de
              	
8361: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8365: AF      			xor 	a 									; layer 2 off.
8366: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8369: ED79    			out 	(c),a
              	
836B: 210040  			ld 		hl,$4000 							; erase the bank to $00 
836E: 110060  			ld 		de,$6000
8371:         	LowClearScreen: 									; assume default palette :)
8371: AF      			xor 	a
8372: 77      			ld 		(hl),a
8373: 12      			ld 		(de),a
8374: 23      			inc 	hl
8375: 13      			inc 	de
8376: 7C      			ld 		a,h
8377: FE58    			cp 		$58
8379: 20F6    			jr		nz,LowClearScreen
837B: AF      			xor 	a
837C: D3FE    			out 	($FE),a
837E: D1      			pop 	de
837F: C1      			pop 	bc
8380: F1      			pop 	af
8381: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8384: 118883  			ld 		de,GFXPrintCharacterLowRes
8387: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8388:         	GFXPrintCharacterLowRes:
8388: F5      			push 	af
8389: C5      			push 	bc
838A: D5      			push 	de
838B: E5      			push 	hl
838C: DDE5    			push 	ix
              	
838E: 43      			ld 		b,e 								; save character in B
              	
838F: 29      			add 	hl,hl
8390: 29      			add 	hl,hl
8391: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8392: FE03    			cp 		3
8394: 3046    			jr 		nc,__LPExit
              	
8396: 7A      			ld 		a,d 								; only lower 3 bits of colour
8397: E607    			and 	7
8399: 4F      			ld 		c,a 								; C is foreground
              	
839A: 78      			ld 		a,b 								; get char back
839B: CD7481  			call 	GFXGetFontGraphicDE
839E: D5      			push 	de
839F: DDE1    			pop 	ix
              	
83A1: EB      			ex 		de,hl
83A2: 7B      			ld 		a,e 								; put DE => HL
83A3: E6C0    			and 	192 								; these are part of Y
83A5: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83A6: 62      			ld 		h,d		
83A7: 29      			add 	hl,hl
83A8: 29      			add 	hl,hl
83A9: 29      			add 	hl,hl
83AA: 29      			add 	hl,hl
83AB: CBF4    			set 	6,h 								; put into $4000 range
              	
83AD: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83AF: A3      			and 	e 									; and with E, gives X position
83B0: 87      			add 	a,a 								; now multiplied by 8.
83B1: 5F      			ld 		e,a 								; DE is x offset.
83B2: 1600    			ld 		d,0  
              	
83B4: 19      			add 	hl,de
83B5: 7C      			ld 		a,h
83B6: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83B8: 3804    			jr 		c,__LowNotLower2
83BA: 110008  			ld 		de,$0800
83BD: 19      			add 	hl,de
83BE:         	__LowNotLower2:
83BE: 1E08    			ld 		e,8 								; do 8 rows
83C0:         	__LowOuter:
83C0: E5      			push 	hl 									; save start
83C1: 1608    			ld 		d,8 								; do 8 columns
83C3: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83C6: DD23    			inc 	ix
83C8:         	__LowLoop:
83C8: 3600    			ld 		(hl),0 								; background
83CA: 87      			add 	a,a 								; shift pattern left
83CB: 3001    			jr 		nc,__LowNotSet
83CD: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83CE:         	__LowNotSet:
83CE: 2C      			inc 	l
83CF: 15      			dec 	d 									; do a row
83D0: 20F6    			jr 		nz,	__LowLoop
83D2: E1      			pop 	hl 									; restore, go 256 bytes down.
83D3: D5      			push 	de
83D4: 118000  			ld 		de,128
83D7: 19      			add 	hl,de
83D8: D1      			pop 	de
83D9: 1D      			dec 	e 									; do 8 rows
83DA: 20E4    			jr 		nz,__LowOuter	
83DC:         	__LPExit:
83DC: DDE1    			pop 	ix
83DE: E1      			pop 	hl
83DF: D1      			pop 	de
83E0: C1      			pop 	bc
83E1: F1      			pop 	af
83E2: C9      			ret
              	
              	
              			include "compiler/dictionary.asm"			; dictionary add/update routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		19th November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at BC ends in $80-$FF, uses the current page/pointer
              	;		values. 
              	;
              	; ***********************************************************************************************
              	
83E3:         	DICTAddWord:
83E3: F5      			push 	af 									; registers to stack.
83E4: C5      			push 	bc
83E5: D5      			push 	de
83E6: E5      			push	hl
83E7: DDE5    			push 	ix
83E9: 60      			ld 		h,b 								; put name in HL
83EA: 69      			ld 		l,c
83EB: E5      			push 	hl 									
83EC: 06FF    			ld 		b,-1								; put length of string in B
83EE:         	__DICTAddGetLength:
83EE: 23      			inc 	hl
83EF: 04      			inc 	b
83F0: CB7E    			bit 	7,(hl)
83F2: 28FA    			jr 		z,__DICTAddGetLength
83F4: E1      			pop 	hl
              	
83F5: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
83F7: CD3080  			call 	PAGESwitch
              	
83FA: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
83FE:         	__DICTFindEndDictionary:
83FE: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
8401: B7      			or 		a
8402: 2807    			jr 		z,__DICTCreateEntry
8404: 5F      			ld 		e,a
8405: 1600    			ld 		d,0
8407: DD19    			add 	ix,de
8409: 18F3    			jr 		__DICTFindEndDictionary
              	
840B:         	__DICTCreateEntry:
840B: 78      			ld 		a,b
840C: C605    			add 	a,5
840E: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
8411: 3A4B8A  			ld 		a,(SINextFreeCodePage)				; code page
8414: DD7701  			ld 		(ix+1),a
8417: ED5B478A			ld 		de,(SINextFreeCode)					; code address
841B: DD7302  			ld 		(ix+2),e
841E: DD7203  			ld 		(ix+3),d 
              	
8421: DD7004  			ld 		(ix+4),b 							; length (0..4)
              	
8424: EB      			ex 		de,hl 								; put name in DE
8425: 13      			inc 	de 									; skip over tag.
8426:         	__DICTAddCopy:
8426: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
8427: DD7705  			ld 		(ix+5),a
842A: DD23    			inc 	ix 									
842C: 13      			inc 	de
842D: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
842F: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
8433: CD4980  			call 	PAGERestore
8436: DDE1    			pop 	ix 									; restore and exit
8438: E1      			pop 	hl
8439: D1      	 		pop 	de
843A: C1      			pop 	bc
843B: F1      			pop 	af
843C: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. BC points to name.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
843D:         	DICTFindWord:
843D: C5      			push 	bc 								; save registers - return in EHL Carry
843E: DDE5    			push 	ix
              	
8440: 60      			ld 		h,b 							; name in HL
8441: 69      			ld 		l,c
              			
8442: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
8444: CD3080  			call 	PAGESwitch
              	
8447: DD2100C0			ld 		ix,$C000 						; dictionary start			
844B:         	__DICTFindMainLoop:
844B: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
844E: B7      			or 		a
844F: 2836    			jr 		z,__DICTFindFail
              	
8451: DDE5    			push 	ix 								; save pointers on stack.
8453: E5      			push 	hl 
              	
8454: DD7E04  			ld 		a,(ix+4) 						; characters to compare
8457: E61F    			and 	$1F
8459: 47      			ld 		b,a
845A: 23      			inc 	hl 								; skip over tag
845B:         	__DICTCheckName:
845B: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
845E: BE      			cp 		(hl) 							; compare vs the matching character.
845F: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
8461: 23      			inc 	hl 								; HL point to next character
8462: DD23    			inc 	ix
8464: 10F5    			djnz 	__DICTCheckName
              	
8466: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
8468: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
846A: E1      			pop 	hl 								; Found a match. restore HL and IX
846B: DDE1    			pop 	ix
846D: 1600    			ld 		d,0 							; D = 0 for neatness.
846F: DD5E01  			ld 		e,(ix+1)						; E = page
8472: DD6E02  			ld 		l,(ix+2)						; HL = address
8475: DD6603  			ld 		h,(ix+3)		
8478: AF      			xor 	a 								; clear the carry flag.
8479: 1813    			jr 		__DICTFindExit
              	
847B:         	__DICTFindNoMatch:								; this one doesn't match.
847B: E1      			pop 	hl 								; restore HL and IX
847C: DDE1    			pop 	ix
847E:         	__DICTFindNext:
847E: DD5E00  			ld 		e,(ix+0)						; DE = offset
8481: 1600    			ld 		d,$00
8483: DD19    			add 	ix,de 							; next word.
8485: 18C4    			jr 		__DICTFindMainLoop				; and try the next one.
              	
8487:         	__DICTFindFail:
8487: 110000  			ld 		de,$0000 						; return all zeros.
848A: 210000  			ld 		hl,$0000
848D: 37      			scf 									; set carry flag
848E:         	__DICTFindExit:
848E: F5      			push 	af
848F: CD4980  			call 	PAGERestore
8492: F1      			pop 	af
8493: DDE1    			pop 	ix 								; pop registers and return.
8495: C1      			pop 	bc
8496: C9      			ret
              	
              			include "compiler/buffer.asm"				; buffer routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		buffer.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		23rd November 2018
              	;		Purpose :	Buffer read/write routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;			Given a buffer# in BC, convert that to a page A, and address BC.
              	;
              	; ***************************************************************************************
              	
8497:         	BUFFindBuffer:
8497: C5      			push 	bc 									; save buffer number
8498: 3E05    			ld 		a,5 								; divide by 32
849A:         	__BUFDiv32:
849A: CB38    			srl 	b
849C: CB19    			rr 		c
849E: 3D      			dec 	a
849F: 20F9    			jr 		nz,__BUFDiv32 						; this gives the index into the page
84A1: 3E22    			ld 		a,SourceFirstPage 					; add it twice to first page gives page #
84A3: 81      			add 	c 									; where the buffer is.
84A4: 81      			add 	c
              	
84A5: C1      			pop  	bc 									; get the buffer number back
84A6: F5      			push 	af 									; save buffer page
              	
84A7: 79      			ld 		a,c 								; this is the index in the page
84A8: E61F    			and 	31
84AA: 87      			add 	a,a 								; index x 2 
84AB: F6C0    			or 		$C0 								; put into $C000-$FFF range
84AD: 47      			ld 		b,a 								; BC = this index x 512
84AE: 0E00    			ld 		c,0
              	
84B0: F1      			pop 	af 									; A = saved buffer page
84B1: C9      			ret
              	
              	; ***************************************************************************************
              	;			
              	;							Load Buffer at A:BC into Edit Buffer
              	;
              	; ***************************************************************************************
              	
84B2:         	BUFLoadBuffer:
84B2: F5      			push 	af
84B3: C5      			push 	bc
84B4: D5      			push 	de
84B5: E5      			push 	hl
84B6: CD3080  			call 	PAGESwitch 							; switch to $22
84B9: 69      			ld 		l,c 								; copy it in.
84BA: 60      			ld 		h,b
84BB: 11087B  			ld 		de,EditBuffer
84BE: 010002  			ld 		bc,512
84C1: EDB0    			ldir
84C3: CD4980  			call 	PAGERestore 						; go back
84C6: E1      			pop 	hl
84C7: D1      			pop 	de
84C8: C1      			pop 	bc
84C9: F1      			pop 	af
84CA: C9      			ret
              	
              	; ***************************************************************************************
              	;			
              	;							Save Buffer into memory at A:BC 
              	;
              	; ***************************************************************************************
              	
84CB:         	BUFSaveBuffer:
84CB: F5      			push 	af
84CC: C5      			push 	bc
84CD: D5      			push 	de
84CE: E5      			push 	hl
84CF: CD3080  			call 	PAGESwitch 							; switch to $22
84D2: 59      			ld 		e,c 								; copy it in.
84D3: 50      			ld 		d,b
84D4: 21087B  			ld 		hl,EditBuffer
84D7: 010002  			ld 		bc,512
84DA: EDB0    			ldir
84DC: CD4980  			call 	PAGERestore 						; go back
84DF: E1      			pop 	hl
84E0: D1      			pop 	de
84E1: C1      			pop 	bc
84E2: F1      			pop 	af
84E3: C9      			ret
              			include "compiler/utility.asm"				; utility functions
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Utility functions.
              	;		Date : 		19th November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		computils.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Compiler utilities
              	;		Date : 		20th November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;								  Compile code inline following me, B bytes
              	;
              	; ********************************************************************************************************
              			
84E4:         	COMCopyFollowingCode:
84E4: 78      			ld 		a,b
84E5: E67F    			and 	$7F
84E7: C1      			pop 	bc										; pop the address off the stack.
84E8: E5      			push 	hl
84E9: 69      			ld 		l,c
84EA: 60      			ld 		h,b
84EB: 47      			ld 		b,a
84EC:         	__COMCFCLoop:
84EC: 7E      			ld 		a,(hl)									; read the byte
84ED: 23      			inc 	hl
84EE: CD6080  			call 	FARCompileByte 							; compile inline
84F1: 10F9    			djnz 	__COMCFCLoop
84F3: E1      			pop 	hl
84F4: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;									Compile call to code following me.
              	;
              	; ********************************************************************************************************
              	
84F5:         	COMCompileCallToFollowing:
84F5: C1      			pop 	bc
84F6: E5      			push 	hl
              			;
              			;		Paging if *both* in $C000-$FFFF but the pages are different.
              			;		Or if calling from < $C000 to >= $C000 (e.g. the execute code)
              			;
84F7: 3ECD    			ld 		a,$CD 									; compile CALL opcode
84F9: CD6080  			call 	FARCompileByte
84FC: 60      			ld 		h,b
84FD: 69      			ld 		l,c
84FE: CD7880  			call 	FARCompileWord 							; compile address
8501: E1      			pop 	hl
8502: C9      			ret
              	
              	
              			include "compiler/constant.asm" 			; ASCII -> Int conversion
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		20th November 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at BC to constant in HL. DE 0, Carry Clear if true
              	;									Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
8503:         	CONSTConvert:
8503: C5      		push 	bc
              	
8504: 50      		ld 		d,b 									; string in DE.
8505: 59      		ld 		e,c
              		
8506: 210000  		ld 		hl,$0000								; result in HL.
8509: 13      		inc 	de 										; skip over the tag
850A: 0E00    		ld 		c,0										; C is the negate flag
850C:         	__CONConvLoop:
850C: 1A      		ld 		a,(de)									; get next character
850D: 13      		inc 	de
              	
850E: FE30    		cp 		'0'										; must be 0-9 otherwise
8510: 3830    		jr 		c,__CONConFail
8512: FE3A    		cp 		'9'+1
8514: 302C    		jr 		nc,__CONConFail
              	
8516: C5      		push 	bc
8517: E5      		push 	hl 										; HL -> BC
8518: C1      		pop 	bc
8519: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
851A: 29      		add 	hl,hl
851B: 09      		add 	hl,bc 						
851C: 29      		add 	hl,hl 									; HL := HL * 10
851D: 0600    		ld 		b,0 									; add the digit into HL
851F: E60F    		and 	15
8521: 4F      		ld 		c,a
8522: 09      		add 	hl,bc
8523: C1      		pop 	bc
              	
8524: 1A      		ld 		a,(de) 									; check ends in -
8525: FE2D    		cp 		'-'									
8527: 2806    		jr 		z,__CONMinusExit 						
8529: CB7F    		bit 	7,a 									; check done everything.
852B: 28DF    		jr 		z,__CONConvLoop
852D: 180D    		jr 		__CONNotNegative
              	
852F:         	__CONMinusExit:
852F: 13      		inc 	de 										; if not the last, it's an error.
8530: 1A      		ld 		a,(de)
8531: CB7F    		bit 	7,a
8533: 280D    		jr		z,__CONConFail
              	
8535: 7C      		ld 		a,h 									; negate HL
8536: 2F      		cpl 	
8537: 67      		ld 		h,a
8538: 7D      		ld 		a,l
8539: 2F      		cpl
853A: 6F      		ld 		l,a
853B: 23      		inc 	hl
              	
853C:         	__CONNotNegative:
853C: 110000  		ld 		de,$0000
853F: AF      		xor 	a 										; clear carry
8540: C1      		pop 	bc
8541: C9      		ret
              	
8542:         	__CONConFail: 										; didn't convert
8542: 21FFFF  		ld 		hl,$FFFF
8545: 11FFFF  		ld 		de,$FFFF
8548: 37      		scf
8549: C1      		pop 	bc
854A: C9      		ret
              	
              		
              			include "compiler/compiler.asm"				; actual compiler code.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		20th November 2018
              	;		Purpose :	Compile/Execute code.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
854B:         	CompilerTest:
854B: 1145B0  			ld 		de,$B045
854E: 2156A1  			ld 		hl,$A156
8551: 010000  			ld 		bc,0
8554: CD5985  			call 	COMCompileBuffer
8557: 18FE    	w1: 	jr 		w1
              	
              	; ***************************************************************************************
              	;
              	;					Compile the buffer given in BC. DE/HL are B and A
              	;
              	; ***************************************************************************************
              	
8559:         	COMCompileBuffer:
8559: DD01    			db 		$DD,$01
855B: CD9784  			call 	BUFFindBuffer 						; A:BC is the buffer page/address
855E: CDB284  			call 	BUFLoadBuffer 						; load buffer into edit buffer.
8561: 01087B  			ld 		bc,EditBuffer 						; now process it.
8564:         	__COMCBTag:
8564: 0A      			ld 		a,(bc) 								; look at the first word
8565: FEFF    			cp 		$FF 								; reached the end ?
8567: C8      			ret 	z 									; exit having compiled.
              	
8568: 0A      			ld 		a,(bc)
8569: FE82    			cp 		$82 								; red (defining word)
856B: CC8585  			call 	z,COMDefinition_Red
856E: FE83    			cp 		$83 								; magenta (defining word)
8570: CC8585  			call 	z,COMDefinition_Magenta	
8573: FE84    			cp 		$84 								; green (compile) word
8575: CC8A85  			call 	z,COMCompileWord_Green
8578: FE86    			cp 		$86 								; yellow (execute) word
857A: CC8F85  			call 	z,COMExecuteWord_Yellow
857D:         	__COMCBNext: 										; go to the next tag/end (bit 7 set)
857D: 03      			inc 	bc
857E: 0A      			ld 		a,(bc)
857F: CB7F    			bit 	7,a
8581: 28FA    			jr 		z,__COMCBNext
8583: 18DF    			jr 	__COMCBTag 								
              	
8585:         	COMDefinition_Red:
8585:         	COMDefinition_Magenta:
8585: D5      			push 	de
8586: E5      			push 	hl
              	
8587: E1      			pop 	hl
8588: D1      			pop 	de
8589: C9      			ret
              	
858A:         	COMCompileWord_Green:
858A: D5      			push 	de
858B: E5      			push 	hl
              	
858C: E1      			pop 	hl
858D: D1      			pop 	de
858E: C9      			ret
              	
858F:         	COMExecuteWord_Yellow:
858F: C9      			ret
              					
              			include "temp/__words.asm" 					; and the actual words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== + copies ===========
              	
8590:         	flatwordmarker_2b:
8590: 0601    	    ld  b,en_flat_2b-st_flat_2b
8592: CDE484  	    call COMCopyFollowingCode
8595:         	st_flat_2b:
8595: 19      	  add  hl,de
8596:         	en_flat_2b:
              	
              	; ***************************************************************************************
              	
              	; =========== * word ===========
              	
8596:         	flatwordmarker_2a:
8596: CDF584  	    call COMCompileCallToFollowing
8599:         	st_flat_2a:
8599: C3D680  	  jp   MULTMultiply16
859C:         	en_flat_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== and word ===========
              	
859C:         	flatwordmarker_61_6e_64:
859C: CDF584  	    call COMCompileCallToFollowing
859F:         	st_flat_61_6e_64:
859F: 7C      	  ld   a,h
85A0: A2      	  and  d
85A1: 67      	  ld   h,a
85A2: 7D      	  ld   a,l
85A3: A3      	  and  e
85A4: 6F      	  ld   l,a
85A5: C9      	  ret
85A6:         	en_flat_61_6e_64:
              	
              	; ***************************************************************************************
              	
              	; =========== xor word ===========
              	
85A6:         	flatwordmarker_78_6f_72:
85A6: CDF584  	    call COMCompileCallToFollowing
85A9:         	st_flat_78_6f_72:
85A9: 7C      	  ld   a,h
85AA: AA      	  xor   d
85AB: 67      	  ld   h,a
85AC: 7D      	  ld   a,l
85AD: AB      	  xor  e
85AE: 6F      	  ld   l,a
85AF: C9      	  ret
85B0:         	en_flat_78_6f_72:
              	
              	; ***************************************************************************************
              	
              	; =========== or word ===========
              	
85B0:         	flatwordmarker_6f_72:
85B0: CDF584  	    call COMCompileCallToFollowing
85B3:         	st_flat_6f_72:
85B3: 7C      	  ld   a,h
85B4: B2      	  or   d
85B5: 67      	  ld   h,a
85B6: 7D      	  ld   a,l
85B7: B3      	  or   e
85B8: 6F      	  ld   l,a
85B9: C9      	  ret
85BA:         	en_flat_6f_72:
              	
              	
              	; ***************************************************************************************
              	
              	; =========== = word ===========
              	
85BA:         	flatwordmarker_3d:
85BA: CDF584  	    call COMCompileCallToFollowing
85BD:         	st_flat_3d:
85BD: 7B      	  ld   a,e
85BE: BD      	  cp   l
85BF: 2006    	  jr   nz,__EqualFail
85C1: 7A      	  ld   a,d
85C2: BC      	  cp   h
85C3: 21FFFF  	  ld   hl,$FFFF
85C6: C8      	  ret  z
85C7:         	__EqualFail:
85C7: 210000  	  ld   hl,0
85CA: C9      	  ret
              	
85CB:         	en_flat_3d:
              	
              	; ***************************************************************************************
              	
              	; =========== < word ===========
              	
85CB:         	flatwordmarker_3c:
85CB: CDF584  	    call COMCompileCallToFollowing
85CE:         	st_flat_3c:
85CE: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
85CF: AC      	  xor  h
85D0: 87      	  add  a,a      ; if the signs are different, check those.
85D1: 380B    	  jr   c,__LessDifferentSigns
              	
85D3: D5      	  push  de
85D4: EB      	  ex   de,hl      ; want to do B-A
85D5: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
85D7: D1      	  pop  de
85D8: 3808    	  jr   c,__LessTrue
              	
85DA:         	__LessFalse:
85DA: 210000  	  ld   hl,$0000
85DD: C9      	  ret
              	
85DE:         	__LessDifferentSigns:
85DE: CB7A    	  bit  7,d      ; if B is +ve then B must be > A
85E0: 28F8    	  jr   z,__LessFalse
              	
85E2:         	__LessTrue:
85E2: 21FFFF  	  ld   hl,$FFFF
85E5: C9      	  ret
              	
85E6:         	en_flat_3c:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphics.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Hardware I/O words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== screen! word ===========
              	
85E6:         	flatwordmarker_73_63_72_65_65_6e_21:
85E6: CDF584  	    call COMCompileCallToFollowing
85E9:         	st_flat_73_63_72_65_65_6e_21:
85E9: C32F81  	 jp   GFXWriteCharacter
85EC:         	en_flat_73_63_72_65_65_6e_21:
              	
              	; ***************************************************************************************
              	
              	; =========== screen.mode word ===========
              	
85EC:         	flatwordmarker_73_63_72_65_65_6e_2e_6d_6f_64_65:
85EC: CDF584  	    call COMCompileCallToFollowing
85EF:         	st_flat_73_63_72_65_65_6e_2e_6d_6f_64_65:
85EF: C3FA80  	 jp   GFXMode
85F2:         	en_flat_73_63_72_65_65_6e_2e_6d_6f_64_65:
              	
              	; ***************************************************************************************
              	
              	; =========== screen.clear word ===========
              	
85F2:         	flatwordmarker_73_63_72_65_65_6e_2e_63_6c_65_61_72:
85F2: CDF584  	    call COMCompileCallToFollowing
85F5:         	st_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72:
85F5: C3F080  	 jp   GFXClearScreen
85F8:         	en_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72:
              	
              	; ***************************************************************************************
              	
              	; =========== hex! word ===========
              	
85F8:         	flatwordmarker_68_65_78_21:
85F8: CDF584  	    call COMCompileCallToFollowing
85FB:         	st_flat_68_65_78_21:
85FB: C34281  	 jp   GFXWriteHexWord
85FE:         	en_flat_68_65_78_21:
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== c@ copies ===========
              	
85FE:         	flatwordmarker_63_40:
85FE: 0603    	    ld  b,en_flat_63_40-st_flat_63_40
8600: CDE484  	    call COMCopyFollowingCode
8603:         	st_flat_63_40:
8603: 6E      	  ld   l,(hl)
8604: 2600    	  ld   h,0
8606:         	en_flat_63_40:
              	
              	; ***************************************************************************************
              	
              	; =========== @ copies ===========
              	
8606:         	flatwordmarker_40:
8606: 0604    	    ld  b,en_flat_40-st_flat_40
8608: CDE484  	    call COMCopyFollowingCode
860B:         	st_flat_40:
860B: 7E      	  ld   a,(hl)
860C: 23      	  inc  hl
860D: 66      	  ld   h,(hl)
860E: 6F      	  ld   l,a
860F:         	en_flat_40:
              	
              	; ***************************************************************************************
              	
              	; =========== c! copies ===========
              	
860F:         	flatwordmarker_63_21:
860F: 0601    	    ld  b,en_flat_63_21-st_flat_63_21
8611: CDE484  	    call COMCopyFollowingCode
8614:         	st_flat_63_21:
8614: 73      	  ld   (hl),e
8615:         	en_flat_63_21:
              	
              	; ***************************************************************************************
              	
              	; =========== ! copies ===========
              	
8615:         	flatwordmarker_21:
8615: 0604    	    ld  b,en_flat_21-st_flat_21
8617: CDE484  	    call COMCopyFollowingCode
861A:         	st_flat_21:
861A: 73      	  ld   (hl),e
861B: 23      	  inc  hl
861C: 72      	  ld   (hl),d
861D: 2B      	  dec  hl
861E:         	en_flat_21:
              	
              	; ***************************************************************************************
              	
              	; =========== +! word ===========
              	
861E:         	flatwordmarker_2b_21:
861E: CDF584  	    call COMCompileCallToFollowing
8621:         	st_flat_2b_21:
8621: 7E      	  ld   a,(hl)
8622: 83      	  add  a,e
8623: 77      	  ld   (hl),a
8624: 23      	  inc  hl
              	
8625: 7E      	  ld   a,(hl)
8626: 8A      	  adc  a,d
8627: 77      	  ld   (hl),a
8628: 2B      	  dec  hl
8629: C9      	  ret
862A:         	en_flat_2b_21:
              	
              	; ***************************************************************************************
              	
              	; =========== p! copies ===========
              	
862A:         	flatwordmarker_70_21:
862A: 0604    	    ld  b,en_flat_70_21-st_flat_70_21
862C: CDE484  	    call COMCopyFollowingCode
862F:         	st_flat_70_21:
862F: 4D      	  ld   c,l
8630: 44      	  ld   b,h
8631: ED59    	  out  (c),e
8633:         	en_flat_70_21:
              	
              	; ***************************************************************************************
              	
              	; =========== p@ word ===========
              	
8633:         	flatwordmarker_70_40:
8633: CDF584  	    call COMCompileCallToFollowing
8636:         	st_flat_70_40:
8636: 4D      	  ld   c,l
8637: 44      	  ld   b,h
8638: ED68    	  in   l,(c)
863A: 2600    	  ld   h,0
863C: C9      	  ret
863D:         	en_flat_70_40:
              	
              	; ***************************************************************************************
              	
              	; =========== far@ word ===========
              	
863D:         	flatwordmarker_66_61_72_40:
863D: CDF584  	    call COMCompileCallToFollowing
8640:         	st_flat_66_61_72_40:
8640: C39380  	  jp   FARRead
8643:         	en_flat_66_61_72_40:
              	
              	; ***************************************************************************************
              	
              	; =========== far! word ===========
              	
8643:         	flatwordmarker_66_61_72_21:
8643: CDF584  	    call COMCompileCallToFollowing
8646:         	st_flat_66_61_72_21:
8646: C3A080  	  jp   FARWrite
8649:         	en_flat_66_61_72_21:
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Register operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== swap copies ===========
              	
8649:         	flatwordmarker_73_77_61_70:
8649: 0601    	    ld  b,en_flat_73_77_61_70-st_flat_73_77_61_70
864B: CDE484  	    call COMCopyFollowingCode
864E:         	st_flat_73_77_61_70:
864E: EB      	 ex   de,hl
864F:         	en_flat_73_77_61_70:
              	
              	; ***************************************************************************************
              	
              	; =========== a>b copies ===========
              	
864F:         	flatwordmarker_61_3e_62:
864F: 0602    	    ld  b,en_flat_61_3e_62-st_flat_61_3e_62
8651: CDE484  	    call COMCopyFollowingCode
8654:         	st_flat_61_3e_62:
8654: 54      	 ld   d,h
8655: 5D      	 ld   e,l
8656:         	en_flat_61_3e_62:
              	
              	; ***************************************************************************************
              	
              	; =========== b>a copies ===========
              	
8656:         	flatwordmarker_62_3e_61:
8656: 0602    	    ld  b,en_flat_62_3e_61-st_flat_62_3e_61
8658: CDE484  	    call COMCopyFollowingCode
865B:         	st_flat_62_3e_61:
865B: 62      	 ld   h,d
865C: 6B      	 ld   l,e
865D:         	en_flat_62_3e_61:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== ab>r copies.only ===========
              	
865D:         	flatwordmarker_61_62_3e_72:
865D: 0682    	    ld  b,en_flat_61_62_3e_72-st_flat_61_62_3e_72+$80
865F: CDE484  	    call COMCopyFollowingCode
8662:         	st_flat_61_62_3e_72:
8662: D5      	 push  de
8663: E5      	 push  hl
8664:         	en_flat_61_62_3e_72:
              	
              	; ***************************************************************************************
              	
              	; =========== r>ab copies.only ===========
              	
8664:         	flatwordmarker_72_3e_61_62:
8664: 0682    	    ld  b,en_flat_72_3e_61_62-st_flat_72_3e_61_62+$80
8666: CDE484  	    call COMCopyFollowingCode
8669:         	st_flat_72_3e_61_62:
8669: E1      	 pop  hl
866A: D1      	 pop  de
866B:         	en_flat_72_3e_61_62:
              	
              	; ***************************************************************************************
              	
              	; =========== r>bb copies.only ===========
              	
866B:         	flatwordmarker_72_3e_62_62:
866B: 0682    	    ld  b,en_flat_72_3e_62_62-st_flat_72_3e_62_62+$80
866D: CDE484  	    call COMCopyFollowingCode
8670:         	st_flat_72_3e_62_62:
8670: D1      	 pop  de
8671: D1      	 pop  de
8672:         	en_flat_72_3e_62_62:
              	
              	; ***************************************************************************************
              	
              	; =========== push copies.only ===========
              	
8672:         	flatwordmarker_70_75_73_68:
8672: 0681    	    ld  b,en_flat_70_75_73_68-st_flat_70_75_73_68+$80
8674: CDE484  	    call COMCopyFollowingCode
8677:         	st_flat_70_75_73_68:
8677: E5      	 push  hl
8678:         	en_flat_70_75_73_68:
              	
              	; ***************************************************************************************
              	
              	; =========== pop copies.only ===========
              	
8678:         	flatwordmarker_70_6f_70:
8678: 0682    	    ld  b,en_flat_70_6f_70-st_flat_70_6f_70+$80
867A: CDE484  	    call COMCopyFollowingCode
867D:         	st_flat_70_6f_70:
867D: EB      	 ex   de,hl
867E: E1      	 pop  hl
867F:         	en_flat_70_6f_70:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== 0= word ===========
              	
867F:         	flatwordmarker_30_3d:
867F: CDF584  	    call COMCompileCallToFollowing
8682:         	st_flat_30_3d:
8682: 7C      	  ld  a,h
8683: B5      	  or  l
8684: 210000  	  ld  hl,$0000
8687: C0      	  ret nz
8688: 2B      	  dec hl
8689: C9      	  ret
868A:         	en_flat_30_3d:
              	
              	; ***************************************************************************************
              	
              	; =========== 0< word ===========
              	
868A:         	flatwordmarker_30_3c:
868A: CDF584  	    call COMCompileCallToFollowing
868D:         	st_flat_30_3c:
868D: CB7C    	  bit 7,h
868F: 210000  	  ld  hl,$0000
8692: C8      	  ret z
8693: 2B      	  dec hl
8694: C9      	  ret
8695:         	en_flat_30_3c:
              	
              	; ***************************************************************************************
              	
              	; =========== - copies ===========
              	
8695:         	flatwordmarker_2d:
8695: 0607    	    ld  b,en_flat_2d-st_flat_2d
8697: CDE484  	    call COMCopyFollowingCode
869A:         	st_flat_2d:
869A: 7C      	  ld  a,h
869B: 2F      	  cpl
869C: 67      	  ld  h,a
869D: 7D      	  ld  a,l
869E: 2F      	  cpl
869F: 6F      	  ld  l,a
86A0: 23      	  inc hl
86A1:         	en_flat_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== not word ===========
              	
86A1:         	flatwordmarker_6e_6f_74:
86A1: CDF584  	    call COMCompileCallToFollowing
86A4:         	st_flat_6e_6f_74:
86A4: 7C      	  ld  a,h
86A5: 2F      	  cpl
86A6: 67      	  ld  h,a
86A7: 7D      	  ld  a,l
86A8: 2F      	  cpl
86A9: 6F      	  ld  l,a
86AA: C9      	  ret
86AB:         	en_flat_6e_6f_74:
              	
              	; ***************************************************************************************
              	
              	; =========== ++ copies ===========
              	
86AB:         	flatwordmarker_2b_2b:
86AB: 0601    	    ld  b,en_flat_2b_2b-st_flat_2b_2b
86AD: CDE484  	    call COMCopyFollowingCode
86B0:         	st_flat_2b_2b:
86B0: 23      	  inc hl
86B1:         	en_flat_2b_2b:
              	
              	; ***************************************************************************************
              	
              	; =========== -- copies ===========
              	
86B1:         	flatwordmarker_2d_2d:
86B1: 0601    	    ld  b,en_flat_2d_2d-st_flat_2d_2d
86B3: CDE484  	    call COMCopyFollowingCode
86B6:         	st_flat_2d_2d:
86B6: 2B      	  dec hl
86B7:         	en_flat_2d_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== 2* copies ===========
              	
86B7:         	flatwordmarker_32_2a:
86B7: 0601    	    ld  b,en_flat_32_2a-st_flat_32_2a
86B9: CDE484  	    call COMCopyFollowingCode
86BC:         	st_flat_32_2a:
86BC: 29      	  add  hl,hl
86BD:         	en_flat_32_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== 2/ copies ===========
              	
86BD:         	flatwordmarker_32_2f:
86BD: 0604    	    ld  b,en_flat_32_2f-st_flat_32_2f
86BF: CDE484  	    call COMCopyFollowingCode
86C2:         	st_flat_32_2f:
86C2: CB2C    	  sra  h
86C4: CB1D    	  rr   l
86C6:         	en_flat_32_2f:
              	
              	; ***************************************************************************************
              	
              	; =========== 4* copies ===========
              	
86C6:         	flatwordmarker_34_2a:
86C6: 0602    	    ld  b,en_flat_34_2a-st_flat_34_2a
86C8: CDE484  	    call COMCopyFollowingCode
86CB:         	st_flat_34_2a:
86CB: 29      	  add  hl,hl
86CC: 29      	  add  hl,hl
86CD:         	en_flat_34_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== 16* copies ===========
              	
86CD:         	flatwordmarker_31_36_2a:
86CD: 0604    	    ld  b,en_flat_31_36_2a-st_flat_31_36_2a
86CF: CDE484  	    call COMCopyFollowingCode
86D2:         	st_flat_31_36_2a:
86D2: 29      	  add  hl,hl
86D3: 29      	  add  hl,hl
86D4: 29      	  add  hl,hl
86D5: 29      	  add  hl,hl
86D6:         	en_flat_31_36_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== bswap copies ===========
              	
86D6:         	flatwordmarker_62_73_77_61_70:
86D6: 0603    	    ld  b,en_flat_62_73_77_61_70-st_flat_62_73_77_61_70
86D8: CDE484  	    call COMCopyFollowingCode
86DB:         	st_flat_62_73_77_61_70:
86DB: 7C      	  ld   a,h
86DC: 65      	  ld   h,l
86DD: 6F      	  ld   l,a
86DE:         	en_flat_62_73_77_61_70:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== break copies.only ===========
              	
86DE:         	flatwordmarker_62_72_65_61_6b:
86DE: 0682    	    ld  b,en_flat_62_72_65_61_6b-st_flat_62_72_65_61_6b+$80
86E0: CDE484  	    call COMCopyFollowingCode
86E3:         	st_flat_62_72_65_61_6b:
86E3: DD01    	  db   $DD,$01
86E5:         	en_flat_62_72_65_61_6b:
              	
              	; ***************************************************************************************
              	
              	; =========== ; copies.only ===========
              	
86E5:         	flatwordmarker_3b:
86E5: 0681    	    ld  b,en_flat_3b-st_flat_3b+$80
86E7: CDE484  	    call COMCopyFollowingCode
86EA:         	st_flat_3b:
86EA: C9      	  ret
86EB:         	en_flat_3b:
              	
              	; ***************************************************************************************
              	
              	; =========== halt word ===========
              	
86EB:         	flatwordmarker_68_61_6c_74:
86EB: CDF584  	    call COMCompileCallToFollowing
86EE:         	st_flat_68_61_6c_74:
86EE:         	HaltZ80:
86EE: F3      	  di
86EF: 76      	  halt
86F0: 18FC    	  jr   HaltZ80
86F2:         	en_flat_68_61_6c_74:
              	
              	; ***************************************************************************************
              	
              	; =========== copy word ===========
              	
86F2:         	flatwordmarker_63_6f_70_79:
86F2: CDF584  	    call COMCompileCallToFollowing
86F5:         	st_flat_63_6f_70_79:
86F5: ED4B578A	  ld   bc,(SIWord)
86F9: 78      	  ld   a,b         ; nothing to do.
86FA: B1      	  or   c
86FB: C8      	  ret  z
              	
86FC: C5      	  push  bc
86FD: D5      	  push  de
86FE: E5      	  push  hl
              	
86FF: AF      	  xor  a          ; find direction.
8700: ED52    	  sbc  hl,de
8702: 7C      	  ld   a,h
8703: 19      	  add  hl,de
8704: CB7F    	  bit  7,a         ; if +ve use LDDR
8706: 2807    	  jr   z,__copy2
              	
8708: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
8709: EDB0    	  ldir
870B:         	__copyExit:
870B: E1      	  pop  hl
870C: D1      	  pop  de
870D: C1      	  pop  bc
870E: C9      	  ret
              	
870F:         	__copy2:
870F: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
8710: EB      	  ex   de,hl
8711: 09      	  add  hl,bc
8712: 1B      	  dec  de          ; -1 to point to last byte
8713: 2B      	  dec  hl
8714: EDB8    	  lddr
8716: 18F3    	  jr   __copyExit
8718:         	en_flat_63_6f_70_79:
              	
              	; ***************************************************************************************
              	
              	; =========== fill word ===========
              	
8718:         	flatwordmarker_66_69_6c_6c:
8718: CDF584  	    call COMCompileCallToFollowing
871B:         	st_flat_66_69_6c_6c:
871B: ED4B578A	  ld   bc,(SIWord)
871F: 78      	  ld   a,b         ; nothing to do.
8720: B1      	  or   c
8721: C8      	  ret  z
8722: C5      	  push bc
8723: E5      	  push  hl
              	
8724: 73      	__fill1:ld   (hl),e
8725: 23      	  inc  hl
8726: 0B      	  dec  bc
8727: 78      	  ld   a,b
8728: B1      	  or   c
8729: 20F9    	  jr   nz,__fill1
              	
872B: E1      	  pop  hl
872C: C1      	  pop  bc
872D: C9      	  ret
872E:         	en_flat_66_69_6c_6c:
              	
              	; ***************************************************************************************
              	
              	; =========== c, word ===========
              	
872E:         	flatwordmarker_63_2c:
872E: CDF584  	    call COMCompileCallToFollowing
8731:         	st_flat_63_2c:
8731: 7D      	  ld   a,l
8732: C36080  	  jp   FARCompileByte
8735:         	en_flat_63_2c:
              	
              	; ***************************************************************************************
              	
              	; =========== , word ===========
              	
8735:         	flatwordmarker_2c:
8735: CDF584  	    call COMCompileCallToFollowing
8738:         	st_flat_2c:
8738: 7D      	  ld   a,l
8739: C37880  	  jp   FARCompileWord
873C:         	en_flat_2c:
              	
              	; ***************************************************************************************
              	
              	; =========== inkey word ===========
              	
873C:         	flatwordmarker_69_6e_6b_65_79:
873C: CDF584  	    call COMCompileCallToFollowing
873F:         	st_flat_69_6e_6b_65_79:
873F: EB      	  ex   de,hl
8740: CD9781  	  call  IOScanKeyboard
8743: 6F      	  ld   l,a
8744: 2600    	  ld   h,0
8746: C9      	  ret
8747:         	en_flat_69_6e_6b_65_79:
              	
              	
8747:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
8747: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
874B: 00000000	
874F: 0C1E1E0C	
8753: 0C000C00	
8757: 36360000	
875B: 00000000	
875F: 36367F36	
8763: 7F363600	
8767: 183E603C	
876B: 067C1800	
876F: 0063660C	
8773: 18336300	
8777: 1C361C3B	
877B: 6E663B00	
877F: 30306000	
8783: 00000000	
8787: 0C183030	
878B: 30180C00	
878F: 30180C0C	
8793: 0C183000	
8797: 00331E7F	
879B: 1E330000	
879F: 0018187E	
87A3: 18180000	
87A7: 00000000	
87AB: 00181830	
87AF: 0000007E	
87B3: 00000000	
87B7: 00000000	
87BB: 00181800	
87BF: 03060C18	
87C3: 30604000	
87C7: 3E63676F	
87CB: 7B733E00	
87CF: 18381818	
87D3: 18187E00	
87D7: 3C66061C	
87DB: 30667E00	
87DF: 3C66061C	
87E3: 06663C00	
87E7: 0E1E3666	
87EB: 7F060F00	
87EF: 7E607C06	
87F3: 06663C00	
87F7: 1C30607C	
87FB: 66663C00	
87FF: 7E66060C	
8803: 18181800	
8807: 3C66663C	
880B: 66663C00	
880F: 3C66663E	
8813: 060C3800	
8817: 00181800	
881B: 00181800	
881F: 00181800	
8823: 00181830	
8827: 0C183060	
882B: 30180C00	
882F: 00007E00	
8833: 007E0000	
8837: 30180C06	
883B: 0C183000	
883F: 3C66060C	
8843: 18001800	
8847: 3E636F6F	
884B: 6F603C00	
884F: 183C6666	
8853: 7E666600	
8857: 7E33333E	
885B: 33337E00	
885F: 1E336060	
8863: 60331E00	
8867: 7C363333	
886B: 33367C00	
886F: 7F31343C	
8873: 34317F00	
8877: 7F31343C	
887B: 34307800	
887F: 1E336060	
8883: 67331F00	
8887: 6666667E	
888B: 66666600	
888F: 3C181818	
8893: 18183C00	
8897: 0F060606	
889B: 66663C00	
889F: 7333363C	
88A3: 36337300	
88A7: 78303030	
88AB: 31337F00	
88AF: 63777F7F	
88B3: 6B636300	
88B7: 63737B6F	
88BB: 67636300	
88BF: 1C366363	
88C3: 63361C00	
88C7: 7E33333E	
88CB: 30307800	
88CF: 3C666666	
88D3: 6E3C0E00	
88D7: 7E33333E	
88DB: 36337300	
88DF: 3C667038	
88E3: 0E663C00	
88E7: 7E5A1818	
88EB: 18183C00	
88EF: 66666666	
88F3: 66667E00	
88F7: 66666666	
88FB: 663C1800	
88FF: 6363636B	
8903: 7F776300	
8907: 6363361C	
890B: 1C366300	
890F: 6666663C	
8913: 18183C00	
8917: 7F63460C	
891B: 19337F00	
891F: 3C303030	
8923: 30303C00	
8927: 6030180C	
892B: 06030100	
892F: 3C0C0C0C	
8933: 0C0C3C00	
8937: 081C3663	
893B: 00000000	
893F: 00000000	
8943: 0000007F	
8947: 18180C00	
894B: 00000000	
894F: 00003C06	
8953: 3E663B00	
8957: 7030303E	
895B: 33336E00	
895F: 00003C66	
8963: 60663C00	
8967: 0E06063E	
896B: 66663B00	
896F: 00003C66	
8973: 7E603C00	
8977: 1C363078	
897B: 30307800	
897F: 00003B66	
8983: 663E067C	
8987: 7030363B	
898B: 33337300	
898F: 18003818	
8993: 18183C00	
8997: 06000606	
899B: 0666663C	
899F: 70303336	
89A3: 3C367300	
89A7: 38181818	
89AB: 18183C00	
89AF: 0000667F	
89B3: 7F6B6300	
89B7: 00007C66	
89BB: 66666600	
89BF: 00003C66	
89C3: 66663C00	
89C7: 00006E33	
89CB: 333E3078	
89CF: 00003B66	
89D3: 663E060F	
89D7: 00006E3B	
89DB: 33307800	
89DF: 00003E60	
89E3: 3C067C00	
89E7: 08183E18	
89EB: 181A0C00	
89EF: 00006666	
89F3: 66663B00	
89F7: 00006666	
89FB: 663C1800	
89FF: 0000636B	
8A03: 7F7F3600	
8A07: 00006336	
8A0B: 1C366300	
8A0F: 00006666	
8A13: 663E067C	
8A17: 00007E4C	
8A1B: 18327E00	
8A1F: 0E181870	
8A23: 18180E00	
8A27: 0C0C0C00	
8A2B: 0C0C0C00	
8A2F: 7018180E	
8A33: 18187000	
8A37: 3B6E0000	
8A3B: 00000000	
8A3F: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8A47:         	SystemInformationTable:
              	
8A47:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8A47: 00A00000			dw 		FreeMemory,0
8A4B:         	SINextFreeCodePage: 								; +4 	Next Free Code Byte Page
8A4B: 26000000			dw 		FirstCodePage,0
8A4F:         	SIBootCodeAddress:									; +8	Run from here
8A4F: 4B850000			dw 		CompilerTest,0
8A53:         	SIBootCodePage: 									; +12   Run page.
8A53: 26000000			db		FirstCodePage,0,0,0
8A57:         	SIWord:												; +16 	Work word, used in fill/copy/etc
8A57: 00000000			dw 		0,0 			
8A5B:         	SIDisplayInformation:								; +20 	Display Information structure address
8A5B: 758A0000			dw 		DIScreenWidth,0
8A5F:         	SIStack:											; +24 	Initial Z80 stack value
8A5F: FC7E0000			dw 		StackTop,0							
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8A63:         	PAGEStackPointer: 									; stack used for switching pages
8A63: 0000    			dw 		0
8A65:         	PAGEStackBase:
8A65: FFFFFFFF			ds 		16
8A69: FF...   	
              	;
              	;			Display Information
              	;
8A75:         	DIScreenWidth:										; +0 	Screen Width
8A75: 00000000			dw 		0,0
8A79:         	DIScreenHeight:										; +4 	Screen Height
8A79: 00000000			dw 		0,0
8A7D:         	DIScreenSize: 										; +8    Screen Size in Characters
8A7D: 00000000			dw 		0,0
8A81:         	DIScreenDriver:										; +12 	Screen Driver
8A81: 00000000			dw 		0,0 								
8A85:         	DIFontBase:											; +16 	768 byte font, begins with space
8A85: 47870000			dw 		AlternateFont,0 							
8A89:         	DIScreenMode:										; +20 	Current Mode
8A89: 00000000			dw 		0,0
              	
8A8D: FFFFFFFF			org 	$A000
8A91: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont              = $8747 = 34631          kernel.asm:59
BUFFindBuffer              = $8497 = 33943          buffer.asm:18
BUFLoadBuffer              = $84B2 = 33970          buffer.asm:49
BUFSaveBuffer              = $84CB = 33995          buffer.asm:73 (unused)
Boot                       = $8006 = 32774          kernel.asm:26
COMCompileBuffer           = $8559 = 34137          compiler.asm:25
COMCompileCallToFollowing  = $84F5 = 34037          utility.asm:51
COMCompileWord_Green       = $858A = 34186          compiler.asm:60
COMCopyFollowingCode       = $84E4 = 34020          utility.asm:29
COMDefinition_Magenta      = $8585 = 34181          compiler.asm:52
COMDefinition_Red          = $8585 = 34181          compiler.asm:51
COMExecuteWord_Yellow      = $858F = 34191          compiler.asm:68
CONSTConvert               = $8503 = 34051          constant.asm:19 (unused)
CompilerTest               = $854B = 34123          compiler.asm:12
DICTAddWord                = $83E3 = 33763          dictionary.asm:19 (unused)
DICTFindWord               = $843D = 33853          dictionary.asm:90 (unused)
DIFontBase                 = $8A85 = 35461          data.asm:56
DIScreenDriver             = $8A81 = 35457          data.asm:54
DIScreenHeight             = $8A79 = 35449          data.asm:50
DIScreenMode               = $8A89 = 35465          data.asm:58
DIScreenSize               = $8A7D = 35453          data.asm:52
DIScreenWidth              = $8A75 = 35445          data.asm:48
DIVDivideMod16             = $80AB = 32939          divide.asm:18 (unused)
DictionaryPage             = $0020 =    32          kernel.asm:13
Div16_Loop1                = $80B5 = 32949          divide.asm:27
Div16_Loop2                = $80C6 = 32966          divide.asm:41
Div16_NoAdd1               = $80BD = 32957          divide.asm:33
Div16_NoAdd2               = $80CE = 32974          divide.asm:47
EditBuffer                 = $7B08 = 31496          kernel.asm:18
ErrorHandler               = $801E = 32798          kernel.asm:38
FARCompileByte             = $8060 = 32864          farmemory.asm:21
FARCompileByteL            = $805F = 32863          farmemory.asm:18 (unused)
FARCompileWord             = $8078 = 32888          farmemory.asm:43
FARRead                    = $8093 = 32915          farmemory.asm:68
FARWrite                   = $80A0 = 32928          farmemory.asm:82
FirstCodePage              = $0026 =    38          kernel.asm:16
FreeMemory                 = $A000 = 40960          data.asm:62
GFXClearScreen             = $80F0 = 33008          graphics.asm:18
GFXGetFontGraphicDE        = $8174 = 33140          graphics.asm:146
GFXInitialise48k           = $8264 = 33380          screen48k.asm:19
GFXInitialiseLayer2        = $82C7 = 33479          screen_layer2.asm:19
GFXInitialiseLowRes        = $835E = 33630          screen_lores.asm:18
GFXMode                    = $80FA = 33018          graphics.asm:32
GFXPrintCharacter48k       = $8290 = 33424          screen48k.asm:53
GFXPrintCharacterLayer2    = $82F7 = 33527          screen_layer2.asm:56
GFXPrintCharacterLowRes    = $8388 = 33672          screen_lores.asm:50
GFXWriteCharacter          = $812F = 33071          graphics.asm:78
GFXWriteHexWord            = $8142 = 33090          graphics.asm:101
GFXWriteHexWordA           = $8144 = 33092          graphics.asm:103 (unused)
HaltZ80                    = $86EE = 34542          __words.asm:613
IOScanKeyboard             = $8197 = 33175          keyboard.asm:18
L2PClear                   = $82D0 = 33488          screen_layer2.asm:26
L2PClearBank               = $82E0 = 33504          screen_layer2.asm:35
LowClearScreen             = $8371 = 33649          screen_lores.asm:30
MULTMultiply16             = $80D6 = 32982          multiply.asm:18
PAGEInitialise             = $8020 = 32800          paging.asm:18
PAGERestore                = $8049 = 32841          paging.asm:62
PAGEStackBase              = $8A65 = 35429          data.asm:43
PAGEStackPointer           = $8A63 = 35427          data.asm:41
PAGESwitch                 = $8030 = 32816          paging.asm:34
SIBootCodeAddress          = $8A4F = 35407          data.asm:24
SIBootCodePage             = $8A53 = 35411          data.asm:26
SIDisplayInformation       = $8A5B = 35419          data.asm:30 (unused)
SINextFreeCode             = $8A47 = 35399          data.asm:20
SINextFreeCodePage         = $8A4B = 35403          data.asm:22
SIStack                    = $8A5F = 35423          data.asm:32
SIWord                     = $8A57 = 35415          data.asm:28
SourceFirstPage            = $0022 =    34          kernel.asm:14
SourcePages                = $0040 =    64          kernel.asm:15
StackTop                   = $7EFC = 32508          kernel.asm:19
SystemInformationTable     = $8A47 = 35399          data.asm:18
__BUFDiv32                 = $849A = 33946          buffer.asm:21
__COMCBNext                = $857D = 34173          compiler.asm:44
__COMCBTag                 = $8564 = 34148          compiler.asm:30
__COMCFCLoop               = $84EC = 34028          utility.asm:37
__CONConFail               = $8542 = 34114          constant.asm:77
__CONConvLoop              = $850C = 34060          constant.asm:28
__CONMinusExit             = $852F = 34095          constant.asm:57
__CONNotNegative           = $853C = 34108          constant.asm:71
__Core__Mult_Loop          = $80DD = 32989          multiply.asm:24
__Core__Mult_Shift         = $80E2 = 32994          multiply.asm:28
__DICTAddCopy              = $8426 = 33830          dictionary.asm:65
__DICTAddGetLength         = $83EE = 33774          dictionary.asm:29
__DICTCheckName            = $845B = 33883          dictionary.asm:113
__DICTCreateEntry          = $840B = 33803          dictionary.asm:50
__DICTFindEndDictionary    = $83FE = 33790          dictionary.asm:41
__DICTFindExit             = $848E = 33934          dictionary.asm:146
__DICTFindFail             = $8487 = 33927          dictionary.asm:142
__DICTFindMainLoop         = $844B = 33867          dictionary.asm:101
__DICTFindNext             = $847E = 33918          dictionary.asm:136 (unused)
__DICTFindNoMatch          = $847B = 33915          dictionary.asm:133
__EqualFail                = $85C7 = 34247          __words.asm:97
__GFXConfigure             = $8114 = 33044          graphics.asm:53
__GFXLayer2                = $810C = 33036          graphics.asm:46
__GFXLowRes                = $8111 = 33041          graphics.asm:50
__GFXPromptCharacter       = $818F = 33167          graphics.asm:167
__GFXWCExit                = $813D = 33085          graphics.asm:88
__GFXWHByte                = $8156 = 33110          graphics.asm:119
__GFXWHDigit               = $816C = 33132          graphics.asm:133
__GFXWHNibble              = $8163 = 33123          graphics.asm:127
__L2Exit                   = $8357 = 33623          screen_layer2.asm:136
__L2Loop                   = $8348 = 33608          screen_layer2.asm:123
__L2Not1                   = $830D = 33549          screen_layer2.asm:76
__L2Not2                   = $8313 = 33555          screen_layer2.asm:80
__L2Not3                   = $8319 = 33561          screen_layer2.asm:84
__L2NotSet                 = $834E = 33614          screen_layer2.asm:128
__L2Outer                  = $8340 = 33600          screen_layer2.asm:118
__LPExit                   = $83DC = 33756          screen_lores.asm:120
__LessDifferentSigns       = $85DE = 34270          __words.asm:125
__LessFalse                = $85DA = 34266          __words.asm:121
__LessTrue                 = $85E2 = 34274          __words.asm:129
__LowLoop                  = $83C8 = 33736          screen_lores.asm:104
__LowNotLower2             = $83BE = 33726          screen_lores.asm:97
__LowNotSet                = $83CE = 33742          screen_lores.asm:109
__LowOuter                 = $83C0 = 33728          screen_lores.asm:99
__ZXWCCopy                 = $82BC = 33468          screen48k.asm:101
__ZXWCExit                 = $82C2 = 33474          screen48k.asm:107
___kr4                     = $81C8 = 33224          keyboard.asm:49
__copy2                    = $870F = 34575          __words.asm:650
__copyExit                 = $870B = 34571          __words.asm:644
__cs1                      = $8274 = 33396          screen48k.asm:29
__cs2                      = $827C = 33404          screen48k.asm:34
__fill1                    = $8724 = 34596          __words.asm:674
__kr1                      = $81AC = 33196          keyboard.asm:32
__kr2                      = $81B7 = 33207          keyboard.asm:38
__kr3                      = $81B9 = 33209          keyboard.asm:41
__kr_exit                  = $81E8 = 33256          keyboard.asm:79
__kr_keypressed            = $81E2 = 33250          keyboard.asm:73
__kr_no_shift_table        = $81EC = 33260          keyboard.asm:94
__kr_shift_table           = $823C = 33340          keyboard.asm:106
__kr_symbol_shift_table    = $8214 = 33300          keyboard.asm:100
_end                       = $C001 = 49153          kernel.asm:20 (unused)
_size                      = $4001 = 16385          kernel.asm:20 (unused)
en_flat_21                 = $861E = 34334          __words.asm:241
en_flat_2a                 = $859C = 34204          __words.asm:32 (unused)
en_flat_2b                 = $8596 = 34198          __words.asm:22
en_flat_2b_21              = $862A = 34346          __words.asm:260 (unused)
en_flat_2b_2b              = $86B1 = 34481          __words.asm:500
en_flat_2c                 = $873C = 34620          __words.asm:706 (unused)
en_flat_2d                 = $86A1 = 34465          __words.asm:473
en_flat_2d_2d              = $86B7 = 34487          __words.asm:511
en_flat_30_3c              = $8695 = 34453          __words.asm:456 (unused)
en_flat_30_3d              = $868A = 34442          __words.asm:442 (unused)
en_flat_31_36_2a           = $86D6 = 34518          __words.asm:560
en_flat_32_2a              = $86BD = 34493          __words.asm:522
en_flat_32_2f              = $86C6 = 34502          __words.asm:534
en_flat_34_2a              = $86CD = 34509          __words.asm:546
en_flat_3b                 = $86EB = 34539          __words.asm:604
en_flat_3c                 = $85E6 = 34278          __words.asm:133 (unused)
en_flat_3d                 = $85CB = 34251          __words.asm:101 (unused)
en_flat_40                 = $860F = 34319          __words.asm:216
en_flat_61_3e_62           = $8656 = 34390          __words.asm:338
en_flat_61_62_3e_72        = $8664 = 34404          __words.asm:371
en_flat_61_6e_64           = $85A6 = 34214          __words.asm:48 (unused)
en_flat_62_3e_61           = $865D = 34397          __words.asm:350
en_flat_62_72_65_61_6b     = $86E5 = 34533          __words.asm:593
en_flat_62_73_77_61_70     = $86DE = 34526          __words.asm:573
en_flat_63_21              = $8615 = 34325          __words.asm:227
en_flat_63_2c              = $8735 = 34613          __words.asm:695 (unused)
en_flat_63_40              = $8606 = 34310          __words.asm:202
en_flat_63_6f_70_79        = $8718 = 34584          __words.asm:658 (unused)
en_flat_66_61_72_21        = $8649 = 34377          __words.asm:307 (unused)
en_flat_66_61_72_40        = $8643 = 34371          __words.asm:297 (unused)
en_flat_66_69_6c_6c        = $872E = 34606          __words.asm:684 (unused)
en_flat_68_61_6c_74        = $86F2 = 34546          __words.asm:617 (unused)
en_flat_68_65_78_21        = $85FE = 34302          __words.asm:182 (unused)
en_flat_69_6e_6b_65_79     = $8747 = 34631          __words.asm:720 (unused)
en_flat_6e_6f_74           = $86AB = 34475          __words.asm:489 (unused)
en_flat_6f_72              = $85BA = 34234          __words.asm:80 (unused)
en_flat_70_21              = $8633 = 34355          __words.asm:273
en_flat_70_40              = $863D = 34365          __words.asm:287 (unused)
en_flat_70_6f_70           = $867F = 34431          __words.asm:418
en_flat_70_75_73_68        = $8678 = 34424          __words.asm:406
en_flat_72_3e_61_62        = $866B = 34411          __words.asm:383
en_flat_72_3e_62_62        = $8672 = 34418          __words.asm:395
en_flat_73_63_72_65_65_6e_21 = $85EC = 34284          __words.asm:152 (unused)
en_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72 = $85F8 = 34296          __words.asm:172 (unused)
en_flat_73_63_72_65_65_6e_2e_6d_6f_64_65 = $85F2 = 34290          __words.asm:162 (unused)
en_flat_73_77_61_70        = $864F = 34383          __words.asm:326
en_flat_78_6f_72           = $85B0 = 34224          __words.asm:64 (unused)
flatwordmarker_21          = $8615 = 34325          __words.asm:233 (unused)
flatwordmarker_2a          = $8596 = 34198          __words.asm:28 (unused)
flatwordmarker_2b          = $8590 = 34192          __words.asm:17 (unused)
flatwordmarker_2b_21       = $861E = 34334          __words.asm:247 (unused)
flatwordmarker_2b_2b       = $86AB = 34475          __words.asm:495 (unused)
flatwordmarker_2c          = $8735 = 34613          __words.asm:701 (unused)
flatwordmarker_2d          = $8695 = 34453          __words.asm:462 (unused)
flatwordmarker_2d_2d       = $86B1 = 34481          __words.asm:506 (unused)
flatwordmarker_30_3c       = $868A = 34442          __words.asm:448 (unused)
flatwordmarker_30_3d       = $867F = 34431          __words.asm:433 (unused)
flatwordmarker_31_36_2a    = $86CD = 34509          __words.asm:552 (unused)
flatwordmarker_32_2a       = $86B7 = 34487          __words.asm:517 (unused)
flatwordmarker_32_2f       = $86BD = 34493          __words.asm:528 (unused)
flatwordmarker_34_2a       = $86C6 = 34502          __words.asm:540 (unused)
flatwordmarker_3b          = $86E5 = 34533          __words.asm:599 (unused)
flatwordmarker_3c          = $85CB = 34251          __words.asm:107 (unused)
flatwordmarker_3d          = $85BA = 34234          __words.asm:87 (unused)
flatwordmarker_40          = $8606 = 34310          __words.asm:208 (unused)
flatwordmarker_61_3e_62    = $864F = 34383          __words.asm:332 (unused)
flatwordmarker_61_62_3e_72 = $865D = 34397          __words.asm:365 (unused)
flatwordmarker_61_6e_64    = $859C = 34204          __words.asm:38 (unused)
flatwordmarker_62_3e_61    = $8656 = 34390          __words.asm:344 (unused)
flatwordmarker_62_72_65_61_6b = $86DE = 34526          __words.asm:588 (unused)
flatwordmarker_62_73_77_61_70 = $86D6 = 34518          __words.asm:566 (unused)
flatwordmarker_63_21       = $860F = 34319          __words.asm:222 (unused)
flatwordmarker_63_2c       = $872E = 34606          __words.asm:690 (unused)
flatwordmarker_63_40       = $85FE = 34302          __words.asm:196 (unused)
flatwordmarker_63_6f_70_79 = $86F2 = 34546          __words.asm:623 (unused)
flatwordmarker_66_61_72_21 = $8643 = 34371          __words.asm:303 (unused)
flatwordmarker_66_61_72_40 = $863D = 34365          __words.asm:293 (unused)
flatwordmarker_66_69_6c_6c = $8718 = 34584          __words.asm:664 (unused)
flatwordmarker_68_61_6c_74 = $86EB = 34539          __words.asm:610 (unused)
flatwordmarker_68_65_78_21 = $85F8 = 34296          __words.asm:178 (unused)
flatwordmarker_69_6e_6b_65_79 = $873C = 34620          __words.asm:712 (unused)
flatwordmarker_6e_6f_74    = $86A1 = 34465          __words.asm:479 (unused)
flatwordmarker_6f_72       = $85B0 = 34224          __words.asm:70 (unused)
flatwordmarker_70_21       = $862A = 34346          __words.asm:266 (unused)
flatwordmarker_70_40       = $8633 = 34355          __words.asm:279 (unused)
flatwordmarker_70_6f_70    = $8678 = 34424          __words.asm:412 (unused)
flatwordmarker_70_75_73_68 = $8672 = 34418          __words.asm:401 (unused)
flatwordmarker_72_3e_61_62 = $8664 = 34404          __words.asm:377 (unused)
flatwordmarker_72_3e_62_62 = $866B = 34411          __words.asm:389 (unused)
flatwordmarker_73_63_72_65_65_6e_21 = $85E6 = 34278          __words.asm:148 (unused)
flatwordmarker_73_63_72_65_65_6e_2e_63_6c_65_61_72 = $85F2 = 34290          __words.asm:168 (unused)
flatwordmarker_73_63_72_65_65_6e_2e_6d_6f_64_65 = $85EC = 34284          __words.asm:158 (unused)
flatwordmarker_73_77_61_70 = $8649 = 34377          __words.asm:321 (unused)
flatwordmarker_78_6f_72    = $85A6 = 34214          __words.asm:54 (unused)
st_flat_21                 = $861A = 34330          __words.asm:236
st_flat_2a                 = $8599 = 34201          __words.asm:30 (unused)
st_flat_2b                 = $8595 = 34197          __words.asm:20
st_flat_2b_21              = $8621 = 34337          __words.asm:249 (unused)
st_flat_2b_2b              = $86B0 = 34480          __words.asm:498
st_flat_2c                 = $8738 = 34616          __words.asm:703 (unused)
st_flat_2d                 = $869A = 34458          __words.asm:465
st_flat_2d_2d              = $86B6 = 34486          __words.asm:509
st_flat_30_3c              = $868D = 34445          __words.asm:450 (unused)
st_flat_30_3d              = $8682 = 34434          __words.asm:435 (unused)
st_flat_31_36_2a           = $86D2 = 34514          __words.asm:555
st_flat_32_2a              = $86BC = 34492          __words.asm:520
st_flat_32_2f              = $86C2 = 34498          __words.asm:531
st_flat_34_2a              = $86CB = 34507          __words.asm:543
st_flat_3b                 = $86EA = 34538          __words.asm:602
st_flat_3c                 = $85CE = 34254          __words.asm:109 (unused)
st_flat_3d                 = $85BD = 34237          __words.asm:89 (unused)
st_flat_40                 = $860B = 34315          __words.asm:211
st_flat_61_3e_62           = $8654 = 34388          __words.asm:335
st_flat_61_62_3e_72        = $8662 = 34402          __words.asm:368
st_flat_61_6e_64           = $859F = 34207          __words.asm:40 (unused)
st_flat_62_3e_61           = $865B = 34395          __words.asm:347
st_flat_62_72_65_61_6b     = $86E3 = 34531          __words.asm:591
st_flat_62_73_77_61_70     = $86DB = 34523          __words.asm:569
st_flat_63_21              = $8614 = 34324          __words.asm:225
st_flat_63_2c              = $8731 = 34609          __words.asm:692 (unused)
st_flat_63_40              = $8603 = 34307          __words.asm:199
st_flat_63_6f_70_79        = $86F5 = 34549          __words.asm:625 (unused)
st_flat_66_61_72_21        = $8646 = 34374          __words.asm:305 (unused)
st_flat_66_61_72_40        = $8640 = 34368          __words.asm:295 (unused)
st_flat_66_69_6c_6c        = $871B = 34587          __words.asm:666 (unused)
st_flat_68_61_6c_74        = $86EE = 34542          __words.asm:612 (unused)
st_flat_68_65_78_21        = $85FB = 34299          __words.asm:180 (unused)
st_flat_69_6e_6b_65_79     = $873F = 34623          __words.asm:714 (unused)
st_flat_6e_6f_74           = $86A4 = 34468          __words.asm:481 (unused)
st_flat_6f_72              = $85B3 = 34227          __words.asm:72 (unused)
st_flat_70_21              = $862F = 34351          __words.asm:269
st_flat_70_40              = $8636 = 34358          __words.asm:281 (unused)
st_flat_70_6f_70           = $867D = 34429          __words.asm:415
st_flat_70_75_73_68        = $8677 = 34423          __words.asm:404
st_flat_72_3e_61_62        = $8669 = 34409          __words.asm:380
st_flat_72_3e_62_62        = $8670 = 34416          __words.asm:392
st_flat_73_63_72_65_65_6e_21 = $85E9 = 34281          __words.asm:150 (unused)
st_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72 = $85F5 = 34293          __words.asm:170 (unused)
st_flat_73_63_72_65_65_6e_2e_6d_6f_64_65 = $85EF = 34287          __words.asm:160 (unused)
st_flat_73_77_61_70        = $864E = 34382          __words.asm:324
st_flat_78_6f_72           = $85A9 = 34217          __words.asm:56 (unused)
w1                         = $8557 = 34135          compiler.asm:17


total time: 0.0091 sec.
no errors
