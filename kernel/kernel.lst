              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-23 22:05:39
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		16th November 2018
              	;		Purpose :	FlatColorForth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7EF0:         	StackTop   = 	$7EF0 								; Top of stack
7B08:         	EditBuffer = $7B08 									; 512 byte edit buffer (2 bytes either side)
7D10:         	ErrorMessageBuffer = $7D10
7D40:         	ExecuteCodeBuffer = $7D40 			
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	BootstrapPage = $22 								; bootstrap page
0024:         	FirstCodePage = $24 								; first page of actual code.
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1813    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: B78A    			dw 		SystemInformationTable
8006: FFFFFFFF			org 	$8010								; $8010 loads word into BC
800A: FF...   	
8010: ED4BCB8A			ld 		bc,(SIWord)
8014: C9      			ret
              	
8015: ED7BD38A	Boot:	ld 		sp,(SIStack)						; reset Z80 Stack
8019: F3      			di											; disable interrupts
              		
801A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
801E: 2E00    			ld 		l,0 								; set graphics mode 0 (48k Spectrum)
8020: CD0981  			call 	GFXMode
              	
8023: 3AC38A  			ld 		a,(SIBootCodePage) 					; get the page to start
8026: CD2F80  			call 	PAGEInitialise
8029: 2ABF8A  			ld 		hl,(SIBootCodeAddress) 				; get boot address
802C: E9      			jp 		(hl) 								; and go there
              	
802D:         	ErrorHandler:
802D: 18FE    			jr 		ErrorHandler
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
802F:         	PAGEInitialise:
802F: ED9256  			db 		$ED,$92,$56							; switch to page A
8032: 3C      			inc 	a
8033: ED9257  			db 		$ED,$92,$57
8036: 3D      			dec 	a
8037: 08      			ex 		af,af' 								; put page in A'
8038: 21D98A  			ld 		hl,PAGEStackBase 					; reset the page stack
803B: 22D78A  			ld 		(PAGEStackPointer),hl
803E: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
803F:         	PAGESwitch:
803F: F5      			push 	af
8040: E5      			push 	hl
              	
8041: F5      			push 	af 									; save A on stack
8042: 2AD78A  			ld 		hl,(PAGEStackPointer) 				; put A' on the stack, the current page
8045: 08      			ex 		af,af'
8046: 77      			ld 		(hl),a
8047: 23      			inc 	hl
8048: 22D78A  			ld 		(PAGEStackPointer),hl
              	
804B: F1      			pop 	af 									; restore new A
804C: ED9256  			db 		$ED,$92,$56							; switch to page A
804F: 3C      			inc 	a
8050: ED9257  			db 		$ED,$92,$57
8053: 3D      			dec 	a
8054: 08      			ex 		af,af' 								; put page in A'
              	
8055: E1      			pop 	hl
8056: F1      			pop 	af
8057: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
8058:         	PAGERestore:
8058: F5      			push 	af
8059: E5      			push 	hl
805A: 2AD78A  			ld 		hl,(PAGEStackPointer) 				; pop the old page off
805D: 2B      			dec 	hl
805E: 7E      			ld 		a,(hl)
805F: 22D78A  			ld 		(PAGEStackPointer),hl
8062: ED9256  			db 		$ED,$92,$56							; switch to page A
8065: 3C      			inc 	a
8066: ED9257  			db 		$ED,$92,$57
8069: 3D      			dec 	a
806A: 08      			ex 		af,af' 								; update A'
806B: E1      			pop 	hl
806C: F1      			pop 	af
806D: C9      			ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		15th November 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
806E:         	FARCompileByteL:
806E: 7D      			ld 		a,l
              			
806F:         	FARCompileByte:
806F: F5      			push 	af 									; save byte and HL
8070: E5      			push 	hl
8071: F5      			push 	af 									; save byte
8072: 3ABB8A  			ld		a,(SINextFreeCodePage) 				; switch to page
8075: CD3F80  			call 	PAGESwitch
8078: 2AB78A  			ld 		hl,(SINextFreeCode) 				; write to memory location
807B: F1      			pop 	af
807C: 77      			ld 		(hl),a
807D: 23      			inc 	hl 									; bump memory location
807E: 22B78A  			ld 		(SINextFreeCode),hl 				; write back
8081: CD5880  			call 	PAGERestore
8084: E1      			pop 	hl 									; restore and exit
8085: F1      			pop 	af
8086: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory A/HL
              	;
              	; ***********************************************************************************************
              	
8087:         	FARCompileWord:
8087: F5      			push 	af 									; save byte and HL
8088: D5      			push 	de
8089: E5      			push 	hl
808A: EB      			ex 		de,hl 								; word into DE
808B: 3ABB8A  			ld		a,(SINextFreeCodePage) 				; switch to page
808E: CD3F80  			call 	PAGESwitch
8091: 2AB78A  			ld 		hl,(SINextFreeCode) 				; write to memory location
8094: 73      			ld 		(hl),e
8095: 23      			inc 	hl 	
8096: 72      			ld 		(hl),d
8097: 23      			inc 	hl
8098: 22B78A  			ld 		(SINextFreeCode),hl 				; write back
809B: CD5880  			call 	PAGERestore
809E: E1      			pop 	hl
809F: D1      			pop 	de 									; restore and exit
80A0: F1      			pop 	af
80A1: C9      			ret
              												
              	; ***********************************************************************************************
              	;
              	;									Far Read Byte at (SIWord):A
              	;
              	; ***********************************************************************************************
              	
80A2:         	FARRead:
80A2: 3ACB8A  			ld 		a,(SIWord)
80A5: CD3F80  			call 	PAGESwitch
80A8: 6E      			ld 		l,(hl)
80A9: 2600    			ld 		h,0
80AB: CD5880  			call 	PAGERestore
80AE: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;									Far Write Byte B.0 at (SIWord):A
              	;
              	; ***********************************************************************************************
              	
80AF:         	FARWrite:
80AF: 3ACB8A  			ld 		a,(SIWord)
80B2: CD3F80  			call 	PAGESwitch
80B5: 73      			ld 		(hl),e
80B6: CD5880  			call 	PAGERestore
80B9: C9      			ret
              			include "support/divide.asm" 				; division
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
80BA:         	DIVDivideMod16:
              	
80BA: C5      		push 	bc
80BB: 42      		ld 		b,d 				; DE 
80BC: 4B      		ld 		c,e
80BD: EB      		ex 		de,hl
80BE: 210000  		ld 		hl,0
80C1: 78      		ld 		a,b
80C2: 0608    		ld 		b,8
80C4:         	Div16_Loop1:
80C4: 17      		rla
80C5: ED6A    		adc 	hl,hl
80C7: ED52    		sbc 	hl,de
80C9: 3001    		jr 		nc,Div16_NoAdd1
80CB: 19      		add 	hl,de
80CC:         	Div16_NoAdd1:
80CC: 10F6    		djnz 	Div16_Loop1
80CE: 17      		rla
80CF: 2F      		cpl
80D0: 47      		ld 		b,a
80D1: 79      		ld 		a,c
80D2: 48      		ld 		c,b
80D3: 0608    		ld 		b,8
80D5:         	Div16_Loop2:
80D5: 17      		rla
80D6: ED6A    		adc 	hl,hl
80D8: ED52    		sbc 	hl,de
80DA: 3001    		jr 		nc,Div16_NoAdd2
80DC: 19      		add 	hl,de
80DD:         	Div16_NoAdd2:
80DD: 10F6    		djnz 	Div16_Loop2
80DF: 17      		rla
80E0: 2F      		cpl
80E1: 51      		ld 		d,c
80E2: 5F      		ld 		e,a
80E3: C1      		pop 	bc
80E4: C9      		ret
              			
              			
              			include "support/multiply.asm" 				; multiplication
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
80E5:         	MULTMultiply16:
80E5: C5      			push 	bc
80E6: D5      			push 	de
80E7: 44      			ld 		b,h 							; get multipliers in DE/BC
80E8: 4D      			ld 		c,l
80E9: 210000  			ld 		hl,0 							; zero total
80EC:         	__Core__Mult_Loop:
80EC: CB41    			bit 	0,c 							; lsb of shifter is non-zero
80EE: 2801    			jr 		z,__Core__Mult_Shift
80F0: 19      			add 	hl,de 							; add adder to total
80F1:         	__Core__Mult_Shift:
80F1: CB38    			srl 	b 								; shift BC right.
80F3: CB19    			rr 		c
80F5: EB      			ex 		de,hl 							; shift DE left
80F6: 29      			add 	hl,hl
80F7: EB      			ex 		de,hl
80F8: 78      			ld 		a,b 							; loop back if BC is nonzero
80F9: B1      			or 		c
80FA: 20F0    			jr 		nz,__Core__Mult_Loop
80FC: D1      			pop 	de
80FD: C1      			pop 	bc
80FE: C9      			ret
              			include "support/graphics.asm" 				; common graphics
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;									Clear screen
              	;
              	; *********************************************************************************
              	
80FF:         	GFXClearScreen:
80FF: E5      			push 	hl 									; clear screen by reinitialising
8100: 3A238B  			ld 		a,(DIScreenMode)
8103: 6F      			ld 		l,a
8104: CD0981  			call 	GFXMode
8107: E1      			pop 	hl
8108: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
8109:         	GFXMode:
8109: C5      			push 	bc
810A: D5      			push 	de
810B: E5      			push 	hl
810C: 7D      			ld 		a,l 								; save current mode
810D: 32238B  			ld 		(DIScreenMode),a
8110: 2D      			dec 	l 									; L = 1 mode layer2
8111: 2808    			jr 		z,__GFXLayer2
8113: 2D      			dec 	l
8114: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
8116: CD7382  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
8119: 1808    			jr 		__GFXConfigure
              	
811B:         	__GFXLayer2:
811B: CDD682  			call 	GFXInitialiseLayer2
811E: 1803    			jr 		__GFXConfigure
              	
8120:         	__GFXLowRes:
8120: CD6D83  			call 	GFXInitialiseLowRes
              	
8123:         	__GFXConfigure:
8123: 7D      			ld 		a,l 								; save screen size
8124: 320F8B  			ld 		(DIScreenWidth),a
8127: 7C      			ld 		a,h
8128: 32138B  			ld 		(DIScreenHeight),a
812B: EB      			ex 		de,hl 								; save driver
812C: 221B8B  			ld 		(DIScreenDriver),hl
              	
812F: 6A      			ld 		l,d 								; put sizes in HL DE
8130: 2600    			ld 		h,0
8132: 1600    			ld 		d,0
8134: CDE580  			call 	MULTMultiply16 						; multiply to get size and store.
8137: 22178B  			ld 		(DIScreenSize),hl
              	
813A: E1      			pop 	hl
813B: D1      			pop 	de
813C: C1      			pop 	bc
813D: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
813E:         	GFXWriteCharacter:
813E: F5      			push 	af
813F: C5      			push 	bc
8140: D5      			push 	de
8141: E5      			push 	hl
8142: 014C81  			ld 		bc,__GFXWCExit
8145: C5      			push 	bc
8146: ED4B1B8B			ld 		bc,(DIScreenDriver)
814A: C5      			push 	bc
814B: C9      			ret
814C:         	__GFXWCExit:
814C: E1      			pop 	hl
814D: D1      			pop 	de
814E: C1      			pop 	bc
814F: F1      			pop 	af
8150: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8151:         	GFXWriteHexWord:
8151: 3E06    			ld 		a,6 
8153:         	GFXWriteHexWordA:
8153: C5      			push 	bc
8154: D5      			push 	de
8155: E5      			push 	hl
8156: 4F      			ld 		c,a
8157: 7A      			ld 		a,d
8158: D5      			push 	de
8159: CD6581  			call 	__GFXWHByte
815C: D1      			pop 	de
815D: 7B      			ld 		a,e
815E: CD6581  			call	__GFXWHByte
8161: E1      			pop 	hl
8162: D1      			pop 	de
8163: C1      			pop 	bc
8164: C9      			ret
              	
8165:         	__GFXWHByte:
8165: F5      			push 	af
8166: CB0F    			rrc 	a
8168: CB0F    			rrc		a
816A: CB0F    			rrc 	a
816C: CB0F    			rrc 	a
816E: CD7281  			call 	__GFXWHNibble
8171: F1      			pop 	af
8172:         	__GFXWHNibble:
8172: 51      			ld 		d,c
8173: E60F    			and 	15
8175: FE0A    			cp 		10
8177: 3802    			jr 		c,__GFXWHDigit
8179: C607    			add		a,7
817B:         	__GFXWHDigit:
817B: C630    			add 	a,48
817D: 5F      			ld 		e,a
817E: CD3E81  			call 	GFXWriteCharacter
8181: 23      			inc 	hl
8182: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				For character A, put address of character in DE
              	;
              	; *********************************************************************************
              	
8183:         	GFXGetFontGraphicDE:
8183: F5      			push 	af
8184: E5      			push 	hl
8185: E67F    			and 	$7F 								; bits 0-6 only.
8187: D620    			sub 	32
8189: 6F      			ld 		l,a 								; put in HL
818A: 2600    			ld 		h,0
818C: 29      			add 	hl,hl 								; x 8
818D: 29      			add 	hl,hl
818E: 29      			add 	hl,hl
818F: ED5B1F8B			ld 		de,(DIFontBase) 					; add the font base.
8193: 19      			add 	hl,de
8194: EB      			ex 		de,hl 								; put in DE (font address)
              	
8195: E1      			pop 	hl
8196: F1      			pop 	af
8197: FE7F    			cp 		$7F 								; map $7F to the prompt character
8199: C0      			ret 	nz
819A: 119E81  			ld 		de,__GFXPromptCharacter
819D: C9      			ret
              	
819E:         	__GFXPromptCharacter:
819E: FC7E3F1F			db 		$FC,$7E,$3F,$1F
81A2: 1F3F7EFC			db 		$1F,$3F,$7E,$FC
              	
              			include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		15th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
81A6:         	IOScanKeyboard:
81A6: C5      			push 	bc
81A7: D5      			push 	de
81A8: E5      			push 	hl
              	
81A9: 21FB81  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
81AC: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
81AE: 06FE    			ld 		b,$FE
81B0: ED78    			in 		a,(c)
81B2: CB47    			bit 	0,a
81B4: 2005    			jr 		nz,__kr1
81B6: 214B82  			ld 		hl,__kr_shift_table
81B9: 180B    			jr 		__kr2
81BB:         	__kr1:
81BB: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
81BD: ED78    			in 		a,(c)
81BF: CB4F    			bit 	1,a
81C1: 2003    			jr 		nz,__kr2
81C3: 212382  			ld 		hl,__kr_symbol_shift_table
81C6:         	__kr2:
              	
81C6: 1EFE    			ld 		e,$FE 								; scan pattern.
81C8: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
81C9: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
81CB: FEFE    			cp 		$FE
81CD: 2808    			jr 		z,___kr4
81CF: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
81D1: FE7F    			cp 		$7F
81D3: 2802    			jr 		z,___kr4
81D5: 161F    			ld 		d,$01F 								; check all bits.
81D7:         	___kr4:
81D7: 43      			ld 		b,e 								; scan the keyboard
81D8: 0EFE    			ld 		c,$FE
81DA: ED78    			in 		a,(c)
81DC: 2F      			cpl 										; make that active high.
81DD: A2      			and 	d  									; and with check value.
81DE: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
81E0: 23      			inc 	hl 									; next set of keyboard characters
81E1: 23      			inc 	hl
81E2: 23      			inc 	hl
81E3: 23      			inc 	hl
81E4: 23      			inc 	hl
              	
81E5: 7B      			ld 		a,e 								; get pattern
81E6: 87      			add 	a,a 								; shift left
81E7: F601    			or 		1 									; set bit 1.
81E9: 5F      			ld 		e,a
              	
81EA: FEFF    			cp 		$FF 								; finished when all 1's.
81EC: 20DA    			jr 		nz,__kr3 
81EE: AF      			xor 	a
81EF: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81F1:         	__kr_keypressed:
81F1: 23      			inc 	hl  								; shift right until carry set
81F2: 1F      			rra
81F3: 30FC    			jr 		nc,__kr_keypressed
81F5: 2B      			dec 	hl 									; undo the last inc hl
81F6: 7E      			ld 		a,(hl) 								; get the character number.
81F7:         	__kr_exit:
81F7: E1      			pop 	hl
81F8: D1      			pop 	de
81F9: C1      			pop 	bc
81FA: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
81FB:         	__kr_no_shift_table:
81FB: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81FF: 76617364	
8203: 6667    	
8205: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
8209: 74313233	
820D: 3435    	
820F: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
8213: 36706F69	
8217: 7579    	
8219: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
821D: 6820006D	
8221: 6E62    	
              	
8223:         	__kr_symbol_shift_table:
8223: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8227: 2F7E7C5C	
822B: 7B7D    	
822D: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
8231: 3E214023	
8235: 2425    	
8237: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
823B: 26223B00	
823F: 5D5B    	
8241: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8245: 5E20002E	
8249: 2C2A    	
              	
824B:         	__kr_shift_table:
824B: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
824F: 2F7E7C5C	
8253: 7B7D    	
8255: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
8259: 3E214023	
825D: 2414    	
825F: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8263: 15223B00	
8267: 5D5B    	
8269: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
826D: 5E20002E	
8271: 2C2A    	
              			include "support/screen48k.asm"				; screen "drivers"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8273:         	GFXInitialise48k:
8273: F5      			push 	af 									; save registers
8274: C5      			push 	bc
              	
8275: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8278: 3E00    			ld 		a,0 								; disable Layer 2
827A: ED79    			out 	(c),a
827C: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8280: 210040  			ld 		hl,$4000 							; clear pixel memory
8283: 3600    	__cs1:	ld 		(hl),0
8285: 23      			inc 	hl
8286: 7C      			ld 		a,h
8287: FE58    			cp 		$58
8289: 20F8    			jr 		nz,__cs1
828B: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
828D: 23      			inc 	hl
828E: 7C      			ld 		a,h
828F: FE5B    			cp 		$5B
8291: 20F8    			jr 		nz,__cs2	
8293: AF      			xor 	a 									; border off
8294: D3FE    			out 	($FE),a
8296: C1      			pop 	bc
8297: F1      			pop 	af
8298: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
829B: 119F82  			ld 		de,GFXPrintCharacter48k
829E: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
829F:         	GFXPrintCharacter48k:
829F: F5      			push 	af 									; save registers
82A0: C5      			push 	bc
82A1: D5      			push 	de
82A2: E5      			push 	hl
              	
82A3: 43      			ld 		b,e 								; character in B
82A4: 7C      			ld 		a,h 								; check range.
82A5: FE03    			cp 		3
82A7: 3028    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
82A9: E5      			push 	hl 									; save position.
82AA: 7C      			ld 		a,h
82AB: C658    			add 	$58
82AD: 67      			ld 		h,a
              	
82AE: 7A      			ld 		a,d 								; get current colour
82AF: E607    			and 	7  									; mask 0..2
82B1: F640    			or 		$40  								; make bright
82B3: 77      			ld 		(hl),a 								; store it.	
82B4: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
82B5: D5      			push 	de
82B6: EB      			ex 		de,hl
82B7: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
82B8: 7A      			ld 		a,d
82B9: E603    			and 	3
82BB: 87      			add 	a,a
82BC: 87      			add 	a,a
82BD: 87      			add 	a,a
82BE: F640    			or 		$40
82C0: 67      			ld 		h,a
82C1: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
82C2: 78      			ld 		a,b 								; get character
82C3: CD8381  			call 	GFXGetFontGraphicDE
              	;
              	;		copy font data to screen position.
              	;
82C6: 78      			ld 		a,b
82C7: 0608    			ld 		b,8 								; copy 8 characters
82C9: 0E00    			ld 		c,0 								; XOR value 0
82CB:         	__ZXWCCopy:
82CB: 1A      			ld 		a,(de)								; get font data
82CC: 77      			ld 		(hl),a 								; write back
82CD: 24      			inc 	h 									; bump pointers
82CE: 13      			inc 	de
82CF: 10FA    			djnz 	__ZXWCCopy 							; do B times.
82D1:         	__ZXWCExit:
82D1: E1      			pop 	hl 									; restore and exit
82D2: D1      			pop 	de
82D3: C1      			pop 	bc
82D4: F1      			pop 	af
82D5: C9      			ret
              	
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82D6:         	GFXInitialiseLayer2:
82D6: F5      			push 	af
82D7: C5      			push 	bc
82D8: D5      			push 	de
82D9: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82DD: 1E02    			ld 		e,2 								; 3 banks to erase
82DF:         	L2PClear:
82DF: 7B      			ld 		a,e 								; put bank number in bits 6/7
82E0: CB0F    			rrc 	a
82E2: CB0F    			rrc 	a
82E4: F603    			or 		2+1 								; shadow on, visible, enable write paging
82E6: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82E9: ED79    			out 	(c),a
82EB: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82EE: 55      			ld 		d,l 								; D = 0, slightly quicker.
82EF:         	L2PClearBank: 										; assume default palette :)
82EF: 2B      			dec 	hl
82F0: 72      			ld 		(hl),d
82F1: 7C      			ld 		a,h
82F2: B5      			or 		l
82F3: 20FA    			jr		nz,L2PClearBank
82F5: 1D      			dec 	e
82F6: F2DF82  			jp 		p,L2PClear
              	
82F9: AF      			xor 	a
82FA: D3FE    			out 	($FE),a
              	
82FC: D1      			pop 	de
82FD: C1      			pop 	bc
82FE: F1      			pop 	af
82FF: 212018  			ld 		hl,$1820 							; still 32 x 24 	
8302: 110683  			ld 		de,GFXPrintCharacterLayer2
8305: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
8306:         	GFXPrintCharacterLayer2:
8306: F5      			push 	af
8307: C5      			push 	bc
8308: D5      			push 	de
8309: E5      			push 	hl
830A: DDE5    			push 	ix
              	
830C: 43      			ld 		b,e 								; save A temporarily
830D: 78      			ld 		a,b
              	
830E: 7C      			ld 		a,h
830F: FE03    			cp 		3
8311: 3053    			jr 		nc,__L2Exit 						; check position in range
8313: 78      			ld 		a,b
              	
8314: F5      			push 	af 	
8315: AF      			xor 	a 									; convert colour in C to palette index
8316: CB42    			bit 	0,d 								; (assumes standard palette)
8318: 2802    			jr 		z,__L2Not1
831A: F603    			or 		$03
831C:         	__L2Not1:
831C: CB52    			bit 	2,d
831E: 2802    			jr 		z,__L2Not2
8320: F61C    			or 		$1C
8322:         	__L2Not2:
8322: CB4A    			bit 	1,d
8324: 2802    			jr 		z,__L2Not3
8326: F6C0    			or 		$C0
8328:         	__L2Not3:
8328: 4F      			ld 		c,a 								; C is foreground
8329: F1      			pop 	af 									; restore char
              	
832A: CD8381  			call 	GFXGetFontGraphicDE 				; font offset in DE
832D: D5      			push 	de 									; transfer to IX
832E: DDE1    			pop 	ix
              	
              			;
              			;		figure out the correct bank.
              			;
8330: C5      			push 	bc
8331: 7C      			ld  	a,h 								; this is the page number.
8332: CB0F    			rrc 	a
8334: CB0F    			rrc 	a
8336: E6C0    			and 	$C0 								; in bits 6 & 7
8338: F603    			or 		$03 								; shadow on, visible, enable write pagin.
833A: 013B12  			ld 		bc,$123B 							; out to layer 2 port
833D: ED79    			out 	(c),a
833F: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8340: EB      			ex 		de,hl
8341: 6B      			ld 		l,e
8342: 2600    			ld 		h,0
8344: 29      			add 	hl,hl 								
8345: 29      			add 	hl,hl
8346: 29      			add 	hl,hl
8347: CB24    			sla 	h
8349: CB24    			sla 	h
834B: CB24    			sla 	h
              	
834D: 1E08    			ld 		e,8 								; do 8 rows
834F:         	__L2Outer:
834F: E5      			push 	hl 									; save start
8350: 1608    			ld 		d,8 								; do 8 columns
8352: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8355: DD23    			inc 	ix
8357:         	__L2Loop:
8357: 3600    			ld 		(hl),0 								; background
8359: 87      			add 	a,a 								; shift pattern left
835A: 3001    			jr 		nc,__L2NotSet
835C: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
835D:         	__L2NotSet:
835D: 23      			inc 	hl
835E: 15      			dec 	d 									; do a row
835F: 20F6    			jr 		nz,	__L2Loop
8361: E1      			pop 	hl 									; restore, go 256 bytes down.
8362: 24      			inc 	h
8363: 1D      			dec 	e 									; do 8 rows
8364: 20E9    			jr 		nz,__L2Outer	
8366:         	__L2Exit:
8366: DDE1    			pop 	ix
8368: E1      			pop 	hl
8369: D1      			pop 	de
836A: C1      			pop 	bc
836B: F1      			pop 	af
836C: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
836D:         	GFXInitialiseLowRes:
836D: F5      			push 	af
836E: C5      			push 	bc
836F: D5      			push 	de
              	
8370: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8374: AF      			xor 	a 									; layer 2 off.
8375: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8378: ED79    			out 	(c),a
              	
837A: 210040  			ld 		hl,$4000 							; erase the bank to $00 
837D: 110060  			ld 		de,$6000
8380:         	LowClearScreen: 									; assume default palette :)
8380: AF      			xor 	a
8381: 77      			ld 		(hl),a
8382: 12      			ld 		(de),a
8383: 23      			inc 	hl
8384: 13      			inc 	de
8385: 7C      			ld 		a,h
8386: FE58    			cp 		$58
8388: 20F6    			jr		nz,LowClearScreen
838A: AF      			xor 	a
838B: D3FE    			out 	($FE),a
838D: D1      			pop 	de
838E: C1      			pop 	bc
838F: F1      			pop 	af
8390: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8393: 119783  			ld 		de,GFXPrintCharacterLowRes
8396: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8397:         	GFXPrintCharacterLowRes:
8397: F5      			push 	af
8398: C5      			push 	bc
8399: D5      			push 	de
839A: E5      			push 	hl
839B: DDE5    			push 	ix
              	
839D: 43      			ld 		b,e 								; save character in B
              	
839E: 29      			add 	hl,hl
839F: 29      			add 	hl,hl
83A0: 7C      			ld	 	a,h 								; check in range 192*4 = 768
83A1: FE03    			cp 		3
83A3: 3046    			jr 		nc,__LPExit
              	
83A5: 7A      			ld 		a,d 								; only lower 3 bits of colour
83A6: E607    			and 	7
83A8: 4F      			ld 		c,a 								; C is foreground
              	
83A9: 78      			ld 		a,b 								; get char back
83AA: CD8381  			call 	GFXGetFontGraphicDE
83AD: D5      			push 	de
83AE: DDE1    			pop 	ix
              	
83B0: EB      			ex 		de,hl
83B1: 7B      			ld 		a,e 								; put DE => HL
83B2: E6C0    			and 	192 								; these are part of Y
83B4: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83B5: 62      			ld 		h,d		
83B6: 29      			add 	hl,hl
83B7: 29      			add 	hl,hl
83B8: 29      			add 	hl,hl
83B9: 29      			add 	hl,hl
83BA: CBF4    			set 	6,h 								; put into $4000 range
              	
83BC: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83BE: A3      			and 	e 									; and with E, gives X position
83BF: 87      			add 	a,a 								; now multiplied by 8.
83C0: 5F      			ld 		e,a 								; DE is x offset.
83C1: 1600    			ld 		d,0  
              	
83C3: 19      			add 	hl,de
83C4: 7C      			ld 		a,h
83C5: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83C7: 3804    			jr 		c,__LowNotLower2
83C9: 110008  			ld 		de,$0800
83CC: 19      			add 	hl,de
83CD:         	__LowNotLower2:
83CD: 1E08    			ld 		e,8 								; do 8 rows
83CF:         	__LowOuter:
83CF: E5      			push 	hl 									; save start
83D0: 1608    			ld 		d,8 								; do 8 columns
83D2: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83D5: DD23    			inc 	ix
83D7:         	__LowLoop:
83D7: 3600    			ld 		(hl),0 								; background
83D9: 87      			add 	a,a 								; shift pattern left
83DA: 3001    			jr 		nc,__LowNotSet
83DC: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83DD:         	__LowNotSet:
83DD: 2C      			inc 	l
83DE: 15      			dec 	d 									; do a row
83DF: 20F6    			jr 		nz,	__LowLoop
83E1: E1      			pop 	hl 									; restore, go 256 bytes down.
83E2: D5      			push 	de
83E3: 118000  			ld 		de,128
83E6: 19      			add 	hl,de
83E7: D1      			pop 	de
83E8: 1D      			dec 	e 									; do 8 rows
83E9: 20E4    			jr 		nz,__LowOuter	
83EB:         	__LPExit:
83EB: DDE1    			pop 	ix
83ED: E1      			pop 	hl
83EE: D1      			pop 	de
83EF: C1      			pop 	bc
83F0: F1      			pop 	af
83F1: C9      			ret
              	
              	
              			include "compiler/loader.asm"				; loads in bootstrap code
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		loader.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Source loader
              	;		Date : 		19th November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;									Load the bootstrap page
              	;
              	; ********************************************************************************************************
              	
83F2:         	LOADBootstrap:
83F2: 3E22    			ld 		a,BootstrapPage 					; set the current page to bootstrap page.
83F4: CD3F80  			call 	PAGESwitch
83F7: DD2100C0			ld 		ix,$C000 							; current section being loaded.
83FB: 0E00    			ld 		c,0 								; used to display progress.
83FD: 2156A4  			ld 		hl,$A456 							; helps with debugging.
8400: 1123B1  			ld 		de,$B123
              	;
              	;		Once here for every 'chunk'. We copy the text to the editor buffer in 
              	;		chunks (currently 1024 bytes) until we've done all 16k of the page.
              	;
8403:         	__LOADBootLoop:
8403: D5      			push 	de 									; save A registers
8404: E5      			push 	hl
              	
8405: DDE5    			push 	ix 									; HL = Current Section
8407: E1      			pop 	hl
8408: 11087B  			ld 		de,EditBuffer  						; Copy to edit buffer 1/2k (512 bytes) of code.
840B: 010002  			ld 		bc,512
840E: EDB0    			ldir 	
              	
8410: 2600    			ld 		h,0 								; Progress prompt.
8412: DD7C    			ld 		a,ixh
8414: 0F      			rrca
8415: E61F    			and 	31
8417: 6F      			ld 		l,a
8418: 112A05  			ld 		de,$052A
841B: CD3E81  			call 	GFXWriteCharacter
              	
841E: E1      			pop 	hl 									; restore A & B
841F: D1      			pop 	de
8420: 01087B  			ld 		bc,EditBuffer 						; now scan the edit buffer
8423: CD3884  			call 	LOADScanBuffer 
              	
8426: 010002  			ld 		bc,512 								; add 512 size to IX
8429: DD09    			add 	ix,bc
842B: DDE5    			push 	ix									; until wrapped round to $0000
842D: C1      			pop 	bc
842E: CB78    			bit 	7,b
8430: 20D1    			jr 		nz,__LOADBootLoop
              	
8432:         	__LOADEnds:
8432: CD5880  			call 	PAGERestore 						; restore page
8435: C35E87  			jp 		HaltZ80 							; and stop
              			
              	; ********************************************************************************************************
              	;
              	;					Process (compiling) the text at BC. A and B are in HL/DE
              	; 
              	; ********************************************************************************************************
              	
8438:         	LOADScanBuffer:
8438: F5      			push 	af
8439: C5      			push 	bc
843A: DDE5    			push 	ix
              	
843C:         	__LOADScanLoop:
843C: 0A      			ld 		a,(bc) 								; look at tage
843D: FEFF    			cp 		$FF 								; was it $FF ?
843F: 280B    			jr 		z,__LOADScanExit 					; if so, we are done.
              	
8441: CD6C85  			call 	COMCompileExecute 					; execute text at BC.
              	
8444:         	__LOADNextWord: 									; look for the next bit 7 high.
8444: 03      			inc 	bc 									; advance forward to next word.
8445: 0A      			ld 		a,(bc)
8446: CB7F    			bit 	7,a
8448: 28FA    			jr 		z,__LOADNextWord
844A: 18F0    			jr 		__LOADScanLoop 
              	
844C:         	__LOADScanExit:
844C: DDE1    			pop 	ix
844E: C1      			pop 	bc
844F: F1      			pop 	af
8450: C9      			ret
              			include "compiler/dictionary.asm"			; dictionary add/update routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		dictionary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		19th November 2018
              	;		Purpose :	Dictionary handler.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;		Add Dictionary Word. Name is string at BC ends in $80-$FF, uses the current page/pointer
              	;		values. 
              	;
              	; ***********************************************************************************************
              	
8451:         	DICTAddWord:
8451: F5      			push 	af 									; registers to stack.
8452: C5      			push 	bc
8453: D5      			push 	de
8454: E5      			push	hl
8455: DDE5    			push 	ix
8457: 60      			ld 		h,b 								; put name in HL
8458: 69      			ld 		l,c
8459: E5      			push 	hl 									
845A: 06FF    			ld 		b,-1								; put length of string in B
845C:         	__DICTAddGetLength:
845C: 23      			inc 	hl
845D: 04      			inc 	b
845E: CB7E    			bit 	7,(hl)
8460: 28FA    			jr 		z,__DICTAddGetLength
8462: E1      			pop 	hl
              	
8463: 3E20    			ld 		a,DictionaryPage					; switch to dictionary page
8465: CD3F80  			call 	PAGESwitch
              	
8468: DD2100C0			ld 		ix,$C000							; IX = Start of dictionary
              	
846C:         	__DICTFindEndDictionary:
846C: DD7E00  			ld 		a,(ix+0) 							; follow down chain to the end
846F: B7      			or 		a
8470: 2807    			jr 		z,__DICTCreateEntry
8472: 5F      			ld 		e,a
8473: 1600    			ld 		d,0
8475: DD19    			add 	ix,de
8477: 18F3    			jr 		__DICTFindEndDictionary
              	
8479:         	__DICTCreateEntry:
8479: 78      			ld 		a,b
847A: C605    			add 	a,5
847C: DD7700  			ld 		(ix+0),a 							; offset is length + 5
              	
847F: 3ABB8A  			ld 		a,(SINextFreeCodePage)				; code page
8482: DD7701  			ld 		(ix+1),a
8485: ED5BB78A			ld 		de,(SINextFreeCode)					; code address
8489: DD7302  			ld 		(ix+2),e
848C: DD7203  			ld 		(ix+3),d 
              	
848F: DD7004  			ld 		(ix+4),b 							; length (0..4)
              	
8492: EB      			ex 		de,hl 								; put name in DE
8493: 13      			inc 	de 									; skip over tag.
8494:         	__DICTAddCopy:
8494: 1A      			ld 		a,(de) 								; copy byte over as 7 bit ASCII.
8495: DD7705  			ld 		(ix+5),a
8498: DD23    			inc 	ix 									
849A: 13      			inc 	de
849B: 10F7    			djnz	__DICTAddCopy 						; until string is copied over.
              	
849D: DD360500			ld 		(ix+5),0 							; write end of dictionary zero.
              	
84A1: CD5880  			call 	PAGERestore
84A4: DDE1    			pop 	ix 									; restore and exit
84A6: E1      			pop 	hl
84A7: D1      	 		pop 	de
84A8: C1      			pop 	bc
84A9: F1      			pop 	af
84AA: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;			Find word in dictionary. BC points to name.
              	;			On exit, HL is the address and E the page number with CC if found, 
              	;			CS set and HL=DE=0 if not found.
              	;
              	; ***********************************************************************************************
              	
84AB:         	DICTFindWord:
84AB: C5      			push 	bc 								; save registers - return in EHL Carry
84AC: DDE5    			push 	ix
              	
84AE: 60      			ld 		h,b 							; name in HL
84AF: 69      			ld 		l,c
              			
84B0: 3E20    			ld 		a,DictionaryPage 				; switch to dictionary page
84B2: CD3F80  			call 	PAGESwitch
              	
84B5: DD2100C0			ld 		ix,$C000 						; dictionary start			
84B9:         	__DICTFindMainLoop:
84B9: DD7E00  			ld 		a,(ix+0)						; examine offset, exit if zero.
84BC: B7      			or 		a
84BD: 2836    			jr 		z,__DICTFindFail
              	
84BF: DDE5    			push 	ix 								; save pointers on stack.
84C1: E5      			push 	hl 
              	
84C2: DD7E04  			ld 		a,(ix+4) 						; characters to compare
84C5: E61F    			and 	$1F
84C7: 47      			ld 		b,a
84C8: 23      			inc 	hl 								; skip over tag
84C9:         	__DICTCheckName:
84C9: DD7E05  			ld 		a,(ix+5) 						; compare dictionary vs character.
84CC: BE      			cp 		(hl) 							; compare vs the matching character.
84CD: 201A    			jr 		nz,__DICTFindNoMatch 			; no, not the same word.
84CF: 23      			inc 	hl 								; HL point to next character
84D0: DD23    			inc 	ix
84D2: 10F5    			djnz 	__DICTCheckName
              	
84D4: CB7E    			bit 	7,(hl)							; if so, see if the next one is EOW
84D6: 2811    			jr 		z,__DICTFindNoMatch 			; if not , bad match.
              	
84D8: E1      			pop 	hl 								; Found a match. restore HL and IX
84D9: DDE1    			pop 	ix
84DB: 1600    			ld 		d,0 							; D = 0 for neatness.
84DD: DD5E01  			ld 		e,(ix+1)						; E = page
84E0: DD6E02  			ld 		l,(ix+2)						; HL = address
84E3: DD6603  			ld 		h,(ix+3)		
84E6: AF      			xor 	a 								; clear the carry flag.
84E7: 1813    			jr 		__DICTFindExit
              	
84E9:         	__DICTFindNoMatch:								; this one doesn't match.
84E9: E1      			pop 	hl 								; restore HL and IX
84EA: DDE1    			pop 	ix
84EC:         	__DICTFindNext:
84EC: DD5E00  			ld 		e,(ix+0)						; DE = offset
84EF: 1600    			ld 		d,$00
84F1: DD19    			add 	ix,de 							; next word.
84F3: 18C4    			jr 		__DICTFindMainLoop				; and try the next one.
              	
84F5:         	__DICTFindFail:
84F5: 110000  			ld 		de,$0000 						; return all zeros.
84F8: 210000  			ld 		hl,$0000
84FB: 37      			scf 									; set carry flag
84FC:         	__DICTFindExit:
84FC: F5      			push 	af
84FD: CD5880  			call 	PAGERestore
8500: F1      			pop 	af
8501: DDE1    			pop 	ix 								; pop registers and return.
8503: C1      			pop 	bc
8504: C9      			ret
              	
              			include "compiler/utility.asm"				; utility functions
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		utility.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Utility functions.
              	;		Date : 		19th November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	;
              	;		Name : 		computils.asm
              	;		Author : 	Paul Robson (paul@robsons.org.uk)
              	;		Purpose : 	Compiler utilities
              	;		Date : 		20th November 2018
              	;
              	; ********************************************************************************************************
              	; ********************************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;								  Compile code inline following me, B bytes
              	;
              	; ********************************************************************************************************
              			
8505:         	COMCopyFollowingCode:
8505: 78      			ld 		a,b
8506: E67F    			and 	$7F
8508: C1      			pop 	bc										; pop the address off the stack.
8509: E5      			push 	hl
850A: 69      			ld 		l,c
850B: 60      			ld 		h,b
850C: 47      			ld 		b,a
850D:         	__COMCFCLoop:
850D: 7E      			ld 		a,(hl)									; read the byte
850E: 23      			inc 	hl
850F: CD6F80  			call 	FARCompileByte 							; compile inline
8512: 10F9    			djnz 	__COMCFCLoop
8514: E1      			pop 	hl
8515: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;									Compile call to code following me.
              	;
              	; ********************************************************************************************************
              	
8516:         	COMCompileCallToFollowing:
8516: C1      			pop 	bc
8517: E5      			push 	hl
              			;
              			;		Paging if *both* in $C000-$FFFF but the pages are different.
              			;		Or if calling from < $C000 to >= $C000 (e.g. the execute code)
              			;
8518: 3ECD    			ld 		a,$CD 									; compile CALL opcode
851A: CD6F80  			call 	FARCompileByte
851D: 60      			ld 		h,b
851E: 69      			ld 		l,c
851F: CD8780  			call 	FARCompileWord 							; compile address
8522: E1      			pop 	hl
8523: C9      			ret
              	
              	
              			include "compiler/constant.asm" 			; ASCII -> Int conversion
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		constant.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		20th November 2018
              	;		Purpose :	ASCII -> Integer conversion.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;			Convert ASCIIZ string at BC to constant in HL. DE 0, Carry Clear if true
              	;									Uses Colorforth's backend - format.
              	;
              	; ***********************************************************************************************
              	
8524:         	CONSTConvert:
8524: C5      		push 	bc
              	
8525: 50      		ld 		d,b 									; string in DE.
8526: 59      		ld 		e,c
              		
8527: 210000  		ld 		hl,$0000								; result in HL.
852A: 13      		inc 	de 										; skip over the tag
852B: 0E00    		ld 		c,0										; C is the negate flag
852D:         	__CONConvLoop:
852D: 1A      		ld 		a,(de)									; get next character
852E: 13      		inc 	de
              	
852F: FE30    		cp 		'0'										; must be 0-9 otherwise
8531: 3830    		jr 		c,__CONConFail
8533: FE3A    		cp 		'9'+1
8535: 302C    		jr 		nc,__CONConFail
              	
8537: C5      		push 	bc
8538: E5      		push 	hl 										; HL -> BC
8539: C1      		pop 	bc
853A: 29      		add 	hl,hl 									; HL := HL * 4 + BC 
853B: 29      		add 	hl,hl
853C: 09      		add 	hl,bc 						
853D: 29      		add 	hl,hl 									; HL := HL * 10
853E: 0600    		ld 		b,0 									; add the digit into HL
8540: E60F    		and 	15
8542: 4F      		ld 		c,a
8543: 09      		add 	hl,bc
8544: C1      		pop 	bc
              	
8545: 1A      		ld 		a,(de) 									; check ends in -
8546: FE2D    		cp 		'-'									
8548: 2806    		jr 		z,__CONMinusExit 						
854A: CB7F    		bit 	7,a 									; check done everything.
854C: 28DF    		jr 		z,__CONConvLoop
854E: 180D    		jr 		__CONNotNegative
              	
8550:         	__CONMinusExit:
8550: 13      		inc 	de 										; if not the last, it's an error.
8551: 1A      		ld 		a,(de)
8552: CB7F    		bit 	7,a
8554: 280D    		jr		z,__CONConFail
              	
8556: 7C      		ld 		a,h 									; negate HL
8557: 2F      		cpl 	
8558: 67      		ld 		h,a
8559: 7D      		ld 		a,l
855A: 2F      		cpl
855B: 6F      		ld 		l,a
855C: 23      		inc 	hl
              	
855D:         	__CONNotNegative:
855D: 110000  		ld 		de,$0000
8560: AF      		xor 	a 										; clear carry
8561: C1      		pop 	bc
8562: C9      		ret
              	
8563:         	__CONConFail: 										; didn't convert
8563: 21FFFF  		ld 		hl,$FFFF
8566: 11FFFF  		ld 		de,$FFFF
8569: 37      		scf
856A: C1      		pop 	bc
856B: C9      		ret
              	
              		
              			include "compiler/compiler.asm"				; actual compiler code.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		compiler.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		20th November 2018
              	;		Purpose :	Compile/Execute code.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;		On entry BC points to a word, which is a tag followed by text, followed by
              	; 		a byte with bit 7 set. A(HL) and B(DE) contain their register values
              	;
              	; ***************************************************************************************
              	
856C:         	COMCompileExecute:
856C: C5      		push 	bc
856D: DDE5    		push 	ix
              	
856F: 0A      		ld 		a,(bc) 									; look at the tag
8570: FE82    		cp 		$82 									; $82 = red word (definition + header)
8572: 281A    		jr 		z,__COMCDefine
8574: FE83    		cp 		$83 									; $83 = magenta word (definition only)
8576: 2816    		jr 		z,__COMCDefine
8578: FE84    		cp 		$84 									; $84 = green word (compilation)
857A: 282E    		jr 		z,__COMCCompile
857C: FE86    		cp 		$86 									; $86 = yellow word (execution)
857E: 285E    		jr 		z,__COMCExecute
8580: FE87    		cp 		$87 									; $87 = white word (comment)
8582: 2806    		jr 		z,__COMCExitOkay
              	
8584:         	__COMCFail:
8584: 60      		ld 		h,b 									; put "error message" (word) in BC
8585: 69      		ld 		l,c
8586: 23      		inc 	hl 										; skip over the tag
8587: C32D80  		jp 		ErrorHandler 							; and go error.
              	
858A:         	__COMCExitOkay:
858A: DDE1    		pop 	ix
858C: C1      		pop 	bc
858D: C9      		ret
              	
              	; =======================================================================================
              	;
              	;			Red define. Add the word to the dictionary at HERE and do the prefix
              	;					Magenta define. Add the word to HERE only.
              	;
              	; =======================================================================================
              	
858E:         	__COMCDefine:
858E: D5      		push 	de 										; save A + B current values.
858F: E5      		push 	hl
8590: 60      		ld 		h,b 									; add the word to the dictionary.
8591: 69      		ld 		l,c
8592: CD5184  		call 	DICTAddWord
8595: 0A      		ld 		a,(bc) 									; re-check the tag
8596: FE83    		cp 		$83
8598: 280B    		jr 		z,__COMCDefineNoHeader 					; if it is $83 Magenta then no header.
859A: 3ECD    		ld 		a,$CD 									; CALL opcode
859C: CD6F80  		call 	FARCompileByte
859F: 211685  		ld 		hl,COMCompileCallToFollowing 			; address of self-compiling routine.
85A2: CD8780  		call 	FARCompileWord
85A5:         	__COMCDefineNoHeader:
85A5: E1      		pop 	hl 										; restore A + B current values
85A6: D1      		pop 	de
85A7: C38A85  		jp 		__COMCExitOkay
              	
              	; =======================================================================================
              	;
              	;		Green compile. Either compile code to do A->B const->A if a number, if word
              	; 		in dictionary, then create code to call that.
              	;				
              	; =======================================================================================
              	
85AA:         	__COMCCompile:
85AA: CDB085  		call 	COMCompileWord 							; call the word which does the compiling
85AD: C38A85  		jp 		__COMCExitOkay
              	
85B0:         	COMCompileWord:
85B0: D5      		push 	de 										; A and B are not changed.
85B1: E5      		push 	hl 
85B2: CDAB84  		call 	DICTFindWord 							; find the word ?
85B5: 3015    		jr 		nc,__COMCWExecute 						; create the code to execute this word.
85B7: CD2485  		call 	CONSTConvert 							; does it convert to a number ?
85BA: 38C8    		jr 		c,__COMCFail 							; if not, fail.
              	;
              	;		This code compiles the code to load in as a constant
              	;
85BC:         	__COMCWConstant:
85BC: 3EEB    		ld 		a,$EB 									; compile EX DE,HL
85BE: CD6F80  		call 	FARCompileByte
85C1: 3E21    		ld 		a,$21 									; compile LD HL,xxxxx
85C3: CD6F80  		call 	FARCompileByte
85C6: CD8780  		call 	FARCompileWord 							; compile address
85C9: E1      		pop 	hl 											
85CA: D1      		pop 	de
85CB: C9      		ret
              	;
              	;		This code compiles the code to call the word by .... calling the word.
              	;
85CC:         	__COMCWExecute:
85CC: 7B      		ld 		a,e 									; switch to the page
85CD: CD3F80  		call 	PAGESwitch
85D0: E5      		push 	hl 										; put execution address in IX.
85D1: DDE1    		pop 	ix
85D3: E1      		pop 	hl 										; restore registers
85D4: D1      		pop 	de
85D5: CDDC85  		call 	__COMCWCallIX 							; call (ix)
85D8: CD5880  		call 	PAGERestore 							; restore the page
85DB: C9      		ret
              	
85DC:         	__COMCWCallIX:
85DC: DDE9    		jp 		(ix)
              	
              	; =======================================================================================
              	;
              	;		Yellow Execute - use the compiler to create code that executes it, then
              	; 		call it.
              	;				
              	; =======================================================================================
              	
85DE:         	__COMCExecute:
85DE: DD01    		db 		$DD,$01
85E0: D5      		push 	de 										; save A and B
85E1: E5      		push 	hl 
              	
85E2: 2AB78A  		ld 		hl,(SINextFreeCode) 					; save the next free code
85E5: E5      		push 	hl
85E6: 21407D  		ld 		hl,ExecuteCodeBuffer 					; point here the execute code buffer
85E9: 22B78A  		ld 		(SINextFreeCode),hl
              	
85EC: CDB085  		call 	COMCompileWord 							; compile the code, whatever it is.
85EF: 3EC9    		ld 		a,$C9 									; followed by RET.
85F1: CD6F80  		call 	FARCompileByte 
              	
85F4: E1      		pop 	hl 										; restore the next free code
85F5: 22B78A  		ld 		(SINextFreeCode),hl
              	
85F8: E1      		pop 	hl 										; restore A + B
85F9: D1      		pop 	de  
85FA: CD407D  		call 	ExecuteCodeBuffer 						; execute the code buffer.
85FD: C38A85  		jp 		__COMCExitOkay
              	
              					
              			include "temp/__words.asm" 					; and the actual words
              	;
              	; Generated.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   binary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   16th November 2018
              	;  Purpose : Binary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== + copies ===========
              	
8600:         	flatwordmarker_2b:
8600: 0601    	    ld  b,en_flat_2b-st_flat_2b
8602: CD0585  	    call COMCopyFollowingCode
8605:         	st_flat_2b:
8605: 19      	  add  hl,de
8606:         	en_flat_2b:
              	
              	; ***************************************************************************************
              	
              	; =========== * word ===========
              	
8606:         	flatwordmarker_2a:
8606: CD1685  	    call COMCompileCallToFollowing
8609:         	st_flat_2a:
8609: C3E580  	  jp   MULTMultiply16
860C:         	en_flat_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== and word ===========
              	
860C:         	flatwordmarker_61_6e_64:
860C: CD1685  	    call COMCompileCallToFollowing
860F:         	st_flat_61_6e_64:
860F: 7C      	  ld   a,h
8610: A2      	  and  d
8611: 67      	  ld   h,a
8612: 7D      	  ld   a,l
8613: A3      	  and  e
8614: 6F      	  ld   l,a
8615: C9      	  ret
8616:         	en_flat_61_6e_64:
              	
              	; ***************************************************************************************
              	
              	; =========== xor word ===========
              	
8616:         	flatwordmarker_78_6f_72:
8616: CD1685  	    call COMCompileCallToFollowing
8619:         	st_flat_78_6f_72:
8619: 7C      	  ld   a,h
861A: AA      	  xor   d
861B: 67      	  ld   h,a
861C: 7D      	  ld   a,l
861D: AB      	  xor  e
861E: 6F      	  ld   l,a
861F: C9      	  ret
8620:         	en_flat_78_6f_72:
              	
              	; ***************************************************************************************
              	
              	; =========== or word ===========
              	
8620:         	flatwordmarker_6f_72:
8620: CD1685  	    call COMCompileCallToFollowing
8623:         	st_flat_6f_72:
8623: 7C      	  ld   a,h
8624: B2      	  or   d
8625: 67      	  ld   h,a
8626: 7D      	  ld   a,l
8627: B3      	  or   e
8628: 6F      	  ld   l,a
8629: C9      	  ret
862A:         	en_flat_6f_72:
              	
              	
              	; ***************************************************************************************
              	
              	; =========== = word ===========
              	
862A:         	flatwordmarker_3d:
862A: CD1685  	    call COMCompileCallToFollowing
862D:         	st_flat_3d:
862D: 7B      	  ld   a,e
862E: BD      	  cp   l
862F: 2006    	  jr   nz,__EqualFail
8631: 7A      	  ld   a,d
8632: BC      	  cp   h
8633: 21FFFF  	  ld   hl,$FFFF
8636: C8      	  ret  z
8637:         	__EqualFail:
8637: 210000  	  ld   hl,0
863A: C9      	  ret
              	
863B:         	en_flat_3d:
              	
              	; ***************************************************************************************
              	
              	; =========== < word ===========
              	
863B:         	flatwordmarker_3c:
863B: CD1685  	    call COMCompileCallToFollowing
863E:         	st_flat_3c:
863E: 7A      	  ld   a,d      ; this is calculating true if B < A e.g. 4 7 <
863F: AC      	  xor  h
8640: 87      	  add  a,a      ; if the signs are different, check those.
8641: 380B    	  jr   c,__LessDifferentSigns
              	
8643: D5      	  push  de
8644: EB      	  ex   de,hl      ; want to do B-A
8645: ED52    	  sbc  hl,de      ; carry set if B-A < 0 e.g. B < A
8647: D1      	  pop  de
8648: 3808    	  jr   c,__LessTrue
              	
864A:         	__LessFalse:
864A: 210000  	  ld   hl,$0000
864D: C9      	  ret
              	
864E:         	__LessDifferentSigns:
864E: CB7A    	  bit  7,d      ; if B is +ve then B must be > A
8650: 28F8    	  jr   z,__LessFalse
              	
8652:         	__LessTrue:
8652: 21FFFF  	  ld   hl,$FFFF
8655: C9      	  ret
              	
8656:         	en_flat_3c:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   graphics.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Hardware I/O words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== screen! word ===========
              	
8656:         	flatwordmarker_73_63_72_65_65_6e_21:
8656: CD1685  	    call COMCompileCallToFollowing
8659:         	st_flat_73_63_72_65_65_6e_21:
8659: C33E81  	 jp   GFXWriteCharacter
865C:         	en_flat_73_63_72_65_65_6e_21:
              	
              	; ***************************************************************************************
              	
              	; =========== screen.mode word ===========
              	
865C:         	flatwordmarker_73_63_72_65_65_6e_2e_6d_6f_64_65:
865C: CD1685  	    call COMCompileCallToFollowing
865F:         	st_flat_73_63_72_65_65_6e_2e_6d_6f_64_65:
865F: C30981  	 jp   GFXMode
8662:         	en_flat_73_63_72_65_65_6e_2e_6d_6f_64_65:
              	
              	; ***************************************************************************************
              	
              	; =========== screen.clear word ===========
              	
8662:         	flatwordmarker_73_63_72_65_65_6e_2e_63_6c_65_61_72:
8662: CD1685  	    call COMCompileCallToFollowing
8665:         	st_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72:
8665: C3FF80  	 jp   GFXClearScreen
8668:         	en_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72:
              	
              	; ***************************************************************************************
              	
              	; =========== hex! word ===========
              	
8668:         	flatwordmarker_68_65_78_21:
8668: CD1685  	    call COMCompileCallToFollowing
866B:         	st_flat_68_65_78_21:
866B: C35181  	 jp   GFXWriteHexWord
866E:         	en_flat_68_65_78_21:
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   memory.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Memory and Hardware access
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== c@ copies ===========
              	
866E:         	flatwordmarker_63_40:
866E: 0603    	    ld  b,en_flat_63_40-st_flat_63_40
8670: CD0585  	    call COMCopyFollowingCode
8673:         	st_flat_63_40:
8673: 6E      	  ld   l,(hl)
8674: 2600    	  ld   h,0
8676:         	en_flat_63_40:
              	
              	; ***************************************************************************************
              	
              	; =========== @ copies ===========
              	
8676:         	flatwordmarker_40:
8676: 0604    	    ld  b,en_flat_40-st_flat_40
8678: CD0585  	    call COMCopyFollowingCode
867B:         	st_flat_40:
867B: 7E      	  ld   a,(hl)
867C: 23      	  inc  hl
867D: 66      	  ld   h,(hl)
867E: 6F      	  ld   l,a
867F:         	en_flat_40:
              	
              	; ***************************************************************************************
              	
              	; =========== c! copies ===========
              	
867F:         	flatwordmarker_63_21:
867F: 0601    	    ld  b,en_flat_63_21-st_flat_63_21
8681: CD0585  	    call COMCopyFollowingCode
8684:         	st_flat_63_21:
8684: 73      	  ld   (hl),e
8685:         	en_flat_63_21:
              	
              	; ***************************************************************************************
              	
              	; =========== ! copies ===========
              	
8685:         	flatwordmarker_21:
8685: 0604    	    ld  b,en_flat_21-st_flat_21
8687: CD0585  	    call COMCopyFollowingCode
868A:         	st_flat_21:
868A: 73      	  ld   (hl),e
868B: 23      	  inc  hl
868C: 72      	  ld   (hl),d
868D: 2B      	  dec  hl
868E:         	en_flat_21:
              	
              	; ***************************************************************************************
              	
              	; =========== +! word ===========
              	
868E:         	flatwordmarker_2b_21:
868E: CD1685  	    call COMCompileCallToFollowing
8691:         	st_flat_2b_21:
8691: 7E      	  ld   a,(hl)
8692: 83      	  add  a,e
8693: 77      	  ld   (hl),a
8694: 23      	  inc  hl
              	
8695: 7E      	  ld   a,(hl)
8696: 8A      	  adc  a,d
8697: 77      	  ld   (hl),a
8698: 2B      	  dec  hl
8699: C9      	  ret
869A:         	en_flat_2b_21:
              	
              	; ***************************************************************************************
              	
              	; =========== p! copies ===========
              	
869A:         	flatwordmarker_70_21:
869A: 0604    	    ld  b,en_flat_70_21-st_flat_70_21
869C: CD0585  	    call COMCopyFollowingCode
869F:         	st_flat_70_21:
869F: 4D      	  ld   c,l
86A0: 44      	  ld   b,h
86A1: ED59    	  out  (c),e
86A3:         	en_flat_70_21:
              	
              	; ***************************************************************************************
              	
              	; =========== p@ word ===========
              	
86A3:         	flatwordmarker_70_40:
86A3: CD1685  	    call COMCompileCallToFollowing
86A6:         	st_flat_70_40:
86A6: 4D      	  ld   c,l
86A7: 44      	  ld   b,h
86A8: ED68    	  in   l,(c)
86AA: 2600    	  ld   h,0
86AC: C9      	  ret
86AD:         	en_flat_70_40:
              	
              	; ***************************************************************************************
              	
              	; =========== far@ word ===========
              	
86AD:         	flatwordmarker_66_61_72_40:
86AD: CD1685  	    call COMCompileCallToFollowing
86B0:         	st_flat_66_61_72_40:
86B0: C3A280  	  jp   FARRead
86B3:         	en_flat_66_61_72_40:
              	
              	; ***************************************************************************************
              	
              	; =========== far! word ===========
              	
86B3:         	flatwordmarker_66_61_72_21:
86B3: CD1685  	    call COMCompileCallToFollowing
86B6:         	st_flat_66_61_72_21:
86B6: C3AF80  	  jp   FARWrite
86B9:         	en_flat_66_61_72_21:
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   register.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Register operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== swap copies ===========
              	
86B9:         	flatwordmarker_73_77_61_70:
86B9: 0601    	    ld  b,en_flat_73_77_61_70-st_flat_73_77_61_70
86BB: CD0585  	    call COMCopyFollowingCode
86BE:         	st_flat_73_77_61_70:
86BE: EB      	 ex   de,hl
86BF:         	en_flat_73_77_61_70:
              	
              	; ***************************************************************************************
              	
              	; =========== a>b copies ===========
              	
86BF:         	flatwordmarker_61_3e_62:
86BF: 0602    	    ld  b,en_flat_61_3e_62-st_flat_61_3e_62
86C1: CD0585  	    call COMCopyFollowingCode
86C4:         	st_flat_61_3e_62:
86C4: 54      	 ld   d,h
86C5: 5D      	 ld   e,l
86C6:         	en_flat_61_3e_62:
              	
              	; ***************************************************************************************
              	
              	; =========== b>a copies ===========
              	
86C6:         	flatwordmarker_62_3e_61:
86C6: 0602    	    ld  b,en_flat_62_3e_61-st_flat_62_3e_61
86C8: CD0585  	    call COMCopyFollowingCode
86CB:         	st_flat_62_3e_61:
86CB: 62      	 ld   h,d
86CC: 6B      	 ld   l,e
86CD:         	en_flat_62_3e_61:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   stack.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Stack operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== ab>r copies.only ===========
              	
86CD:         	flatwordmarker_61_62_3e_72:
86CD: 0682    	    ld  b,en_flat_61_62_3e_72-st_flat_61_62_3e_72+$80
86CF: CD0585  	    call COMCopyFollowingCode
86D2:         	st_flat_61_62_3e_72:
86D2: D5      	 push  de
86D3: E5      	 push  hl
86D4:         	en_flat_61_62_3e_72:
              	
              	; ***************************************************************************************
              	
              	; =========== r>ab copies.only ===========
              	
86D4:         	flatwordmarker_72_3e_61_62:
86D4: 0682    	    ld  b,en_flat_72_3e_61_62-st_flat_72_3e_61_62+$80
86D6: CD0585  	    call COMCopyFollowingCode
86D9:         	st_flat_72_3e_61_62:
86D9: E1      	 pop  hl
86DA: D1      	 pop  de
86DB:         	en_flat_72_3e_61_62:
              	
              	; ***************************************************************************************
              	
              	; =========== r>bb copies.only ===========
              	
86DB:         	flatwordmarker_72_3e_62_62:
86DB: 0682    	    ld  b,en_flat_72_3e_62_62-st_flat_72_3e_62_62+$80
86DD: CD0585  	    call COMCopyFollowingCode
86E0:         	st_flat_72_3e_62_62:
86E0: D1      	 pop  de
86E1: D1      	 pop  de
86E2:         	en_flat_72_3e_62_62:
              	
              	; ***************************************************************************************
              	
              	; =========== push copies.only ===========
              	
86E2:         	flatwordmarker_70_75_73_68:
86E2: 0681    	    ld  b,en_flat_70_75_73_68-st_flat_70_75_73_68+$80
86E4: CD0585  	    call COMCopyFollowingCode
86E7:         	st_flat_70_75_73_68:
86E7: E5      	 push  hl
86E8:         	en_flat_70_75_73_68:
              	
              	; ***************************************************************************************
              	
              	; =========== pop copies.only ===========
              	
86E8:         	flatwordmarker_70_6f_70:
86E8: 0682    	    ld  b,en_flat_70_6f_70-st_flat_70_6f_70+$80
86EA: CD0585  	    call COMCopyFollowingCode
86ED:         	st_flat_70_6f_70:
86ED: EB      	 ex   de,hl
86EE: E1      	 pop  hl
86EF:         	en_flat_70_6f_70:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   unary.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Unary operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== 0= word ===========
              	
86EF:         	flatwordmarker_30_3d:
86EF: CD1685  	    call COMCompileCallToFollowing
86F2:         	st_flat_30_3d:
86F2: 7C      	  ld  a,h
86F3: B5      	  or  l
86F4: 210000  	  ld  hl,$0000
86F7: C0      	  ret nz
86F8: 2B      	  dec hl
86F9: C9      	  ret
86FA:         	en_flat_30_3d:
              	
              	; ***************************************************************************************
              	
              	; =========== 0< word ===========
              	
86FA:         	flatwordmarker_30_3c:
86FA: CD1685  	    call COMCompileCallToFollowing
86FD:         	st_flat_30_3c:
86FD: CB7C    	  bit 7,h
86FF: 210000  	  ld  hl,$0000
8702: C8      	  ret z
8703: 2B      	  dec hl
8704: C9      	  ret
8705:         	en_flat_30_3c:
              	
              	; ***************************************************************************************
              	
              	; =========== - copies ===========
              	
8705:         	flatwordmarker_2d:
8705: 0607    	    ld  b,en_flat_2d-st_flat_2d
8707: CD0585  	    call COMCopyFollowingCode
870A:         	st_flat_2d:
870A: 7C      	  ld  a,h
870B: 2F      	  cpl
870C: 67      	  ld  h,a
870D: 7D      	  ld  a,l
870E: 2F      	  cpl
870F: 6F      	  ld  l,a
8710: 23      	  inc hl
8711:         	en_flat_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== not word ===========
              	
8711:         	flatwordmarker_6e_6f_74:
8711: CD1685  	    call COMCompileCallToFollowing
8714:         	st_flat_6e_6f_74:
8714: 7C      	  ld  a,h
8715: 2F      	  cpl
8716: 67      	  ld  h,a
8717: 7D      	  ld  a,l
8718: 2F      	  cpl
8719: 6F      	  ld  l,a
871A: C9      	  ret
871B:         	en_flat_6e_6f_74:
              	
              	; ***************************************************************************************
              	
              	; =========== ++ copies ===========
              	
871B:         	flatwordmarker_2b_2b:
871B: 0601    	    ld  b,en_flat_2b_2b-st_flat_2b_2b
871D: CD0585  	    call COMCopyFollowingCode
8720:         	st_flat_2b_2b:
8720: 23      	  inc hl
8721:         	en_flat_2b_2b:
              	
              	; ***************************************************************************************
              	
              	; =========== -- copies ===========
              	
8721:         	flatwordmarker_2d_2d:
8721: 0601    	    ld  b,en_flat_2d_2d-st_flat_2d_2d
8723: CD0585  	    call COMCopyFollowingCode
8726:         	st_flat_2d_2d:
8726: 2B      	  dec hl
8727:         	en_flat_2d_2d:
              	
              	; ***************************************************************************************
              	
              	; =========== 2* copies ===========
              	
8727:         	flatwordmarker_32_2a:
8727: 0601    	    ld  b,en_flat_32_2a-st_flat_32_2a
8729: CD0585  	    call COMCopyFollowingCode
872C:         	st_flat_32_2a:
872C: 29      	  add  hl,hl
872D:         	en_flat_32_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== 2/ copies ===========
              	
872D:         	flatwordmarker_32_2f:
872D: 0604    	    ld  b,en_flat_32_2f-st_flat_32_2f
872F: CD0585  	    call COMCopyFollowingCode
8732:         	st_flat_32_2f:
8732: CB2C    	  sra  h
8734: CB1D    	  rr   l
8736:         	en_flat_32_2f:
              	
              	; ***************************************************************************************
              	
              	; =========== 4* copies ===========
              	
8736:         	flatwordmarker_34_2a:
8736: 0602    	    ld  b,en_flat_34_2a-st_flat_34_2a
8738: CD0585  	    call COMCopyFollowingCode
873B:         	st_flat_34_2a:
873B: 29      	  add  hl,hl
873C: 29      	  add  hl,hl
873D:         	en_flat_34_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== 16* copies ===========
              	
873D:         	flatwordmarker_31_36_2a:
873D: 0604    	    ld  b,en_flat_31_36_2a-st_flat_31_36_2a
873F: CD0585  	    call COMCopyFollowingCode
8742:         	st_flat_31_36_2a:
8742: 29      	  add  hl,hl
8743: 29      	  add  hl,hl
8744: 29      	  add  hl,hl
8745: 29      	  add  hl,hl
8746:         	en_flat_31_36_2a:
              	
              	; ***************************************************************************************
              	
              	; =========== bswap copies ===========
              	
8746:         	flatwordmarker_62_73_77_61_70:
8746: 0603    	    ld  b,en_flat_62_73_77_61_70-st_flat_62_73_77_61_70
8748: CD0585  	    call COMCopyFollowingCode
874B:         	st_flat_62_73_77_61_70:
874B: 7C      	  ld   a,h
874C: 65      	  ld   h,l
874D: 6F      	  ld   l,a
874E:         	en_flat_62_73_77_61_70:
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;  Name :   utility.words
              	;  Author : Paul Robson (paul@robsons.org.uk)
              	;  Date :   18th November 2018
              	;  Purpose : Miscellaneous words.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; =========== break copies.only ===========
              	
874E:         	flatwordmarker_62_72_65_61_6b:
874E: 0682    	    ld  b,en_flat_62_72_65_61_6b-st_flat_62_72_65_61_6b+$80
8750: CD0585  	    call COMCopyFollowingCode
8753:         	st_flat_62_72_65_61_6b:
8753: DD01    	  db   $DD,$01
8755:         	en_flat_62_72_65_61_6b:
              	
              	; ***************************************************************************************
              	
              	; =========== ; copies.only ===========
              	
8755:         	flatwordmarker_3b:
8755: 0681    	    ld  b,en_flat_3b-st_flat_3b+$80
8757: CD0585  	    call COMCopyFollowingCode
875A:         	st_flat_3b:
875A: C9      	  ret
875B:         	en_flat_3b:
              	
              	; ***************************************************************************************
              	
              	; =========== halt word ===========
              	
875B:         	flatwordmarker_68_61_6c_74:
875B: CD1685  	    call COMCompileCallToFollowing
875E:         	st_flat_68_61_6c_74:
875E:         	HaltZ80:
875E: F3      	  di
875F: 76      	  halt
8760: 18FC    	  jr   HaltZ80
8762:         	en_flat_68_61_6c_74:
              	
              	; ***************************************************************************************
              	
              	; =========== copy word ===========
              	
8762:         	flatwordmarker_63_6f_70_79:
8762: CD1685  	    call COMCompileCallToFollowing
8765:         	st_flat_63_6f_70_79:
8765: ED4BCB8A	  ld   bc,(SIWord)
8769: 78      	  ld   a,b         ; nothing to do.
876A: B1      	  or   c
876B: C8      	  ret  z
              	
876C: C5      	  push  bc
876D: D5      	  push  de
876E: E5      	  push  hl
              	
876F: AF      	  xor  a          ; find direction.
8770: ED52    	  sbc  hl,de
8772: 7C      	  ld   a,h
8773: 19      	  add  hl,de
8774: CB7F    	  bit  7,a         ; if +ve use LDDR
8776: 2807    	  jr   z,__copy2
              	
8778: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
8779: EDB0    	  ldir
877B:         	__copyExit:
877B: E1      	  pop  hl
877C: D1      	  pop  de
877D: C1      	  pop  bc
877E: C9      	  ret
              	
877F:         	__copy2:
877F: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
8780: EB      	  ex   de,hl
8781: 09      	  add  hl,bc
8782: 1B      	  dec  de          ; -1 to point to last byte
8783: 2B      	  dec  hl
8784: EDB8    	  lddr
8786: 18F3    	  jr   __copyExit
8788:         	en_flat_63_6f_70_79:
              	
              	; ***************************************************************************************
              	
              	; =========== fill word ===========
              	
8788:         	flatwordmarker_66_69_6c_6c:
8788: CD1685  	    call COMCompileCallToFollowing
878B:         	st_flat_66_69_6c_6c:
878B: ED4BCB8A	  ld   bc,(SIWord)
878F: 78      	  ld   a,b         ; nothing to do.
8790: B1      	  or   c
8791: C8      	  ret  z
8792: C5      	  push bc
8793: E5      	  push  hl
              	
8794: 73      	__fill1:ld   (hl),e
8795: 23      	  inc  hl
8796: 0B      	  dec  bc
8797: 78      	  ld   a,b
8798: B1      	  or   c
8799: 20F9    	  jr   nz,__fill1
              	
879B: E1      	  pop  hl
879C: C1      	  pop  bc
879D: C9      	  ret
879E:         	en_flat_66_69_6c_6c:
              	
              	; ***************************************************************************************
              	
              	; =========== c, word ===========
              	
879E:         	flatwordmarker_63_2c:
879E: CD1685  	    call COMCompileCallToFollowing
87A1:         	st_flat_63_2c:
87A1: 7D      	  ld   a,l
87A2: C36F80  	  jp   FARCompileByte
87A5:         	en_flat_63_2c:
              	
              	; ***************************************************************************************
              	
              	; =========== , word ===========
              	
87A5:         	flatwordmarker_2c:
87A5: CD1685  	    call COMCompileCallToFollowing
87A8:         	st_flat_2c:
87A8: 7D      	  ld   a,l
87A9: C38780  	  jp   FARCompileWord
87AC:         	en_flat_2c:
              	
              	; ***************************************************************************************
              	
              	; =========== inkey word ===========
              	
87AC:         	flatwordmarker_69_6e_6b_65_79:
87AC: CD1685  	    call COMCompileCallToFollowing
87AF:         	st_flat_69_6e_6b_65_79:
87AF: EB      	  ex   de,hl
87B0: CDA681  	  call  IOScanKeyboard
87B3: 6F      	  ld   l,a
87B4: 2600    	  ld   h,0
87B6: C9      	  ret
87B7:         	en_flat_69_6e_6b_65_79:
              	
              	
87B7:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
87B7: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
87BB: 00000000	
87BF: 0C1E1E0C	
87C3: 0C000C00	
87C7: 36360000	
87CB: 00000000	
87CF: 36367F36	
87D3: 7F363600	
87D7: 183E603C	
87DB: 067C1800	
87DF: 0063660C	
87E3: 18336300	
87E7: 1C361C3B	
87EB: 6E663B00	
87EF: 30306000	
87F3: 00000000	
87F7: 0C183030	
87FB: 30180C00	
87FF: 30180C0C	
8803: 0C183000	
8807: 00331E7F	
880B: 1E330000	
880F: 0018187E	
8813: 18180000	
8817: 00000000	
881B: 00181830	
881F: 0000007E	
8823: 00000000	
8827: 00000000	
882B: 00181800	
882F: 03060C18	
8833: 30604000	
8837: 3E63676F	
883B: 7B733E00	
883F: 18381818	
8843: 18187E00	
8847: 3C66061C	
884B: 30667E00	
884F: 3C66061C	
8853: 06663C00	
8857: 0E1E3666	
885B: 7F060F00	
885F: 7E607C06	
8863: 06663C00	
8867: 1C30607C	
886B: 66663C00	
886F: 7E66060C	
8873: 18181800	
8877: 3C66663C	
887B: 66663C00	
887F: 3C66663E	
8883: 060C3800	
8887: 00181800	
888B: 00181800	
888F: 00181800	
8893: 00181830	
8897: 0C183060	
889B: 30180C00	
889F: 00007E00	
88A3: 007E0000	
88A7: 30180C06	
88AB: 0C183000	
88AF: 3C66060C	
88B3: 18001800	
88B7: 3E636F6F	
88BB: 6F603C00	
88BF: 183C6666	
88C3: 7E666600	
88C7: 7E33333E	
88CB: 33337E00	
88CF: 1E336060	
88D3: 60331E00	
88D7: 7C363333	
88DB: 33367C00	
88DF: 7F31343C	
88E3: 34317F00	
88E7: 7F31343C	
88EB: 34307800	
88EF: 1E336060	
88F3: 67331F00	
88F7: 6666667E	
88FB: 66666600	
88FF: 3C181818	
8903: 18183C00	
8907: 0F060606	
890B: 66663C00	
890F: 7333363C	
8913: 36337300	
8917: 78303030	
891B: 31337F00	
891F: 63777F7F	
8923: 6B636300	
8927: 63737B6F	
892B: 67636300	
892F: 1C366363	
8933: 63361C00	
8937: 7E33333E	
893B: 30307800	
893F: 3C666666	
8943: 6E3C0E00	
8947: 7E33333E	
894B: 36337300	
894F: 3C667038	
8953: 0E663C00	
8957: 7E5A1818	
895B: 18183C00	
895F: 66666666	
8963: 66667E00	
8967: 66666666	
896B: 663C1800	
896F: 6363636B	
8973: 7F776300	
8977: 6363361C	
897B: 1C366300	
897F: 6666663C	
8983: 18183C00	
8987: 7F63460C	
898B: 19337F00	
898F: 3C303030	
8993: 30303C00	
8997: 6030180C	
899B: 06030100	
899F: 3C0C0C0C	
89A3: 0C0C3C00	
89A7: 081C3663	
89AB: 00000000	
89AF: 00000000	
89B3: 0000007F	
89B7: 18180C00	
89BB: 00000000	
89BF: 00003C06	
89C3: 3E663B00	
89C7: 7030303E	
89CB: 33336E00	
89CF: 00003C66	
89D3: 60663C00	
89D7: 0E06063E	
89DB: 66663B00	
89DF: 00003C66	
89E3: 7E603C00	
89E7: 1C363078	
89EB: 30307800	
89EF: 00003B66	
89F3: 663E067C	
89F7: 7030363B	
89FB: 33337300	
89FF: 18003818	
8A03: 18183C00	
8A07: 06000606	
8A0B: 0666663C	
8A0F: 70303336	
8A13: 3C367300	
8A17: 38181818	
8A1B: 18183C00	
8A1F: 0000667F	
8A23: 7F6B6300	
8A27: 00007C66	
8A2B: 66666600	
8A2F: 00003C66	
8A33: 66663C00	
8A37: 00006E33	
8A3B: 333E3078	
8A3F: 00003B66	
8A43: 663E060F	
8A47: 00006E3B	
8A4B: 33307800	
8A4F: 00003E60	
8A53: 3C067C00	
8A57: 08183E18	
8A5B: 181A0C00	
8A5F: 00006666	
8A63: 66663B00	
8A67: 00006666	
8A6B: 663C1800	
8A6F: 0000636B	
8A73: 7F7F3600	
8A77: 00006336	
8A7B: 1C366300	
8A7F: 00006666	
8A83: 663E067C	
8A87: 00007E4C	
8A8B: 18327E00	
8A8F: 0E181870	
8A93: 18180E00	
8A97: 0C0C0C00	
8A9B: 0C0C0C00	
8A9F: 7018180E	
8AA3: 18187000	
8AA7: 3B6E0000	
8AAB: 00000000	
8AAF: 00...   	
              	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		15th November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
8AB7:         	SystemInformationTable:
              	
8AB7:         	SINextFreeCode: 									; +0 	Next Free Code Byte
8AB7: 00A00000			dw 		FreeMemory,0
8ABB:         	SINextFreeCodePage: 								; +4 	Next Free Code Byte Page
8ABB: 24000000			dw 		FirstCodePage,0
8ABF:         	SIBootCodeAddress:									; +8	Run from here
8ABF: F2830000			dw 		LOADBootstrap,0
8AC3:         	SIBootCodePage: 									; +12   Run page.
8AC3: 24000000			db		FirstCodePage,0,0,0
8AC7:         	SIPageUsage:										; +16 	Page Usage Table
8AC7: 278B0000			dw 		PageUsage,0 			
8ACB:         	SIWord:												; +20 	Work word, used in fill/copy/etc
8ACB: 00000000			dw 		0,0 			
8ACF:         	SIDisplayInformation:								; +24 	Display Information structure address
8ACF: 0F8B0000			dw 		DIScreenWidth,0
8AD3:         	SIStack:											; +28 	Initial Z80 stack value
8AD3: F07E0000			dw 		StackTop,0							
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8AD7:         	PAGEStackPointer: 									; stack used for switching pages
8AD7: 0000    			dw 		0
8AD9:         	PAGEStackBase:
8AD9: FFFFFFFF			ds 		16
8ADD: FF...   	
8AE9:         	COMARegister:										; temp when doing things in the compiler.
8AE9: 0000    			dw 		0
8AEB:         	COMBRegister:
8AEB: 0000    			dw 		0	
              	
8AED: 86      			db 		$86 								; makes everything 'execute'
8AEE:         	CLIBuffer: 											; CLI Buffer
8AEE: FFFFFFFF			ds 		32
8AF2: FF...   	
8B0E:         	CLILastKeyboardState:								; last state of keyboard
8B0E: 00      			db 		0
              	;
              	;			Display Information
              	;
8B0F:         	DIScreenWidth:										; +0 	Screen Width
8B0F: 00000000			dw 		0,0
8B13:         	DIScreenHeight:										; +4 	Screen Height
8B13: 00000000			dw 		0,0
8B17:         	DIScreenSize: 										; +8    Screen Size in Characters
8B17: 00000000			dw 		0,0
8B1B:         	DIScreenDriver:										; +12 	Screen Driver
8B1B: 00000000			dw 		0,0 								
8B1F:         	DIFontBase:											; +16 	768 byte font, begins with space
8B1F: B7870000			dw 		AlternateFont,0 							
8B23:         	DIScreenMode:										; +20 	Current Mode
8B23: 00000000			dw 		0,0
              	;
              	;			Page usage table.
              	;
8B27:         	PageUsage:
8B27: 01      			db 		1									; $20 (dictionary) [1 = system]
8B28: 01      			db 		1 									; $22 (bootstrap)  [2 = code]
8B29: 02      			db 		2									; $24 (first code)
8B2A: 00000000			db 		0,0,0,0,0 							; $26-$2E 		   [0 = unused]
8B2E: 00      	
8B2F: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
8B33: 00000000	
8B37: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
8B3B: 00000000	
8B3F: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8B43: 00000000	
8B47: FF      			db 		$FF 								; end of page.
              	
8B48: FFFFFFFF			org 	$A000
8B4C: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF			org 	$C000
A004: FF...   	
C000: 00      			db 		0 									; start of dictionary, which is empty.


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont              = $87B7 = 34743          kernel.asm:62
Boot                       = $8015 = 32789          kernel.asm:29
BootstrapPage              = $0022 =    34          kernel.asm:18
CLIBuffer                  = $8AEE = 35566          data.asm:53 (unused)
CLILastKeyboardState       = $8B0E = 35598          data.asm:55 (unused)
COMARegister               = $8AE9 = 35561          data.asm:47 (unused)
COMBRegister               = $8AEB = 35563          data.asm:49 (unused)
COMCompileCallToFollowing  = $8516 = 34070          utility.asm:51
COMCompileExecute          = $856C = 34156          compiler.asm:19
COMCompileWord             = $85B0 = 34224          compiler.asm:82
COMCopyFollowingCode       = $8505 = 34053          utility.asm:29
CONSTConvert               = $8524 = 34084          constant.asm:19
DICTAddWord                = $8451 = 33873          dictionary.asm:19
DICTFindWord               = $84AB = 33963          dictionary.asm:90
DIFontBase                 = $8B1F = 35615          data.asm:68
DIScreenDriver             = $8B1B = 35611          data.asm:66
DIScreenHeight             = $8B13 = 35603          data.asm:62
DIScreenMode               = $8B23 = 35619          data.asm:70
DIScreenSize               = $8B17 = 35607          data.asm:64
DIScreenWidth              = $8B0F = 35599          data.asm:60
DIVDivideMod16             = $80BA = 32954          divide.asm:18 (unused)
DictionaryPage             = $0020 =    32          kernel.asm:17
Div16_Loop1                = $80C4 = 32964          divide.asm:27
Div16_Loop2                = $80D5 = 32981          divide.asm:41
Div16_NoAdd1               = $80CC = 32972          divide.asm:33
Div16_NoAdd2               = $80DD = 32989          divide.asm:47
EditBuffer                 = $7B08 = 31496          kernel.asm:13
ErrorHandler               = $802D = 32813          kernel.asm:41
ErrorMessageBuffer         = $7D10 = 32016          kernel.asm:14 (unused)
ExecuteCodeBuffer          = $7D40 = 32064          kernel.asm:15
FARCompileByte             = $806F = 32879          farmemory.asm:21
FARCompileByteL            = $806E = 32878          farmemory.asm:18 (unused)
FARCompileWord             = $8087 = 32903          farmemory.asm:43
FARRead                    = $80A2 = 32930          farmemory.asm:68
FARWrite                   = $80AF = 32943          farmemory.asm:82
FirstCodePage              = $0024 =    36          kernel.asm:19
FreeMemory                 = $A000 = 40960          data.asm:86
GFXClearScreen             = $80FF = 33023          graphics.asm:18
GFXGetFontGraphicDE        = $8183 = 33155          graphics.asm:146
GFXInitialise48k           = $8273 = 33395          screen48k.asm:19
GFXInitialiseLayer2        = $82D6 = 33494          screen_layer2.asm:19
GFXInitialiseLowRes        = $836D = 33645          screen_lores.asm:18
GFXMode                    = $8109 = 33033          graphics.asm:32
GFXPrintCharacter48k       = $829F = 33439          screen48k.asm:53
GFXPrintCharacterLayer2    = $8306 = 33542          screen_layer2.asm:56
GFXPrintCharacterLowRes    = $8397 = 33687          screen_lores.asm:50
GFXWriteCharacter          = $813E = 33086          graphics.asm:78
GFXWriteHexWord            = $8151 = 33105          graphics.asm:101
GFXWriteHexWordA           = $8153 = 33107          graphics.asm:103 (unused)
HaltZ80                    = $875E = 34654          __words.asm:613
IOScanKeyboard             = $81A6 = 33190          keyboard.asm:18
L2PClear                   = $82DF = 33503          screen_layer2.asm:26
L2PClearBank               = $82EF = 33519          screen_layer2.asm:35
LOADBootstrap              = $83F2 = 33778          loader.asm:18
LOADScanBuffer             = $8438 = 33848          loader.asm:69
LowClearScreen             = $8380 = 33664          screen_lores.asm:30
MULTMultiply16             = $80E5 = 32997          multiply.asm:18
PAGEInitialise             = $802F = 32815          paging.asm:18
PAGERestore                = $8058 = 32856          paging.asm:62
PAGEStackBase              = $8AD9 = 35545          data.asm:45
PAGEStackPointer           = $8AD7 = 35543          data.asm:43
PAGESwitch                 = $803F = 32831          paging.asm:34
PageUsage                  = $8B27 = 35623          data.asm:75
SIBootCodeAddress          = $8ABF = 35519          data.asm:24
SIBootCodePage             = $8AC3 = 35523          data.asm:26
SIDisplayInformation       = $8ACF = 35535          data.asm:32 (unused)
SINextFreeCode             = $8AB7 = 35511          data.asm:20
SINextFreeCodePage         = $8ABB = 35515          data.asm:22
SIPageUsage                = $8AC7 = 35527          data.asm:28 (unused)
SIStack                    = $8AD3 = 35539          data.asm:34
SIWord                     = $8ACB = 35531          data.asm:30
StackTop                   = $7EF0 = 32496          kernel.asm:12
SystemInformationTable     = $8AB7 = 35511          data.asm:18
__COMCCompile              = $85AA = 34218          compiler.asm:78
__COMCDefine               = $858E = 34190          compiler.asm:53
__COMCDefineNoHeader       = $85A5 = 34213          compiler.asm:66
__COMCExecute              = $85DE = 34270          compiler.asm:125
__COMCExitOkay             = $858A = 34186          compiler.asm:41
__COMCFCLoop               = $850D = 34061          utility.asm:37
__COMCFail                 = $8584 = 34180          compiler.asm:35
__COMCWCallIX              = $85DC = 34268          compiler.asm:115
__COMCWConstant            = $85BC = 34236          compiler.asm:92 (unused)
__COMCWExecute             = $85CC = 34252          compiler.asm:104
__CONConFail               = $8563 = 34147          constant.asm:77
__CONConvLoop              = $852D = 34093          constant.asm:28
__CONMinusExit             = $8550 = 34128          constant.asm:57
__CONNotNegative           = $855D = 34141          constant.asm:71
__Core__Mult_Loop          = $80EC = 33004          multiply.asm:24
__Core__Mult_Shift         = $80F1 = 33009          multiply.asm:28
__DICTAddCopy              = $8494 = 33940          dictionary.asm:65
__DICTAddGetLength         = $845C = 33884          dictionary.asm:29
__DICTCheckName            = $84C9 = 33993          dictionary.asm:113
__DICTCreateEntry          = $8479 = 33913          dictionary.asm:50
__DICTFindEndDictionary    = $846C = 33900          dictionary.asm:41
__DICTFindExit             = $84FC = 34044          dictionary.asm:146
__DICTFindFail             = $84F5 = 34037          dictionary.asm:142
__DICTFindMainLoop         = $84B9 = 33977          dictionary.asm:101
__DICTFindNext             = $84EC = 34028          dictionary.asm:136 (unused)
__DICTFindNoMatch          = $84E9 = 34025          dictionary.asm:133
__EqualFail                = $8637 = 34359          __words.asm:97
__GFXConfigure             = $8123 = 33059          graphics.asm:53
__GFXLayer2                = $811B = 33051          graphics.asm:46
__GFXLowRes                = $8120 = 33056          graphics.asm:50
__GFXPromptCharacter       = $819E = 33182          graphics.asm:167
__GFXWCExit                = $814C = 33100          graphics.asm:88
__GFXWHByte                = $8165 = 33125          graphics.asm:119
__GFXWHDigit               = $817B = 33147          graphics.asm:133
__GFXWHNibble              = $8172 = 33138          graphics.asm:127
__L2Exit                   = $8366 = 33638          screen_layer2.asm:136
__L2Loop                   = $8357 = 33623          screen_layer2.asm:123
__L2Not1                   = $831C = 33564          screen_layer2.asm:76
__L2Not2                   = $8322 = 33570          screen_layer2.asm:80
__L2Not3                   = $8328 = 33576          screen_layer2.asm:84
__L2NotSet                 = $835D = 33629          screen_layer2.asm:128
__L2Outer                  = $834F = 33615          screen_layer2.asm:118
__LOADBootLoop             = $8403 = 33795          loader.asm:29
__LOADEnds                 = $8432 = 33842          loader.asm:59 (unused)
__LOADNextWord             = $8444 = 33860          loader.asm:81
__LOADScanExit             = $844C = 33868          loader.asm:88
__LOADScanLoop             = $843C = 33852          loader.asm:74
__LPExit                   = $83EB = 33771          screen_lores.asm:120
__LessDifferentSigns       = $864E = 34382          __words.asm:125
__LessFalse                = $864A = 34378          __words.asm:121
__LessTrue                 = $8652 = 34386          __words.asm:129
__LowLoop                  = $83D7 = 33751          screen_lores.asm:104
__LowNotLower2             = $83CD = 33741          screen_lores.asm:97
__LowNotSet                = $83DD = 33757          screen_lores.asm:109
__LowOuter                 = $83CF = 33743          screen_lores.asm:99
__ZXWCCopy                 = $82CB = 33483          screen48k.asm:101
__ZXWCExit                 = $82D1 = 33489          screen48k.asm:107
___kr4                     = $81D7 = 33239          keyboard.asm:49
__copy2                    = $877F = 34687          __words.asm:650
__copyExit                 = $877B = 34683          __words.asm:644
__cs1                      = $8283 = 33411          screen48k.asm:29
__cs2                      = $828B = 33419          screen48k.asm:34
__fill1                    = $8794 = 34708          __words.asm:674
__kr1                      = $81BB = 33211          keyboard.asm:32
__kr2                      = $81C6 = 33222          keyboard.asm:38
__kr3                      = $81C8 = 33224          keyboard.asm:41
__kr_exit                  = $81F7 = 33271          keyboard.asm:79
__kr_keypressed            = $81F1 = 33265          keyboard.asm:73
__kr_no_shift_table        = $81FB = 33275          keyboard.asm:94
__kr_shift_table           = $824B = 33355          keyboard.asm:106
__kr_symbol_shift_table    = $8223 = 33315          keyboard.asm:100
_end                       = $C001 = 49153          kernel.asm:20 (unused)
_size                      = $4001 = 16385          kernel.asm:20 (unused)
en_flat_21                 = $868E = 34446          __words.asm:241
en_flat_2a                 = $860C = 34316          __words.asm:32 (unused)
en_flat_2b                 = $8606 = 34310          __words.asm:22
en_flat_2b_21              = $869A = 34458          __words.asm:260 (unused)
en_flat_2b_2b              = $8721 = 34593          __words.asm:500
en_flat_2c                 = $87AC = 34732          __words.asm:706 (unused)
en_flat_2d                 = $8711 = 34577          __words.asm:473
en_flat_2d_2d              = $8727 = 34599          __words.asm:511
en_flat_30_3c              = $8705 = 34565          __words.asm:456 (unused)
en_flat_30_3d              = $86FA = 34554          __words.asm:442 (unused)
en_flat_31_36_2a           = $8746 = 34630          __words.asm:560
en_flat_32_2a              = $872D = 34605          __words.asm:522
en_flat_32_2f              = $8736 = 34614          __words.asm:534
en_flat_34_2a              = $873D = 34621          __words.asm:546
en_flat_3b                 = $875B = 34651          __words.asm:604
en_flat_3c                 = $8656 = 34390          __words.asm:133 (unused)
en_flat_3d                 = $863B = 34363          __words.asm:101 (unused)
en_flat_40                 = $867F = 34431          __words.asm:216
en_flat_61_3e_62           = $86C6 = 34502          __words.asm:338
en_flat_61_62_3e_72        = $86D4 = 34516          __words.asm:371
en_flat_61_6e_64           = $8616 = 34326          __words.asm:48 (unused)
en_flat_62_3e_61           = $86CD = 34509          __words.asm:350
en_flat_62_72_65_61_6b     = $8755 = 34645          __words.asm:593
en_flat_62_73_77_61_70     = $874E = 34638          __words.asm:573
en_flat_63_21              = $8685 = 34437          __words.asm:227
en_flat_63_2c              = $87A5 = 34725          __words.asm:695 (unused)
en_flat_63_40              = $8676 = 34422          __words.asm:202
en_flat_63_6f_70_79        = $8788 = 34696          __words.asm:658 (unused)
en_flat_66_61_72_21        = $86B9 = 34489          __words.asm:307 (unused)
en_flat_66_61_72_40        = $86B3 = 34483          __words.asm:297 (unused)
en_flat_66_69_6c_6c        = $879E = 34718          __words.asm:684 (unused)
en_flat_68_61_6c_74        = $8762 = 34658          __words.asm:617 (unused)
en_flat_68_65_78_21        = $866E = 34414          __words.asm:182 (unused)
en_flat_69_6e_6b_65_79     = $87B7 = 34743          __words.asm:720 (unused)
en_flat_6e_6f_74           = $871B = 34587          __words.asm:489 (unused)
en_flat_6f_72              = $862A = 34346          __words.asm:80 (unused)
en_flat_70_21              = $86A3 = 34467          __words.asm:273
en_flat_70_40              = $86AD = 34477          __words.asm:287 (unused)
en_flat_70_6f_70           = $86EF = 34543          __words.asm:418
en_flat_70_75_73_68        = $86E8 = 34536          __words.asm:406
en_flat_72_3e_61_62        = $86DB = 34523          __words.asm:383
en_flat_72_3e_62_62        = $86E2 = 34530          __words.asm:395
en_flat_73_63_72_65_65_6e_21 = $865C = 34396          __words.asm:152 (unused)
en_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72 = $8668 = 34408          __words.asm:172 (unused)
en_flat_73_63_72_65_65_6e_2e_6d_6f_64_65 = $8662 = 34402          __words.asm:162 (unused)
en_flat_73_77_61_70        = $86BF = 34495          __words.asm:326
en_flat_78_6f_72           = $8620 = 34336          __words.asm:64 (unused)
flatwordmarker_21          = $8685 = 34437          __words.asm:233 (unused)
flatwordmarker_2a          = $8606 = 34310          __words.asm:28 (unused)
flatwordmarker_2b          = $8600 = 34304          __words.asm:17 (unused)
flatwordmarker_2b_21       = $868E = 34446          __words.asm:247 (unused)
flatwordmarker_2b_2b       = $871B = 34587          __words.asm:495 (unused)
flatwordmarker_2c          = $87A5 = 34725          __words.asm:701 (unused)
flatwordmarker_2d          = $8705 = 34565          __words.asm:462 (unused)
flatwordmarker_2d_2d       = $8721 = 34593          __words.asm:506 (unused)
flatwordmarker_30_3c       = $86FA = 34554          __words.asm:448 (unused)
flatwordmarker_30_3d       = $86EF = 34543          __words.asm:433 (unused)
flatwordmarker_31_36_2a    = $873D = 34621          __words.asm:552 (unused)
flatwordmarker_32_2a       = $8727 = 34599          __words.asm:517 (unused)
flatwordmarker_32_2f       = $872D = 34605          __words.asm:528 (unused)
flatwordmarker_34_2a       = $8736 = 34614          __words.asm:540 (unused)
flatwordmarker_3b          = $8755 = 34645          __words.asm:599 (unused)
flatwordmarker_3c          = $863B = 34363          __words.asm:107 (unused)
flatwordmarker_3d          = $862A = 34346          __words.asm:87 (unused)
flatwordmarker_40          = $8676 = 34422          __words.asm:208 (unused)
flatwordmarker_61_3e_62    = $86BF = 34495          __words.asm:332 (unused)
flatwordmarker_61_62_3e_72 = $86CD = 34509          __words.asm:365 (unused)
flatwordmarker_61_6e_64    = $860C = 34316          __words.asm:38 (unused)
flatwordmarker_62_3e_61    = $86C6 = 34502          __words.asm:344 (unused)
flatwordmarker_62_72_65_61_6b = $874E = 34638          __words.asm:588 (unused)
flatwordmarker_62_73_77_61_70 = $8746 = 34630          __words.asm:566 (unused)
flatwordmarker_63_21       = $867F = 34431          __words.asm:222 (unused)
flatwordmarker_63_2c       = $879E = 34718          __words.asm:690 (unused)
flatwordmarker_63_40       = $866E = 34414          __words.asm:196 (unused)
flatwordmarker_63_6f_70_79 = $8762 = 34658          __words.asm:623 (unused)
flatwordmarker_66_61_72_21 = $86B3 = 34483          __words.asm:303 (unused)
flatwordmarker_66_61_72_40 = $86AD = 34477          __words.asm:293 (unused)
flatwordmarker_66_69_6c_6c = $8788 = 34696          __words.asm:664 (unused)
flatwordmarker_68_61_6c_74 = $875B = 34651          __words.asm:610 (unused)
flatwordmarker_68_65_78_21 = $8668 = 34408          __words.asm:178 (unused)
flatwordmarker_69_6e_6b_65_79 = $87AC = 34732          __words.asm:712 (unused)
flatwordmarker_6e_6f_74    = $8711 = 34577          __words.asm:479 (unused)
flatwordmarker_6f_72       = $8620 = 34336          __words.asm:70 (unused)
flatwordmarker_70_21       = $869A = 34458          __words.asm:266 (unused)
flatwordmarker_70_40       = $86A3 = 34467          __words.asm:279 (unused)
flatwordmarker_70_6f_70    = $86E8 = 34536          __words.asm:412 (unused)
flatwordmarker_70_75_73_68 = $86E2 = 34530          __words.asm:401 (unused)
flatwordmarker_72_3e_61_62 = $86D4 = 34516          __words.asm:377 (unused)
flatwordmarker_72_3e_62_62 = $86DB = 34523          __words.asm:389 (unused)
flatwordmarker_73_63_72_65_65_6e_21 = $8656 = 34390          __words.asm:148 (unused)
flatwordmarker_73_63_72_65_65_6e_2e_63_6c_65_61_72 = $8662 = 34402          __words.asm:168 (unused)
flatwordmarker_73_63_72_65_65_6e_2e_6d_6f_64_65 = $865C = 34396          __words.asm:158 (unused)
flatwordmarker_73_77_61_70 = $86B9 = 34489          __words.asm:321 (unused)
flatwordmarker_78_6f_72    = $8616 = 34326          __words.asm:54 (unused)
st_flat_21                 = $868A = 34442          __words.asm:236
st_flat_2a                 = $8609 = 34313          __words.asm:30 (unused)
st_flat_2b                 = $8605 = 34309          __words.asm:20
st_flat_2b_21              = $8691 = 34449          __words.asm:249 (unused)
st_flat_2b_2b              = $8720 = 34592          __words.asm:498
st_flat_2c                 = $87A8 = 34728          __words.asm:703 (unused)
st_flat_2d                 = $870A = 34570          __words.asm:465
st_flat_2d_2d              = $8726 = 34598          __words.asm:509
st_flat_30_3c              = $86FD = 34557          __words.asm:450 (unused)
st_flat_30_3d              = $86F2 = 34546          __words.asm:435 (unused)
st_flat_31_36_2a           = $8742 = 34626          __words.asm:555
st_flat_32_2a              = $872C = 34604          __words.asm:520
st_flat_32_2f              = $8732 = 34610          __words.asm:531
st_flat_34_2a              = $873B = 34619          __words.asm:543
st_flat_3b                 = $875A = 34650          __words.asm:602
st_flat_3c                 = $863E = 34366          __words.asm:109 (unused)
st_flat_3d                 = $862D = 34349          __words.asm:89 (unused)
st_flat_40                 = $867B = 34427          __words.asm:211
st_flat_61_3e_62           = $86C4 = 34500          __words.asm:335
st_flat_61_62_3e_72        = $86D2 = 34514          __words.asm:368
st_flat_61_6e_64           = $860F = 34319          __words.asm:40 (unused)
st_flat_62_3e_61           = $86CB = 34507          __words.asm:347
st_flat_62_72_65_61_6b     = $8753 = 34643          __words.asm:591
st_flat_62_73_77_61_70     = $874B = 34635          __words.asm:569
st_flat_63_21              = $8684 = 34436          __words.asm:225
st_flat_63_2c              = $87A1 = 34721          __words.asm:692 (unused)
st_flat_63_40              = $8673 = 34419          __words.asm:199
st_flat_63_6f_70_79        = $8765 = 34661          __words.asm:625 (unused)
st_flat_66_61_72_21        = $86B6 = 34486          __words.asm:305 (unused)
st_flat_66_61_72_40        = $86B0 = 34480          __words.asm:295 (unused)
st_flat_66_69_6c_6c        = $878B = 34699          __words.asm:666 (unused)
st_flat_68_61_6c_74        = $875E = 34654          __words.asm:612 (unused)
st_flat_68_65_78_21        = $866B = 34411          __words.asm:180 (unused)
st_flat_69_6e_6b_65_79     = $87AF = 34735          __words.asm:714 (unused)
st_flat_6e_6f_74           = $8714 = 34580          __words.asm:481 (unused)
st_flat_6f_72              = $8623 = 34339          __words.asm:72 (unused)
st_flat_70_21              = $869F = 34463          __words.asm:269
st_flat_70_40              = $86A6 = 34470          __words.asm:281 (unused)
st_flat_70_6f_70           = $86ED = 34541          __words.asm:415
st_flat_70_75_73_68        = $86E7 = 34535          __words.asm:404
st_flat_72_3e_61_62        = $86D9 = 34521          __words.asm:380
st_flat_72_3e_62_62        = $86E0 = 34528          __words.asm:392
st_flat_73_63_72_65_65_6e_21 = $8659 = 34393          __words.asm:150 (unused)
st_flat_73_63_72_65_65_6e_2e_63_6c_65_61_72 = $8665 = 34405          __words.asm:170 (unused)
st_flat_73_63_72_65_65_6e_2e_6d_6f_64_65 = $865F = 34399          __words.asm:160 (unused)
st_flat_73_77_61_70        = $86BE = 34494          __words.asm:324
st_flat_78_6f_72           = $8619 = 34329          __words.asm:56 (unused)


total time: 0.0153 sec.
no errors
