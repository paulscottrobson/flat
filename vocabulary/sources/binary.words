// ***************************************************************************************
// ***************************************************************************************
//
//		Name : 		binary.words
//		Author :	Paul Robson (paul@robsons.org.uk)
//		Date : 		6th December 2018
//		Purpose :	Source code for bootstrap : Binary words
//
// ***************************************************************************************
// ***************************************************************************************

@word 	* 											// 16 bit multiply A = A * B
		jp 		MULTMultiply16

// =======================================================================================

@word 	/ 											// 16 bit divide A = B / A
		push 	de
		ex 		de,hl
		call 	DIVDivideMod16
		ex 		de,hl
		pop 	de
		ret

// =======================================================================================

@word 	mod 										// 16 bit divide A = B mod A
		push 	de
		ex 		de,hl
		call 	DIVDivideMod16
		pop 	de
		ret

// =======================================================================================

@macro 	+ 											// 16 bit add A = A + B
		add 	hl,de

// =======================================================================================

@macro 	- 											// 16 bit subtract A = B - A
		ld 		b,h
		ld 		c,l
		ld 		h,d
		ld 		l,e
		xor 	a
		sbc 	hl,de

// =======================================================================================

@word 	< 											// A = -1 if B < A else 0
		ld 		a,d 								// look at bit 15's
		xor 	h
		add 	a,a 								// Shift top bit into C
		jr 		c,__SignsDifferent 					// code if signs are different.
		push 	de
		ex 		de,hl
		xor 	a 									// do B-A calculation
		sbc 	hl,de
		pop 	de
		ld 		hl,$0000 							// return with 0 if NC
		ret 	nc
		dec 	hl
		ret

__SignsDifferent:
		bit 	7,d
		ld 		hl,$0000 							// if D is +ve it must be bigger
		ret 	z
		dec 	hl
		ret

// =======================================================================================

@word 	= 											// A = -1 if B = A else 0
		ld 		a,d 								// H = D ^ H
		xor 	h
		ld 		h,a
		ld 		a,e 								// A = (D^H) | (E^L)
		xor 	l
		or 		h
		ld 		hl,$0000	 						// A = 0 if different
		ret 	nz
		dec 	hl
		ret

// =======================================================================================

@word 	and
		ld 		a,h
		and 	d
		ld 		h,a
		ld 		a,l
		and 	e
		ld 		l,a
		ret

// =======================================================================================

@word 	or
		ld 		a,h
		or 		d
		ld 		h,a
		ld 		a,l
		or 		e
		ld 		l,a
		ret
				
// =======================================================================================

@word 	xor
		ld 		a,h
		xor 	d
		ld 		h,a
		ld 		a,l
		xor 	e
		ld 		l,a
		ret
				
		